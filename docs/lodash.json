{
  "docs": [
    {
      "comment": "/** Used as a safe reference for `undefined` in pre-ES5 environments. */",
      "meta": {
        "range": [
          432,
          441
        ],
        "filename": "lodash.js",
        "lineno": 12,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000008",
          "name": "undefined"
        }
      },
      "description": "Used as a safe reference for `undefined` in pre-ES5 environments.",
      "name": "undefined",
      "longname": "<anonymous>~undefined",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000002",
      "___s": true
    },
    {
      "comment": "/** Used as the semantic version number. */",
      "meta": {
        "range": [
          496,
          514
        ],
        "filename": "lodash.js",
        "lineno": 15,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000011",
          "name": "VERSION",
          "type": "Literal",
          "value": "4.16.4"
        }
      },
      "description": "Used as the semantic version number.",
      "name": "VERSION",
      "longname": "<anonymous>~VERSION",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000003",
      "___s": true
    },
    {
      "comment": "/** Used as the size to enable large array optimizations. */",
      "meta": {
        "range": [
          586,
          608
        ],
        "filename": "lodash.js",
        "lineno": 18,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000015",
          "name": "LARGE_ARRAY_SIZE",
          "type": "Literal",
          "value": 200
        }
      },
      "description": "Used as the size to enable large array optimizations.",
      "name": "LARGE_ARRAY_SIZE",
      "longname": "<anonymous>~LARGE_ARRAY_SIZE",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000004",
      "___s": true
    },
    {
      "comment": "/** Error message constants. */",
      "meta": {
        "range": [
          651,
          728
        ],
        "filename": "lodash.js",
        "lineno": 21,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000019",
          "name": "CORE_ERROR_TEXT",
          "type": "Literal",
          "value": "Unsupported core-js use. Try https://github.com/es-shims."
        }
      },
      "description": "Error message constants.",
      "name": "CORE_ERROR_TEXT",
      "longname": "<anonymous>~CORE_ERROR_TEXT",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000005",
      "___s": true
    },
    {
      "comment": "/** Used to stand-in for `undefined` hash values. */",
      "meta": {
        "range": [
          839,
          883
        ],
        "filename": "lodash.js",
        "lineno": 25,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000026",
          "name": "HASH_UNDEFINED",
          "type": "Literal",
          "value": "__lodash_hash_undefined__"
        }
      },
      "description": "Used to stand-in for `undefined` hash values.",
      "name": "HASH_UNDEFINED",
      "longname": "<anonymous>~HASH_UNDEFINED",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000007",
      "___s": true
    },
    {
      "comment": "/** Used as the maximum memoize cache size. */",
      "meta": {
        "range": [
          941,
          963
        ],
        "filename": "lodash.js",
        "lineno": 28,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000030",
          "name": "MAX_MEMOIZE_SIZE",
          "type": "Literal",
          "value": 500
        }
      },
      "description": "Used as the maximum memoize cache size.",
      "name": "MAX_MEMOIZE_SIZE",
      "longname": "<anonymous>~MAX_MEMOIZE_SIZE",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000008",
      "___s": true
    },
    {
      "comment": "/** Used as the internal argument placeholder. */",
      "meta": {
        "range": [
          1024,
          1062
        ],
        "filename": "lodash.js",
        "lineno": 31,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000034",
          "name": "PLACEHOLDER",
          "type": "Literal",
          "value": "__lodash_placeholder__"
        }
      },
      "description": "Used as the internal argument placeholder.",
      "name": "PLACEHOLDER",
      "longname": "<anonymous>~PLACEHOLDER",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000009",
      "___s": true
    },
    {
      "comment": "/** Used to compose bitmasks for function metadata. */",
      "meta": {
        "range": [
          1128,
          1141
        ],
        "filename": "lodash.js",
        "lineno": 34,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000038",
          "name": "BIND_FLAG",
          "type": "Literal",
          "value": 1
        }
      },
      "description": "Used to compose bitmasks for function metadata.",
      "name": "BIND_FLAG",
      "longname": "<anonymous>~BIND_FLAG",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000010",
      "___s": true
    },
    {
      "comment": "/** Used to compose bitmasks for comparison styles. */",
      "meta": {
        "range": [
          1436,
          1462
        ],
        "filename": "lodash.js",
        "lineno": 46,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000069",
          "name": "UNORDERED_COMPARE_FLAG",
          "type": "Literal",
          "value": 1
        }
      },
      "description": "Used to compose bitmasks for comparison styles.",
      "name": "UNORDERED_COMPARE_FLAG",
      "longname": "<anonymous>~UNORDERED_COMPARE_FLAG",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000020",
      "___s": true
    },
    {
      "comment": "/** Used as default options for `_.truncate`. */",
      "meta": {
        "range": [
          1554,
          1579
        ],
        "filename": "lodash.js",
        "lineno": 50,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000076",
          "name": "DEFAULT_TRUNC_LENGTH",
          "type": "Literal",
          "value": 30
        }
      },
      "description": "Used as default options for `_.truncate`.",
      "name": "DEFAULT_TRUNC_LENGTH",
      "longname": "<anonymous>~DEFAULT_TRUNC_LENGTH",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000022",
      "___s": true
    },
    {
      "comment": "/** Used to detect hot functions by number of calls within a span of milliseconds. */",
      "meta": {
        "range": [
          1714,
          1729
        ],
        "filename": "lodash.js",
        "lineno": 54,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000083",
          "name": "HOT_COUNT",
          "type": "Literal",
          "value": 500
        }
      },
      "description": "Used to detect hot functions by number of calls within a span of milliseconds.",
      "name": "HOT_COUNT",
      "longname": "<anonymous>~HOT_COUNT",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000024",
      "___s": true
    },
    {
      "comment": "/** Used to indicate the type of lazy iteratees. */",
      "meta": {
        "range": [
          1813,
          1833
        ],
        "filename": "lodash.js",
        "lineno": 58,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000090",
          "name": "LAZY_FILTER_FLAG",
          "type": "Literal",
          "value": 1
        }
      },
      "description": "Used to indicate the type of lazy iteratees.",
      "name": "LAZY_FILTER_FLAG",
      "longname": "<anonymous>~LAZY_FILTER_FLAG",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000026",
      "___s": true
    },
    {
      "comment": "/** Used as references for various `Number` constants. */",
      "meta": {
        "range": [
          1954,
          1970
        ],
        "filename": "lodash.js",
        "lineno": 63,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000100",
          "name": "INFINITY",
          "type": "BinaryExpression",
          "value": ""
        }
      },
      "description": "Used as references for various `Number` constants.",
      "name": "INFINITY",
      "longname": "<anonymous>~INFINITY",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000029",
      "___s": true
    },
    {
      "comment": "/** Used as references for the maximum length and index of an array. */",
      "meta": {
        "range": [
          2160,
          2189
        ],
        "filename": "lodash.js",
        "lineno": 69,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000117",
          "name": "MAX_ARRAY_LENGTH",
          "type": "Literal",
          "value": 4294967295
        }
      },
      "description": "Used as references for the maximum length and index of an array.",
      "name": "MAX_ARRAY_LENGTH",
      "longname": "<anonymous>~MAX_ARRAY_LENGTH",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000033",
      "___s": true
    },
    {
      "comment": "/** Used to associate wrap methods with their bit flags. */",
      "meta": {
        "range": [
          2360,
          2646
        ],
        "filename": "lodash.js",
        "lineno": 74,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000131",
          "name": "wrapFlags",
          "type": "ArrayExpression",
          "value": "[\"[\\\"ary\\\",\\\"ARY_FLAG\\\"]\",\"[\\\"bind\\\",\\\"BIND_FLAG\\\"]\",\"[\\\"bindKey\\\",\\\"BIND_KEY_FLAG\\\"]\",\"[\\\"curry\\\",\\\"CURRY_FLAG\\\"]\",\"[\\\"curryRight\\\",\\\"CURRY_RIGHT_FLAG\\\"]\",\"[\\\"flip\\\",\\\"FLIP_FLAG\\\"]\",\"[\\\"partial\\\",\\\"PARTIAL_FLAG\\\"]\",\"[\\\"partialRight\\\",\\\"PARTIAL_RIGHT_FLAG\\\"]\",\"[\\\"rearg\\\",\\\"REARG_FLAG\\\"]\"]"
        }
      },
      "description": "Used to associate wrap methods with their bit flags.",
      "name": "wrapFlags",
      "longname": "<anonymous>~wrapFlags",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000036",
      "___s": true
    },
    {
      "comment": "/** `Object#toString` result references. */",
      "meta": {
        "range": [
          2701,
          2731
        ],
        "filename": "lodash.js",
        "lineno": 87,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000162",
          "name": "argsTag",
          "type": "Literal",
          "value": "[object Arguments]"
        }
      },
      "description": "`Object#toString` result references.",
      "name": "argsTag",
      "longname": "<anonymous>~argsTag",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000037",
      "___s": true
    },
    {
      "comment": "/** Used to match empty string literals in compiled template source. */",
      "meta": {
        "range": [
          4026,
          4065
        ],
        "filename": "lodash.js",
        "lineno": 122,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000260",
          "name": "reEmptyStringLeading",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match empty string literals in compiled template source.",
      "name": "reEmptyStringLeading",
      "longname": "<anonymous>~reEmptyStringLeading",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000069",
      "___s": true
    },
    {
      "comment": "/** Used to match HTML entities and HTML characters. */",
      "meta": {
        "range": [
          4245,
          4288
        ],
        "filename": "lodash.js",
        "lineno": 127,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000270",
          "name": "reEscapedHtml",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match HTML entities and HTML characters.",
      "name": "reEscapedHtml",
      "longname": "<anonymous>~reEscapedHtml",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000072",
      "___s": true
    },
    {
      "comment": "/** Used to match template delimiters. */",
      "meta": {
        "range": [
          4491,
          4520
        ],
        "filename": "lodash.js",
        "lineno": 133,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000291",
          "name": "reEscape",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match template delimiters.",
      "name": "reEscape",
      "longname": "<anonymous>~reEscape",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000076",
      "___s": true
    },
    {
      "comment": "/** Used to match property names within property paths. */",
      "meta": {
        "range": [
          4670,
          4735
        ],
        "filename": "lodash.js",
        "lineno": 138,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000301",
          "name": "reIsDeepProp",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match property names within property paths.",
      "name": "reIsDeepProp",
      "longname": "<anonymous>~reIsDeepProp",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000079",
      "___s": true
    },
    {
      "comment": "/**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */",
      "meta": {
        "range": [
          5046,
          5082
        ],
        "filename": "lodash.js",
        "lineno": 147,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000314",
          "name": "reRegExpChar",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match `RegExp`\n[syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).",
      "name": "reRegExpChar",
      "longname": "<anonymous>~reRegExpChar",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000083",
      "___s": true
    },
    {
      "comment": "/** Used to match leading and trailing whitespace. */",
      "meta": {
        "range": [
          5200,
          5221
        ],
        "filename": "lodash.js",
        "lineno": 151,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000325",
          "name": "reTrim",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match leading and trailing whitespace.",
      "name": "reTrim",
      "longname": "<anonymous>~reTrim",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000085",
      "___s": true
    },
    {
      "comment": "/** Used to match wrap detail comments. */",
      "meta": {
        "range": [
          5329,
          5388
        ],
        "filename": "lodash.js",
        "lineno": 156,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000335",
          "name": "reWrapComment",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match wrap detail comments.",
      "name": "reWrapComment",
      "longname": "<anonymous>~reWrapComment",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000088",
      "___s": true
    },
    {
      "comment": "/** Used to match words composed of alphanumeric characters. */",
      "meta": {
        "range": [
          5554,
          5611
        ],
        "filename": "lodash.js",
        "lineno": 161,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000345",
          "name": "reAsciiWord",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match words composed of alphanumeric characters.",
      "name": "reAsciiWord",
      "longname": "<anonymous>~reAsciiWord",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000091",
      "___s": true
    },
    {
      "comment": "/** Used to match backslashes in property paths. */",
      "meta": {
        "range": [
          5674,
          5699
        ],
        "filename": "lodash.js",
        "lineno": 164,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000349",
          "name": "reEscapeChar",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match backslashes in property paths.",
      "name": "reEscapeChar",
      "longname": "<anonymous>~reEscapeChar",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000092",
      "___s": true
    },
    {
      "comment": "/**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */",
      "meta": {
        "range": [
          5855,
          5903
        ],
        "filename": "lodash.js",
        "lineno": 170,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000353",
          "name": "reEsTemplate",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match\n[ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).",
      "name": "reEsTemplate",
      "longname": "<anonymous>~reEsTemplate",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000093",
      "___s": true
    },
    {
      "comment": "/** Used to match `RegExp` flags from their coerced string values. */",
      "meta": {
        "range": [
          5984,
          6000
        ],
        "filename": "lodash.js",
        "lineno": 173,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000357",
          "name": "reFlags",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match `RegExp` flags from their coerced string values.",
      "name": "reFlags",
      "longname": "<anonymous>~reFlags",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000094",
      "___s": true
    },
    {
      "comment": "/** Used to detect bad signed hexadecimal string values. */",
      "meta": {
        "range": [
          6071,
          6104
        ],
        "filename": "lodash.js",
        "lineno": 176,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000361",
          "name": "reIsBadHex",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to detect bad signed hexadecimal string values.",
      "name": "reIsBadHex",
      "longname": "<anonymous>~reIsBadHex",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000095",
      "___s": true
    },
    {
      "comment": "/** Used to detect binary string values. */",
      "meta": {
        "range": [
          6159,
          6184
        ],
        "filename": "lodash.js",
        "lineno": 179,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000365",
          "name": "reIsBinary",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to detect binary string values.",
      "name": "reIsBinary",
      "longname": "<anonymous>~reIsBinary",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000096",
      "___s": true
    },
    {
      "comment": "/** Used to detect host constructors (Safari). */",
      "meta": {
        "range": [
          6245,
          6289
        ],
        "filename": "lodash.js",
        "lineno": 182,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000369",
          "name": "reIsHostCtor",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to detect host constructors (Safari).",
      "name": "reIsHostCtor",
      "longname": "<anonymous>~reIsHostCtor",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000097",
      "___s": true
    },
    {
      "comment": "/** Used to detect octal string values. */",
      "meta": {
        "range": [
          6343,
          6368
        ],
        "filename": "lodash.js",
        "lineno": 185,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000373",
          "name": "reIsOctal",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to detect octal string values.",
      "name": "reIsOctal",
      "longname": "<anonymous>~reIsOctal",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000098",
      "___s": true
    },
    {
      "comment": "/** Used to detect unsigned integer values. */",
      "meta": {
        "range": [
          6426,
          6455
        ],
        "filename": "lodash.js",
        "lineno": 188,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000377",
          "name": "reIsUint",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to detect unsigned integer values.",
      "name": "reIsUint",
      "longname": "<anonymous>~reIsUint",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000099",
      "___s": true
    },
    {
      "comment": "/** Used to match Latin Unicode letters (excluding mathematical operators). */",
      "meta": {
        "range": [
          6545,
          6600
        ],
        "filename": "lodash.js",
        "lineno": 191,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000381",
          "name": "reLatin",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match Latin Unicode letters (excluding mathematical operators).",
      "name": "reLatin",
      "longname": "<anonymous>~reLatin",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000100",
      "___s": true
    },
    {
      "comment": "/** Used to ensure capturing order of template delimiters. */",
      "meta": {
        "range": [
          6673,
          6691
        ],
        "filename": "lodash.js",
        "lineno": 194,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000385",
          "name": "reNoMatch",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to ensure capturing order of template delimiters.",
      "name": "reNoMatch",
      "longname": "<anonymous>~reNoMatch",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000101",
      "___s": true
    },
    {
      "comment": "/** Used to match unescaped characters in compiled string literals. */",
      "meta": {
        "range": [
          6773,
          6817
        ],
        "filename": "lodash.js",
        "lineno": 197,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000389",
          "name": "reUnescapedString",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to match unescaped characters in compiled string literals.",
      "name": "reUnescapedString",
      "longname": "<anonymous>~reUnescapedString",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000102",
      "___s": true
    },
    {
      "comment": "/** Used to compose unicode character classes. */",
      "meta": {
        "range": [
          6878,
          6911
        ],
        "filename": "lodash.js",
        "lineno": 200,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000393",
          "name": "rsAstralRange",
          "type": "Literal",
          "value": "\\ud800-\\udfff"
        }
      },
      "description": "Used to compose unicode character classes.",
      "name": "rsAstralRange",
      "longname": "<anonymous>~rsAstralRange",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000103",
      "___s": true
    },
    {
      "comment": "/** Used to compose unicode capture groups. */",
      "meta": {
        "range": [
          7688,
          7708
        ],
        "filename": "lodash.js",
        "lineno": 214,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000436",
          "name": "rsApos",
          "type": "Literal",
          "value": "['’]"
        }
      },
      "description": "Used to compose unicode capture groups.",
      "name": "rsApos",
      "longname": "<anonymous>~rsApos",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000115",
      "___s": true
    },
    {
      "comment": "/** Used to compose unicode regexes. */",
      "meta": {
        "range": [
          8469,
          8519
        ],
        "filename": "lodash.js",
        "lineno": 231,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000534",
          "name": "rsMiscLower",
          "type": "BinaryExpression",
          "value": ""
        }
      },
      "description": "Used to compose unicode regexes.",
      "name": "rsMiscLower",
      "longname": "<anonymous>~rsMiscLower",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000130",
      "___s": true
    },
    {
      "comment": "/** Used to match apostrophes. */",
      "meta": {
        "range": [
          9334,
          9362
        ],
        "filename": "lodash.js",
        "lineno": 245,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000656",
          "name": "reApos",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to match apostrophes.",
      "name": "reApos",
      "longname": "<anonymous>~reApos",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000142",
      "___s": true
    },
    {
      "comment": "/**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */",
      "meta": {
        "range": [
          9614,
          9648
        ],
        "filename": "lodash.js",
        "lineno": 251,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000663",
          "name": "reComboMark",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n[combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).",
      "name": "reComboMark",
      "longname": "<anonymous>~reComboMark",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000143",
      "___s": true
    },
    {
      "comment": "/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */",
      "meta": {
        "range": [
          9749,
          9823
        ],
        "filename": "lodash.js",
        "lineno": 254,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000670",
          "name": "reUnicode",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode).",
      "name": "reUnicode",
      "longname": "<anonymous>~reUnicode",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000144",
      "___s": true
    },
    {
      "comment": "/** Used to match complex or compound words. */",
      "meta": {
        "range": [
          9882,
          10286
        ],
        "filename": "lodash.js",
        "lineno": 257,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000687",
          "name": "reUnicodeWord",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to match complex or compound words.",
      "name": "reUnicodeWord",
      "longname": "<anonymous>~reUnicodeWord",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000145",
      "___s": true
    },
    {
      "comment": "/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */",
      "meta": {
        "range": [
          10448,
          10560
        ],
        "filename": "lodash.js",
        "lineno": 269,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000758",
          "name": "reHasUnicode",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/).",
      "name": "reHasUnicode",
      "longname": "<anonymous>~reHasUnicode",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000146",
      "___s": true
    },
    {
      "comment": "/** Used to detect strings that need a more robust regexp to match words. */",
      "meta": {
        "range": [
          10648,
          10736
        ],
        "filename": "lodash.js",
        "lineno": 272,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000776",
          "name": "reHasUnicodeWord",
          "type": "Literal",
          "value": {}
        }
      },
      "description": "Used to detect strings that need a more robust regexp to match words.",
      "name": "reHasUnicodeWord",
      "longname": "<anonymous>~reHasUnicodeWord",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000147",
      "___s": true
    },
    {
      "comment": "/** Used to assign default `context` object properties. */",
      "meta": {
        "range": [
          10806,
          11199
        ],
        "filename": "lodash.js",
        "lineno": 275,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000780",
          "name": "contextProps",
          "type": "ArrayExpression",
          "value": "[\"Array\",\"Buffer\",\"DataView\",\"Date\",\"Error\",\"Float32Array\",\"Float64Array\",\"Function\",\"Int8Array\",\"Int16Array\",\"Int32Array\",\"Map\",\"Math\",\"Object\",\"Promise\",\"RegExp\",\"Set\",\"String\",\"Symbol\",\"TypeError\",\"Uint8Array\",\"Uint8ClampedArray\",\"Uint16Array\",\"Uint32Array\",\"WeakMap\",\"_\",\"clearTimeout\",\"isFinite\",\"parseInt\",\"setTimeout\"]"
        }
      },
      "description": "Used to assign default `context` object properties.",
      "name": "contextProps",
      "longname": "<anonymous>~contextProps",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000148",
      "___s": true
    },
    {
      "comment": "/** Used to make template sourceURLs easier to identify. */",
      "meta": {
        "range": [
          11270,
          11290
        ],
        "filename": "lodash.js",
        "lineno": 284,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000814",
          "name": "templateCounter",
          "type": "UnaryExpression",
          "value": -1
        }
      },
      "description": "Used to make template sourceURLs easier to identify.",
      "name": "templateCounter",
      "longname": "<anonymous>~templateCounter",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000149",
      "___s": true
    },
    {
      "comment": "/** Used to identify `toStringTag` values of typed arrays. */",
      "meta": {
        "range": [
          11363,
          11382
        ],
        "filename": "lodash.js",
        "lineno": 287,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000819",
          "name": "typedArrayTags",
          "type": "ObjectExpression",
          "value": "{}"
        }
      },
      "description": "Used to identify `toStringTag` values of typed arrays.",
      "name": "typedArrayTags",
      "longname": "<anonymous>~typedArrayTags",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000150",
      "___s": true
    },
    {
      "comment": "/** Used to identify `toStringTag` values supported by `_.clone`. */",
      "meta": {
        "range": [
          12168,
          12186
        ],
        "filename": "lodash.js",
        "lineno": 303,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100000923",
          "name": "cloneableTags",
          "type": "ObjectExpression",
          "value": "{}"
        }
      },
      "description": "Used to identify `toStringTag` values supported by `_.clone`.",
      "name": "cloneableTags",
      "longname": "<anonymous>~cloneableTags",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000175",
      "___s": true
    },
    {
      "comment": "/** Used to map Latin Unicode letters to basic Latin letters. */",
      "meta": {
        "range": [
          12971,
          16047
        ],
        "filename": "lodash.js",
        "lineno": 319,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001031",
          "name": "deburredLetters",
          "type": "ObjectExpression",
          "value": "{\"undefined\":\"s\"}"
        }
      },
      "description": "Used to map Latin Unicode letters to basic Latin letters.",
      "name": "deburredLetters",
      "longname": "<anonymous>~deburredLetters",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000201",
      "___s": true
    },
    {
      "comment": "/** Used to map characters to HTML entities. */",
      "meta": {
        "range": [
          16106,
          16213
        ],
        "filename": "lodash.js",
        "lineno": 377,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001415",
          "name": "htmlEscapes",
          "type": "ObjectExpression",
          "value": "{\"undefined\":\"&#39;\"}"
        }
      },
      "description": "Used to map characters to HTML entities.",
      "name": "htmlEscapes",
      "longname": "<anonymous>~htmlEscapes",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000392",
      "___s": true
    },
    {
      "comment": "/** Used to map HTML entities to characters. */",
      "meta": {
        "range": [
          16272,
          16381
        ],
        "filename": "lodash.js",
        "lineno": 386,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001429",
          "name": "htmlUnescapes",
          "type": "ObjectExpression",
          "value": "{\"undefined\":\"'\"}"
        }
      },
      "description": "Used to map HTML entities to characters.",
      "name": "htmlUnescapes",
      "longname": "<anonymous>~htmlUnescapes",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000398",
      "___s": true
    },
    {
      "comment": "/** Used to escape characters for inclusion in compiled string literals. */",
      "meta": {
        "range": [
          16468,
          16594
        ],
        "filename": "lodash.js",
        "lineno": 395,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001443",
          "name": "stringEscapes",
          "type": "ObjectExpression",
          "value": "{\"undefined\":\"u2029\"}"
        }
      },
      "description": "Used to escape characters for inclusion in compiled string literals.",
      "name": "stringEscapes",
      "longname": "<anonymous>~stringEscapes",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000404",
      "___s": true
    },
    {
      "comment": "/** Built-in method references without a dependency on `root`. */",
      "meta": {
        "range": [
          16671,
          16698
        ],
        "filename": "lodash.js",
        "lineno": 405,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001459",
          "name": "freeParseFloat",
          "type": "Identifier",
          "value": "parseFloat"
        }
      },
      "description": "Built-in method references without a dependency on `root`.",
      "name": "freeParseFloat",
      "longname": "<anonymous>~freeParseFloat",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000411",
      "___s": true
    },
    {
      "comment": "/** Detect free variable `global` from Node.js. */",
      "meta": {
        "range": [
          16791,
          16877
        ],
        "filename": "lodash.js",
        "lineno": 409,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001466",
          "name": "freeGlobal",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Detect free variable `global` from Node.js.",
      "name": "freeGlobal",
      "longname": "<anonymous>~freeGlobal",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000413",
      "___s": true
    },
    {
      "comment": "/** Detect free variable `self`. */",
      "meta": {
        "range": [
          16924,
          17000
        ],
        "filename": "lodash.js",
        "lineno": 412,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001483",
          "name": "freeSelf",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Detect free variable `self`.",
      "name": "freeSelf",
      "longname": "<anonymous>~freeSelf",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000414",
      "___s": true
    },
    {
      "comment": "/** Used as a reference to the global object. */",
      "meta": {
        "range": [
          17060,
          17118
        ],
        "filename": "lodash.js",
        "lineno": 415,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001500",
          "name": "root",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Used as a reference to the global object.",
      "name": "root",
      "longname": "<anonymous>~root",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000415",
      "___s": true
    },
    {
      "comment": "/** Detect free variable `exports`. */",
      "meta": {
        "range": [
          17168,
          17251
        ],
        "filename": "lodash.js",
        "lineno": 418,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001511",
          "name": "freeExports",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Detect free variable `exports`.",
      "name": "freeExports",
      "longname": "<anonymous>~freeExports",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000416",
      "___s": true
    },
    {
      "comment": "/** Detect free variable `module`. */",
      "meta": {
        "range": [
          17300,
          17393
        ],
        "filename": "lodash.js",
        "lineno": 421,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001527",
          "name": "freeModule",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Detect free variable `module`.",
      "name": "freeModule",
      "longname": "<anonymous>~freeModule",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000417",
      "___s": true
    },
    {
      "comment": "/** Detect the popular CommonJS extension `module.exports`. */",
      "meta": {
        "range": [
          17467,
          17531
        ],
        "filename": "lodash.js",
        "lineno": 424,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001545",
          "name": "moduleExports",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Detect the popular CommonJS extension `module.exports`.",
      "name": "moduleExports",
      "longname": "<anonymous>~moduleExports",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000418",
      "___s": true
    },
    {
      "comment": "/** Detect free variable `process` from Node.js. */",
      "meta": {
        "range": [
          17594,
          17643
        ],
        "filename": "lodash.js",
        "lineno": 427,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001555",
          "name": "freeProcess",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Detect free variable `process` from Node.js.",
      "name": "freeProcess",
      "longname": "<anonymous>~freeProcess",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000419",
      "___s": true
    },
    {
      "comment": "/** Used to access faster Node.js helpers. */",
      "meta": {
        "range": [
          17700,
          17817
        ],
        "filename": "lodash.js",
        "lineno": 430,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001563",
          "name": "nodeUtil",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to access faster Node.js helpers.",
      "name": "nodeUtil",
      "longname": "<anonymous>~nodeUtil",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000420",
      "___s": true
    },
    {
      "comment": "/**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */",
      "meta": {
        "range": [
          18460,
          18611
        ],
        "filename": "lodash.js",
        "lineno": 454,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001622",
          "name": "addMapEntry",
          "type": "FunctionDeclaration",
          "paramnames": [
            "map",
            "pair"
          ]
        }
      },
      "description": "Adds the key-value `pair` to `map`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The map to modify.",
          "name": "map"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The key-value pair to add.",
          "name": "pair"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `map`."
        }
      ],
      "name": "addMapEntry",
      "longname": "<anonymous>~addMapEntry",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000427",
      "___s": true
    },
    {
      "comment": "/**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */",
      "meta": {
        "range": [
          18796,
          18937
        ],
        "filename": "lodash.js",
        "lineno": 468,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001640",
          "name": "addSetEntry",
          "type": "FunctionDeclaration",
          "paramnames": [
            "set",
            "value"
          ]
        }
      },
      "description": "Adds `value` to `set`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The set to modify.",
          "name": "set"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to add.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `set`."
        }
      ],
      "name": "addSetEntry",
      "longname": "<anonymous>~addSetEntry",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000428",
      "___s": true
    },
    {
      "comment": "/**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */",
      "meta": {
        "range": [
          19335,
          19665
        ],
        "filename": "lodash.js",
        "lineno": 484,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001653",
          "name": "apply",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "thisArg",
            "args"
          ]
        }
      },
      "description": "A faster alternative to `Function#apply`, this function invokes `func`\nwith the `this` binding of `thisArg` and the arguments of `args`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to invoke.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The `this` binding of `func`.",
          "name": "thisArg"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arguments to invoke `func` with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the result of `func`."
        }
      ],
      "name": "apply",
      "longname": "<anonymous>~apply",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000429",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */",
      "meta": {
        "range": [
          20062,
          20345
        ],
        "filename": "lodash.js",
        "lineno": 504,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001720",
          "name": "arrayAggregator",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "setter",
            "iteratee",
            "accumulator"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayAggregator~index",
          "length": "<anonymous>~arrayAggregator~length",
          "value": "<anonymous>~arrayAggregator~value"
        }
      },
      "description": "A specialized version of `baseAggregator` for arrays.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to set `accumulator` values.",
          "name": "setter"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The iteratee to transform keys.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The initial aggregated object.",
          "name": "accumulator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `accumulator`."
        }
      ],
      "name": "arrayAggregator",
      "longname": "<anonymous>~arrayAggregator",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000430",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */",
      "meta": {
        "range": [
          20641,
          20884
        ],
        "filename": "lodash.js",
        "lineno": 524,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001763",
          "name": "arrayEach",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayEach~index",
          "length": "<anonymous>~arrayEach~length"
        }
      },
      "description": "A specialized version of `_.forEach` for arrays without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "arrayEach",
      "longname": "<anonymous>~arrayEach",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000434",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */",
      "meta": {
        "range": [
          21185,
          21407
        ],
        "filename": "lodash.js",
        "lineno": 545,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001801",
          "name": "arrayEachRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        },
        "vars": {
          "length": "<anonymous>~arrayEachRight~length"
        }
      },
      "description": "A specialized version of `_.forEachRight` for arrays without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "arrayEachRight",
      "longname": "<anonymous>~arrayEachRight",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000437",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */",
      "meta": {
        "range": [
          21764,
          22007
        ],
        "filename": "lodash.js",
        "lineno": 566,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001833",
          "name": "arrayEvery",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayEvery~index",
          "length": "<anonymous>~arrayEvery~length"
        }
      },
      "description": "A specialized version of `_.every` for arrays without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if all elements pass the predicate check,\n else `false`."
        }
      ],
      "name": "arrayEvery",
      "longname": "<anonymous>~arrayEvery",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000439",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */",
      "meta": {
        "range": [
          22318,
          22645
        ],
        "filename": "lodash.js",
        "lineno": 587,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001871",
          "name": "arrayFilter",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayFilter~index",
          "length": "<anonymous>~arrayFilter~length",
          "resIndex": "<anonymous>~arrayFilter~resIndex",
          "result": "<anonymous>~arrayFilter~result",
          "value": "<anonymous>~arrayFilter~value",
          "result[undefined]": "<anonymous>~arrayFilter~result.undefined]"
        }
      },
      "description": "A specialized version of `_.filter` for arrays without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new filtered array."
        }
      ],
      "name": "arrayFilter",
      "longname": "<anonymous>~arrayFilter",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000442",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */",
      "meta": {
        "range": [
          22968,
          23111
        ],
        "filename": "lodash.js",
        "lineno": 611,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001923",
          "name": "arrayIncludes",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value"
          ]
        },
        "vars": {
          "length": "<anonymous>~arrayIncludes~length"
        }
      },
      "description": "A specialized version of `_.includes` for arrays without support for\nspecifying an index to search from.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "target"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `target` is found, else `false`."
        }
      ],
      "name": "arrayIncludes",
      "longname": "<anonymous>~arrayIncludes",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000449",
      "___s": true
    },
    {
      "comment": "/**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */",
      "meta": {
        "range": [
          23469,
          23720
        ],
        "filename": "lodash.js",
        "lineno": 625,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001950",
          "name": "arrayIncludesWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "comparator"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayIncludesWith~index",
          "length": "<anonymous>~arrayIncludesWith~length"
        }
      },
      "description": "This function is like `arrayIncludes` except that it accepts a comparator.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "target"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `target` is found, else `false`."
        }
      ],
      "name": "arrayIncludesWith",
      "longname": "<anonymous>~arrayIncludesWith",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000451",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */",
      "meta": {
        "range": [
          24025,
          24277
        ],
        "filename": "lodash.js",
        "lineno": 646,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100001987",
          "name": "arrayMap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayMap~index",
          "length": "<anonymous>~arrayMap~length",
          "result": "<anonymous>~arrayMap~result",
          "result[undefined]": "<anonymous>~arrayMap~result.undefined]"
        }
      },
      "description": "A specialized version of `_.map` for arrays without support for iteratee\nshorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new mapped array."
        }
      ],
      "name": "arrayMap",
      "longname": "<anonymous>~arrayMap",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000454",
      "___s": true
    },
    {
      "comment": "/**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */",
      "meta": {
        "range": [
          24497,
          24720
        ],
        "filename": "lodash.js",
        "lineno": 665,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002030",
          "name": "arrayPush",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "values"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayPush~index",
          "length": "<anonymous>~arrayPush~length",
          "offset": "<anonymous>~arrayPush~offset",
          "array[undefined]": null
        }
      },
      "description": "Appends the elements of `values` to `array`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The values to append.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "arrayPush",
      "longname": "<anonymous>~arrayPush",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000459",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */",
      "meta": {
        "range": [
          25179,
          25515
        ],
        "filename": "lodash.js",
        "lineno": 688,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002068",
          "name": "arrayReduce",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee",
            "accumulator",
            "initAccum"
          ]
        },
        "vars": {
          "index": "<anonymous>~arrayReduce~index",
          "length": "<anonymous>~arrayReduce~length",
          "accumulator": "<anonymous>~arrayReduce~accumulator"
        }
      },
      "description": "A specialized version of `_.reduce` for arrays without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The initial value.",
          "name": "accumulator"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify using the first element of `array` as\n the initial value.",
          "name": "initAccum"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the accumulated value."
        }
      ],
      "name": "arrayReduce",
      "longname": "<anonymous>~arrayReduce",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000464",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */",
      "meta": {
        "range": [
          25978,
          26293
        ],
        "filename": "lodash.js",
        "lineno": 713,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002119",
          "name": "arrayReduceRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee",
            "accumulator",
            "initAccum"
          ]
        },
        "vars": {
          "length": "<anonymous>~arrayReduceRight~length",
          "accumulator": "<anonymous>~arrayReduceRight~accumulator"
        }
      },
      "description": "A specialized version of `_.reduceRight` for arrays without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The initial value.",
          "name": "accumulator"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify using the last element of `array` as\n the initial value.",
          "name": "initAccum"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the accumulated value."
        }
      ],
      "name": "arrayReduceRight",
      "longname": "<anonymous>~arrayReduceRight",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000469",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */",
      "meta": {
        "range": [
          26650,
          26891
        ],
        "filename": "lodash.js",
        "lineno": 734,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002164",
          "name": "arraySome",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        },
        "vars": {
          "index": "<anonymous>~arraySome~index",
          "length": "<anonymous>~arraySome~length"
        }
      },
      "description": "A specialized version of `_.some` for arrays without support for iteratee\nshorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if any element passes the predicate check,\n else `false`."
        }
      ],
      "name": "arraySome",
      "longname": "<anonymous>~arraySome",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000473",
      "___s": true
    },
    {
      "comment": "/**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */",
      "meta": {
        "range": [
          27067,
          27101
        ],
        "filename": "lodash.js",
        "lineno": 753,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002202",
          "name": "asciiSize",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Gets the size of an ASCII `string`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string inspect.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the string size."
        }
      ],
      "name": "asciiSize",
      "longname": "<anonymous>~asciiSize",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000476",
      "___s": true
    },
    {
      "comment": "/**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */",
      "meta": {
        "range": [
          27284,
          27348
        ],
        "filename": "lodash.js",
        "lineno": 762,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002207",
          "name": "asciiToArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Converts an ASCII `string` to an array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the converted array."
        }
      ],
      "name": "asciiToArray",
      "longname": "<anonymous>~asciiToArray",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000477",
      "___s": true
    },
    {
      "comment": "/**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */",
      "meta": {
        "range": [
          27538,
          27615
        ],
        "filename": "lodash.js",
        "lineno": 773,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002217",
          "name": "asciiWords",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Splits an ASCII `string` into an array of its words.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "string to inspect.",
          "name": "The"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the words of `string`."
        }
      ],
      "name": "asciiWords",
      "longname": "<anonymous>~asciiWords",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000478",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */",
      "meta": {
        "range": [
          28113,
          28374
        ],
        "filename": "lodash.js",
        "lineno": 788,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002229",
          "name": "baseFindKey",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate",
            "eachFunc"
          ]
        },
        "vars": {
          "result": "<anonymous>~baseFindKey~result",
          "": null
        }
      },
      "description": "The base implementation of methods like `_.findKey` and `_.findLastKey`,\nwithout support for iteratee shorthands, which iterates over `collection`\nusing `eachFunc`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to inspect.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to iterate over `collection`.",
          "name": "eachFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the found element or its key, else `undefined`."
        }
      ],
      "name": "baseFindKey",
      "longname": "<anonymous>~baseFindKey",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000479",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */",
      "meta": {
        "range": [
          28843,
          29150
        ],
        "filename": "lodash.js",
        "lineno": 810,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002262",
          "name": "baseFindIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate",
            "fromIndex",
            "fromRight"
          ]
        },
        "vars": {
          "length": "<anonymous>~baseFindIndex~length",
          "index": "<anonymous>~baseFindIndex~index"
        }
      },
      "description": "The base implementation of `_.findIndex` and `_.findLastIndex` without\nsupport for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index to search from.",
          "name": "fromIndex"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify iterating from right to left.",
          "name": "fromRight"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "name": "baseFindIndex",
      "longname": "<anonymous>~baseFindIndex",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000482",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */",
      "meta": {
        "range": [
          29490,
          29667
        ],
        "filename": "lodash.js",
        "lineno": 831,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002308",
          "name": "baseIndexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "fromIndex"
          ]
        }
      },
      "description": "The base implementation of `_.indexOf` without `fromIndex` bounds checks.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "name": "baseIndexOf",
      "longname": "<anonymous>~baseIndexOf",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000485",
      "___s": true
    },
    {
      "comment": "/**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */",
      "meta": {
        "range": [
          30076,
          30333
        ],
        "filename": "lodash.js",
        "lineno": 847,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002329",
          "name": "baseIndexOfWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "fromIndex",
            "comparator"
          ]
        },
        "vars": {
          "index": "<anonymous>~baseIndexOfWith~index",
          "length": "<anonymous>~baseIndexOfWith~length"
        }
      },
      "description": "This function is like `baseIndexOf` except that it accepts a comparator.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index to search from.",
          "name": "fromIndex"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "name": "baseIndexOfWith",
      "longname": "<anonymous>~baseIndexOfWith",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000486",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */",
      "meta": {
        "range": [
          30562,
          30621
        ],
        "filename": "lodash.js",
        "lineno": 866,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002366",
          "name": "baseIsNaN",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isNaN` without support for number objects.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is `NaN`, else `false`."
        }
      ],
      "name": "baseIsNaN",
      "longname": "<anonymous>~baseIsNaN",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000489",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */",
      "meta": {
        "range": [
          30920,
          31066
        ],
        "filename": "lodash.js",
        "lineno": 879,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002374",
          "name": "baseMean",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        },
        "vars": {
          "length": "<anonymous>~baseMean~length"
        }
      },
      "description": "The base implementation of `_.mean` and `_.meanBy` without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the mean."
        }
      ],
      "name": "baseMean",
      "longname": "<anonymous>~baseMean",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000490",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */",
      "meta": {
        "range": [
          31295,
          31419
        ],
        "filename": "lodash.js",
        "lineno": 891,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002398",
          "name": "baseProperty",
          "type": "FunctionDeclaration",
          "paramnames": [
            "key"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.property` without support for deep paths.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to get.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new accessor function."
        }
      ],
      "name": "baseProperty",
      "longname": "<anonymous>~baseProperty",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000492",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */",
      "meta": {
        "range": [
          31642,
          31768
        ],
        "filename": "lodash.js",
        "lineno": 904,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002415",
          "name": "basePropertyOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.propertyOf` without support for deep paths.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new accessor function."
        }
      ],
      "name": "basePropertyOf",
      "longname": "<anonymous>~basePropertyOf",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000493",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */",
      "meta": {
        "range": [
          32389,
          32690
        ],
        "filename": "lodash.js",
        "lineno": 923,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002432",
          "name": "baseReduce",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee",
            "accumulator",
            "initAccum",
            "eachFunc"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.reduce` and `_.reduceRight`, without support\nfor iteratee shorthands, which iterates over `collection` using `eachFunc`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The initial value.",
          "name": "accumulator"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Specify using the first or last element of\n `collection` as the initial value.",
          "name": "initAccum"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to iterate over `collection`.",
          "name": "eachFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the accumulated value."
        }
      ],
      "name": "baseReduce",
      "longname": "<anonymous>~baseReduce",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000494",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */",
      "meta": {
        "range": [
          33050,
          33240
        ],
        "filename": "lodash.js",
        "lineno": 942,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002467",
          "name": "baseSortBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "comparer"
          ]
        },
        "vars": {
          "length": "<anonymous>~baseSortBy~length",
          "array[undefined]": null
        }
      },
      "description": "The base implementation of `_.sortBy` which uses `comparer` to define the\nsort order of `array` and replaces criteria objects with their corresponding\nvalues.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to sort.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to define sort order.",
          "name": "comparer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "baseSortBy",
      "longname": "<anonymous>~baseSortBy",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000497",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */",
      "meta": {
        "range": [
          33536,
          33856
        ],
        "filename": "lodash.js",
        "lineno": 961,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002500",
          "name": "baseSum",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        },
        "vars": {
          "result": "<anonymous>~baseSum~result",
          "index": "<anonymous>~baseSum~index",
          "length": "<anonymous>~baseSum~length",
          "current": "<anonymous>~baseSum~current"
        }
      },
      "description": "The base implementation of `_.sum` and `_.sumBy` without support for\niteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the sum."
        }
      ],
      "name": "baseSum",
      "longname": "<anonymous>~baseSum",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000500",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */",
      "meta": {
        "range": [
          34191,
          34366
        ],
        "filename": "lodash.js",
        "lineno": 984,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002549",
          "name": "baseTimes",
          "type": "FunctionDeclaration",
          "paramnames": [
            "n",
            "iteratee"
          ]
        },
        "vars": {
          "index": "<anonymous>~baseTimes~index",
          "result": "<anonymous>~baseTimes~result",
          "result[undefined]": "<anonymous>~baseTimes~result.undefined]"
        }
      },
      "description": "The base implementation of `_.times` without support for iteratee shorthands\nor max array length checks.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of times to invoke `iteratee`.",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of results."
        }
      ],
      "name": "baseTimes",
      "longname": "<anonymous>~baseTimes",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000506",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */",
      "meta": {
        "range": [
          34736,
          34861
        ],
        "filename": "lodash.js",
        "lineno": 1003,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002580",
          "name": "baseToPairs",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "props"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\nof key-value pairs for `object` corresponding to the property names of `props`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The property names to get values for.",
          "name": "props"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the key-value pairs."
        }
      ],
      "name": "baseToPairs",
      "longname": "<anonymous>~baseToPairs",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000510",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */",
      "meta": {
        "range": [
          35097,
          35189
        ],
        "filename": "lodash.js",
        "lineno": 1016,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002598",
          "name": "baseUnary",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.unary` without support for storing metadata.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to cap arguments for.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new capped function."
        }
      ],
      "name": "baseUnary",
      "longname": "<anonymous>~baseUnary",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000511",
      "___s": true
    },
    {
      "comment": "/**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */",
      "meta": {
        "range": [
          35567,
          35684
        ],
        "filename": "lodash.js",
        "lineno": 1032,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002610",
          "name": "baseValues",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "props"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.values` and `_.valuesIn` which creates an\narray of `object` property values corresponding to the property names\nof `props`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The property names to get values for.",
          "name": "props"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the array of property values."
        }
      ],
      "name": "baseValues",
      "longname": "<anonymous>~baseValues",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000512",
      "___s": true
    },
    {
      "comment": "/**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */",
      "meta": {
        "range": [
          35954,
          36016
        ],
        "filename": "lodash.js",
        "lineno": 1046,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002626",
          "name": "cacheHas",
          "type": "FunctionDeclaration",
          "paramnames": [
            "cache",
            "key"
          ]
        }
      },
      "description": "Checks if a `cache` value for `key` exists.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The cache to query.",
          "name": "cache"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the entry to check.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if an entry for `key` exists, else `false`."
        }
      ],
      "name": "cacheHas",
      "longname": "<anonymous>~cacheHas",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000513",
      "___s": true
    },
    {
      "comment": "/**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */",
      "meta": {
        "range": [
          36387,
          36602
        ],
        "filename": "lodash.js",
        "lineno": 1059,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002637",
          "name": "charsStartIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "strSymbols",
            "chrSymbols"
          ]
        },
        "vars": {
          "index": "<anonymous>~charsStartIndex~index",
          "length": "<anonymous>~charsStartIndex~length"
        }
      },
      "description": "Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\nthat is not found in the character symbols.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The string symbols to inspect.",
          "name": "strSymbols"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The character symbols to find.",
          "name": "chrSymbols"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the first unmatched string symbol."
        }
      ],
      "name": "charsStartIndex",
      "longname": "<anonymous>~charsStartIndex",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000514",
      "___s": true
    },
    {
      "comment": "/**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */",
      "meta": {
        "range": [
          36969,
          37152
        ],
        "filename": "lodash.js",
        "lineno": 1076,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002671",
          "name": "charsEndIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "strSymbols",
            "chrSymbols"
          ]
        },
        "vars": {
          "index": "<anonymous>~charsEndIndex~index"
        }
      },
      "description": "Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\nthat is not found in the character symbols.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The string symbols to inspect.",
          "name": "strSymbols"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The character symbols to find.",
          "name": "chrSymbols"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the last unmatched string symbol."
        }
      ],
      "name": "charsEndIndex",
      "longname": "<anonymous>~charsEndIndex",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000517",
      "___s": true
    },
    {
      "comment": "/**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */",
      "meta": {
        "range": [
          37410,
          37626
        ],
        "filename": "lodash.js",
        "lineno": 1091,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002699",
          "name": "countHolders",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "placeholder"
          ]
        },
        "vars": {
          "length": "<anonymous>~countHolders~length",
          "result": "<anonymous>~countHolders~result"
        }
      },
      "description": "Gets the number of `placeholder` occurrences in `array`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The placeholder to search for.",
          "name": "placeholder"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the placeholder count."
        }
      ],
      "name": "countHolders",
      "longname": "<anonymous>~countHolders",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000519",
      "___s": true
    },
    {
      "comment": "/**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */",
      "meta": {
        "range": [
          37887,
          37933
        ],
        "filename": "lodash.js",
        "lineno": 1111,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002730",
          "name": "deburrLetter",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\nletters to basic Latin letters.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The matched letter to deburr.",
          "name": "letter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the deburred letter."
        }
      ],
      "name": "deburrLetter",
      "longname": "<anonymous>~deburrLetter",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000522",
      "___s": true
    },
    {
      "comment": "/**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */",
      "meta": {
        "range": [
          38149,
          38193
        ],
        "filename": "lodash.js",
        "lineno": 1120,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002736",
          "name": "escapeHtmlChar",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used by `_.escape` to convert characters to HTML entities.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The matched character to escape.",
          "name": "chr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the escaped character."
        }
      ],
      "name": "escapeHtmlChar",
      "longname": "<anonymous>~escapeHtmlChar",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000523",
      "___s": true
    },
    {
      "comment": "/**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */",
      "meta": {
        "range": [
          38431,
          38505
        ],
        "filename": "lodash.js",
        "lineno": 1129,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002741",
          "name": "escapeStringChar",
          "type": "FunctionDeclaration",
          "paramnames": [
            "chr"
          ]
        }
      },
      "description": "Used by `_.template` to escape characters for inclusion in compiled string literals.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The matched character to escape.",
          "name": "chr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the escaped character."
        }
      ],
      "name": "escapeStringChar",
      "longname": "<anonymous>~escapeStringChar",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000524",
      "___s": true
    },
    {
      "comment": "/**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */",
      "meta": {
        "range": [
          38736,
          38825
        ],
        "filename": "lodash.js",
        "lineno": 1141,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002751",
          "name": "getValue",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "key"
          ]
        }
      },
      "description": "Gets the value at `key` of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to get.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the property value."
        }
      ],
      "name": "getValue",
      "longname": "<anonymous>~getValue",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000525",
      "___s": true
    },
    {
      "comment": "/**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */",
      "meta": {
        "range": [
          39036,
          39107
        ],
        "filename": "lodash.js",
        "lineno": 1152,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002765",
          "name": "hasUnicode",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Checks if `string` contains Unicode symbols.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to inspect.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if a symbol is found, else `false`."
        }
      ],
      "name": "hasUnicode",
      "longname": "<anonymous>~hasUnicode",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000526",
      "___s": true
    },
    {
      "comment": "/**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */",
      "meta": {
        "range": [
          39335,
          39414
        ],
        "filename": "lodash.js",
        "lineno": 1163,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002775",
          "name": "hasUnicodeWord",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Checks if `string` contains a word composed of Unicode symbols.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to inspect.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if a word is found, else `false`."
        }
      ],
      "name": "hasUnicodeWord",
      "longname": "<anonymous>~hasUnicodeWord",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000527",
      "___s": true
    },
    {
      "comment": "/**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */",
      "meta": {
        "range": [
          39593,
          39770
        ],
        "filename": "lodash.js",
        "lineno": 1174,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002785",
          "name": "iteratorToArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "iterator"
          ]
        },
        "vars": {
          "data": "<anonymous>~iteratorToArray~data",
          "result": "<anonymous>~iteratorToArray~result"
        }
      },
      "description": "Converts `iterator` to an array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The iterator to convert.",
          "name": "iterator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the converted array."
        }
      ],
      "name": "iteratorToArray",
      "longname": "<anonymous>~iteratorToArray",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000528",
      "___s": true
    },
    {
      "comment": "/**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */",
      "meta": {
        "range": [
          39945,
          40134
        ],
        "filename": "lodash.js",
        "lineno": 1191,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002816",
          "name": "mapToArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "map"
          ]
        },
        "vars": {
          "index": "<anonymous>~mapToArray~index",
          "result": "<anonymous>~mapToArray~result",
          "": null
        }
      },
      "description": "Converts `map` to its key-value pairs.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The map to convert.",
          "name": "map"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the key-value pairs."
        }
      ],
      "name": "mapToArray",
      "longname": "<anonymous>~mapToArray",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000532",
      "___s": true
    },
    {
      "comment": "/**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */",
      "meta": {
        "range": [
          40408,
          40516
        ],
        "filename": "lodash.js",
        "lineno": 1209,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002852",
          "name": "overArg",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "transform"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a unary function that invokes `func` with its argument transformed.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The argument transform.",
          "name": "transform"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "name": "overArg",
      "longname": "<anonymous>~overArg",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000536",
      "___s": true
    },
    {
      "comment": "/**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */",
      "meta": {
        "range": [
          40847,
          41219
        ],
        "filename": "lodash.js",
        "lineno": 1224,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002867",
          "name": "replaceHolders",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "placeholder"
          ]
        },
        "vars": {
          "index": "<anonymous>~replaceHolders~index",
          "length": "<anonymous>~replaceHolders~length",
          "resIndex": "<anonymous>~replaceHolders~resIndex",
          "result": "<anonymous>~replaceHolders~result",
          "value": "<anonymous>~replaceHolders~value",
          "array[undefined]": null,
          "result[undefined]": "<anonymous>~replaceHolders~result.undefined]"
        }
      },
      "description": "Replaces all `placeholder` elements in `array` with an internal placeholder\nand returns an array of their indexes.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The placeholder to replace.",
          "name": "placeholder"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of placeholder indexes."
        }
      ],
      "name": "replaceHolders",
      "longname": "<anonymous>~replaceHolders",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000537",
      "___s": true
    },
    {
      "comment": "/**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */",
      "meta": {
        "range": [
          41388,
          41565
        ],
        "filename": "lodash.js",
        "lineno": 1247,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002924",
          "name": "setToArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "set"
          ]
        },
        "vars": {
          "index": "<anonymous>~setToArray~index",
          "result": "<anonymous>~setToArray~result",
          "": null
        }
      },
      "description": "Converts `set` to an array of its values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The set to convert.",
          "name": "set"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the values."
        }
      ],
      "name": "setToArray",
      "longname": "<anonymous>~setToArray",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000545",
      "___s": true
    },
    {
      "comment": "/**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */",
      "meta": {
        "range": [
          41744,
          41930
        ],
        "filename": "lodash.js",
        "lineno": 1264,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002957",
          "name": "setToPairs",
          "type": "FunctionDeclaration",
          "paramnames": [
            "set"
          ]
        },
        "vars": {
          "index": "<anonymous>~setToPairs~index",
          "result": "<anonymous>~setToPairs~result",
          "": null
        }
      },
      "description": "Converts `set` to its value-value pairs.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The set to convert.",
          "name": "set"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the value-value pairs."
        }
      ],
      "name": "setToPairs",
      "longname": "<anonymous>~setToPairs",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000549",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */",
      "meta": {
        "range": [
          42304,
          42538
        ],
        "filename": "lodash.js",
        "lineno": 1284,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100002992",
          "name": "strictIndexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "fromIndex"
          ]
        },
        "vars": {
          "index": "<anonymous>~strictIndexOf~index",
          "length": "<anonymous>~strictIndexOf~length"
        }
      },
      "description": "A specialized version of `_.indexOf` which performs strict equality\ncomparisons of values, i.e. `===`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "name": "strictIndexOf",
      "longname": "<anonymous>~strictIndexOf",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000553",
      "___s": true
    },
    {
      "comment": "/**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */",
      "meta": {
        "range": [
          42916,
          43116
        ],
        "filename": "lodash.js",
        "lineno": 1306,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003027",
          "name": "strictLastIndexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "fromIndex"
          ]
        },
        "vars": {
          "index": "<anonymous>~strictLastIndexOf~index"
        }
      },
      "description": "A specialized version of `_.lastIndexOf` which performs strict equality\ncomparisons of values, i.e. `===`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "name": "strictLastIndexOf",
      "longname": "<anonymous>~strictLastIndexOf",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000556",
      "___s": true
    },
    {
      "comment": "/**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */",
      "meta": {
        "range": [
          43295,
          43413
        ],
        "filename": "lodash.js",
        "lineno": 1323,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003054",
          "name": "stringSize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Gets the number of symbols in `string`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to inspect.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the string size."
        }
      ],
      "name": "stringSize",
      "longname": "<anonymous>~stringSize",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000558",
      "___s": true
    },
    {
      "comment": "/**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */",
      "meta": {
        "range": [
          43586,
          43713
        ],
        "filename": "lodash.js",
        "lineno": 1336,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003069",
          "name": "stringToArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Converts `string` to an array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the converted array."
        }
      ],
      "name": "stringToArray",
      "longname": "<anonymous>~stringToArray",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000559",
      "___s": true
    },
    {
      "comment": "/**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */",
      "meta": {
        "range": [
          43934,
          43982
        ],
        "filename": "lodash.js",
        "lineno": 1349,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003085",
          "name": "unescapeHtmlChar",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used by `_.unescape` to convert HTML entities to characters.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The matched character to unescape.",
          "name": "chr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the unescaped character."
        }
      ],
      "name": "unescapeHtmlChar",
      "longname": "<anonymous>~unescapeHtmlChar",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000560",
      "___s": true
    },
    {
      "comment": "/**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */",
      "meta": {
        "range": [
          44156,
          44310
        ],
        "filename": "lodash.js",
        "lineno": 1358,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003090",
          "name": "unicodeSize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        },
        "vars": {
          "result": "<anonymous>~unicodeSize~result",
          "reUnicode.lastIndex": "<anonymous>~reUnicode.lastIndex"
        }
      },
      "description": "Gets the size of a Unicode `string`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string inspect.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the string size."
        }
      ],
      "name": "unicodeSize",
      "longname": "<anonymous>~unicodeSize",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000561",
      "___s": true
    },
    {
      "comment": "/**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */",
      "meta": {
        "range": [
          44493,
          44572
        ],
        "filename": "lodash.js",
        "lineno": 1373,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003114",
          "name": "unicodeToArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Converts a Unicode `string` to an array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the converted array."
        }
      ],
      "name": "unicodeToArray",
      "longname": "<anonymous>~unicodeToArray",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000564",
      "___s": true
    },
    {
      "comment": "/**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */",
      "meta": {
        "range": [
          44763,
          44844
        ],
        "filename": "lodash.js",
        "lineno": 1384,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003126",
          "name": "unicodeWords",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Splits a Unicode `string` into an array of its words.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "string to inspect.",
          "name": "The"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the words of `string`."
        }
      ],
      "name": "unicodeWords",
      "longname": "<anonymous>~unicodeWords",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000565",
      "___s": true
    },
    {
      "comment": "/**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */",
      "meta": {
        "range": [
          45686,
          535219
        ],
        "filename": "lodash.js",
        "lineno": 1419,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003139",
          "name": "runInContext",
          "type": "FunctionExpression",
          "value": "runInContext"
        },
        "vars": {
          "context": "_.runInContext~context",
          "Array": "_.runInContext~Array",
          "Date": "_.runInContext~Date",
          "Error": "_.runInContext~Error",
          "Function": "_.runInContext~Function",
          "Math": "_.runInContext~Math",
          "Object": "_.runInContext~Object",
          "RegExp": "_.runInContext~RegExp",
          "String": "_.runInContext~String",
          "TypeError": "_.runInContext~TypeError",
          "arrayProto": "_.runInContext~arrayProto",
          "funcProto": "_.runInContext~funcProto",
          "objectProto": "_.runInContext~objectProto",
          "coreJsData": "_.runInContext~coreJsData",
          "funcToString": "_.runInContext~funcToString",
          "hasOwnProperty": "_.runInContext~hasOwnProperty",
          "idCounter": "_.runInContext~idCounter",
          "maskSrcKey": "_.runInContext~maskSrcKey",
          "": null,
          "nativeObjectToString": "_.runInContext~nativeObjectToString",
          "objectCtorString": "_.runInContext~objectCtorString",
          "oldDash": "_.runInContext~oldDash",
          "reIsNative": "_.runInContext~reIsNative",
          "Buffer": "_.runInContext~Buffer",
          "Symbol": "_.runInContext~Symbol",
          "Uint8Array": "_.runInContext~Uint8Array",
          "allocUnsafe": "_.runInContext~allocUnsafe",
          "getPrototype": "_.runInContext~getPrototype",
          "objectCreate": "_.runInContext~objectCreate",
          "propertyIsEnumerable": "_.runInContext~propertyIsEnumerable",
          "splice": "_.runInContext~splice",
          "spreadableSymbol": "_.runInContext~spreadableSymbol",
          "symIterator": "_.runInContext~symIterator",
          "symToStringTag": "_.runInContext~symToStringTag",
          "defineProperty": "_.runInContext~defineProperty",
          "ctxClearTimeout": "_.runInContext~ctxClearTimeout",
          "ctxNow": "_.runInContext~ctxNow",
          "ctxSetTimeout": "_.runInContext~ctxSetTimeout",
          "nativeCeil": "_.runInContext~nativeCeil",
          "nativeFloor": "_.runInContext~nativeFloor",
          "nativeGetSymbols": "_.runInContext~nativeGetSymbols",
          "nativeIsBuffer": "_.runInContext~nativeIsBuffer",
          "nativeIsFinite": "_.runInContext~nativeIsFinite",
          "nativeJoin": "_.runInContext~nativeJoin",
          "nativeKeys": "_.runInContext~nativeKeys",
          "nativeMax": "_.runInContext~nativeMax",
          "nativeMin": "_.runInContext~nativeMin",
          "nativeNow": "_.runInContext~nativeNow",
          "nativeParseInt": "_.runInContext~nativeParseInt",
          "nativeRandom": "_.runInContext~nativeRandom",
          "nativeReverse": "_.runInContext~nativeReverse",
          "DataView": "_.runInContext~DataView",
          "Map": "_.runInContext~Map",
          "Promise": "_.runInContext~Promise",
          "Set": "_.runInContext~Set",
          "WeakMap": "_.runInContext~WeakMap",
          "nativeCreate": "_.runInContext~nativeCreate",
          "metaMap": "_.runInContext~metaMap",
          "realNames": "_.runInContext~realNames",
          "dataViewCtorString": "_.runInContext~dataViewCtorString",
          "mapCtorString": "_.runInContext~mapCtorString",
          "promiseCtorString": "_.runInContext~promiseCtorString",
          "setCtorString": "_.runInContext~setCtorString",
          "weakMapCtorString": "_.runInContext~weakMapCtorString",
          "symbolProto": "_.runInContext~symbolProto",
          "symbolValueOf": "_.runInContext~symbolValueOf",
          "symbolToString": "_.runInContext~symbolToString",
          "lodash": "_.runInContext~lodash",
          "baseCreate": "_.runInContext~baseCreate",
          "baseLodash": "_.runInContext~baseLodash",
          "LodashWrapper": "_.runInContext~LodashWrapper",
          "lodash.templateSettings": "_.lodash.templateSettings",
          "lodash.prototype": "_.runInContext~lodash.prototype",
          "lodash.prototype.constructor": "_.runInContext~lodash#constructor",
          "LodashWrapper.prototype": "_.runInContext~LodashWrapper.prototype",
          "LodashWrapper.prototype.constructor": "_.runInContext~LodashWrapper#constructor",
          "LazyWrapper": "_.runInContext~LazyWrapper",
          "lazyClone": "_.runInContext~lazyClone",
          "lazyReverse": "_.runInContext~lazyReverse",
          "lazyValue": "_.runInContext~lazyValue",
          "LazyWrapper.prototype": "_.runInContext~LazyWrapper.prototype",
          "LazyWrapper.prototype.constructor": "_.runInContext~LazyWrapper#constructor",
          "Hash": "_.runInContext~Hash",
          "hashClear": "_.runInContext~hashClear",
          "hashDelete": "_.runInContext~hashDelete",
          "hashGet": "_.runInContext~hashGet",
          "hashHas": "_.runInContext~hashHas",
          "hashSet": "_.runInContext~hashSet",
          "Hash.prototype.clear": "_.runInContext~Hash#clear",
          "Hash.prototype['delete']": "_.runInContext~Hash#['delete']",
          "Hash.prototype.get": "_.runInContext~Hash#get",
          "Hash.prototype.has": "_.runInContext~Hash#has",
          "Hash.prototype.set": "_.runInContext~Hash#set",
          "ListCache": "_.runInContext~ListCache",
          "listCacheClear": "_.runInContext~listCacheClear",
          "listCacheDelete": "_.runInContext~listCacheDelete",
          "listCacheGet": "_.runInContext~listCacheGet",
          "listCacheHas": "_.runInContext~listCacheHas",
          "listCacheSet": "_.runInContext~listCacheSet",
          "ListCache.prototype.clear": "_.runInContext~ListCache#clear",
          "ListCache.prototype['delete']": "_.runInContext~ListCache#['delete']",
          "ListCache.prototype.get": "_.runInContext~ListCache#get",
          "ListCache.prototype.has": "_.runInContext~ListCache#has",
          "ListCache.prototype.set": "_.runInContext~ListCache#set",
          "MapCache": "_.runInContext~MapCache",
          "mapCacheClear": "_.runInContext~mapCacheClear",
          "mapCacheDelete": "_.runInContext~mapCacheDelete",
          "mapCacheGet": "_.runInContext~mapCacheGet",
          "mapCacheHas": "_.runInContext~mapCacheHas",
          "mapCacheSet": "_.runInContext~mapCacheSet",
          "MapCache.prototype.clear": "_.runInContext~MapCache#clear",
          "MapCache.prototype['delete']": "_.runInContext~MapCache#['delete']",
          "MapCache.prototype.get": "_.runInContext~MapCache#get",
          "MapCache.prototype.has": "_.runInContext~MapCache#has",
          "MapCache.prototype.set": "_.runInContext~MapCache#set",
          "SetCache": "_.runInContext~SetCache",
          "setCacheAdd": "_.runInContext~setCacheAdd",
          "setCacheHas": "_.runInContext~setCacheHas",
          "SetCache.prototype.add": "_.runInContext~SetCache#add",
          "SetCache.prototype.push": "_.runInContext~SetCache#push",
          "SetCache.prototype.has": "_.runInContext~SetCache#has",
          "Stack": "_.runInContext~Stack",
          "stackClear": "_.runInContext~stackClear",
          "stackDelete": "_.runInContext~stackDelete",
          "stackGet": "_.runInContext~stackGet",
          "stackHas": "_.runInContext~stackHas",
          "stackSet": "_.runInContext~stackSet",
          "Stack.prototype.clear": "_.runInContext~Stack#clear",
          "Stack.prototype['delete']": "_.runInContext~Stack#['delete']",
          "Stack.prototype.get": "_.runInContext~Stack#get",
          "Stack.prototype.has": "_.runInContext~Stack#has",
          "Stack.prototype.set": "_.runInContext~Stack#set",
          "arrayLikeKeys": "_.runInContext~arrayLikeKeys",
          "arraySample": "_.runInContext~arraySample",
          "arraySampleSize": "_.runInContext~arraySampleSize",
          "arrayShuffle": "_.runInContext~arrayShuffle",
          "assignInDefaults": "_.runInContext~assignInDefaults",
          "assignMergeValue": "_.runInContext~assignMergeValue",
          "assignValue": "_.runInContext~assignValue",
          "assocIndexOf": "_.runInContext~assocIndexOf",
          "baseAggregator": "_.runInContext~baseAggregator",
          "baseAssign": "_.runInContext~baseAssign",
          "baseAssignValue": "_.runInContext~baseAssignValue",
          "baseAt": "_.runInContext~baseAt",
          "baseClamp": "_.runInContext~baseClamp",
          "baseClone": "_.runInContext~baseClone",
          "baseConforms": "_.runInContext~baseConforms",
          "baseConformsTo": "_.runInContext~baseConformsTo",
          "baseDelay": "_.runInContext~baseDelay",
          "baseDifference": "_.runInContext~baseDifference",
          "baseEach": "_.runInContext~baseEach",
          "baseEachRight": "_.runInContext~baseEachRight",
          "baseEvery": "_.runInContext~baseEvery",
          "baseExtremum": "_.runInContext~baseExtremum",
          "baseFill": "_.runInContext~baseFill",
          "baseFilter": "_.runInContext~baseFilter",
          "baseFlatten": "_.runInContext~baseFlatten",
          "baseFor": "_.runInContext~baseFor",
          "baseForRight": "_.runInContext~baseForRight",
          "baseForOwn": "_.runInContext~baseForOwn",
          "baseForOwnRight": "_.runInContext~baseForOwnRight",
          "baseFunctions": "_.runInContext~baseFunctions",
          "baseGet": "_.runInContext~baseGet",
          "baseGetAllKeys": "_.runInContext~baseGetAllKeys",
          "baseGetTag": "_.runInContext~baseGetTag",
          "baseGt": "_.runInContext~baseGt",
          "baseHas": "_.runInContext~baseHas",
          "baseHasIn": "_.runInContext~baseHasIn",
          "baseInRange": "_.runInContext~baseInRange",
          "baseIntersection": "_.runInContext~baseIntersection",
          "baseInverter": "_.runInContext~baseInverter",
          "baseInvoke": "_.runInContext~baseInvoke",
          "baseIsArguments": "_.runInContext~baseIsArguments",
          "baseIsArrayBuffer": "_.runInContext~baseIsArrayBuffer",
          "baseIsDate": "_.runInContext~baseIsDate",
          "baseIsEqual": "_.runInContext~baseIsEqual",
          "baseIsEqualDeep": "_.runInContext~baseIsEqualDeep",
          "baseIsMap": "_.runInContext~baseIsMap",
          "baseIsMatch": "_.runInContext~baseIsMatch",
          "baseIsNative": "_.runInContext~baseIsNative",
          "baseIsRegExp": "_.runInContext~baseIsRegExp",
          "baseIsSet": "_.runInContext~baseIsSet",
          "baseIsTypedArray": "_.runInContext~baseIsTypedArray",
          "baseIteratee": "_.runInContext~baseIteratee",
          "baseKeys": "_.runInContext~baseKeys",
          "baseKeysIn": "_.runInContext~baseKeysIn",
          "baseLt": "_.runInContext~baseLt",
          "baseMap": "_.runInContext~baseMap",
          "baseMatches": "_.runInContext~baseMatches",
          "baseMatchesProperty": "_.runInContext~baseMatchesProperty",
          "baseMerge": "_.runInContext~baseMerge",
          "baseMergeDeep": "_.runInContext~baseMergeDeep",
          "baseNth": "_.runInContext~baseNth",
          "baseOrderBy": "_.runInContext~baseOrderBy",
          "basePick": "_.runInContext~basePick",
          "basePickBy": "_.runInContext~basePickBy",
          "basePropertyDeep": "_.runInContext~basePropertyDeep",
          "basePullAll": "_.runInContext~basePullAll",
          "basePullAt": "_.runInContext~basePullAt",
          "baseRandom": "_.runInContext~baseRandom",
          "baseRange": "_.runInContext~baseRange",
          "baseRepeat": "_.runInContext~baseRepeat",
          "baseRest": "_.runInContext~baseRest",
          "baseSample": "_.runInContext~baseSample",
          "baseSampleSize": "_.runInContext~baseSampleSize",
          "baseSet": "_.runInContext~baseSet",
          "baseSetData": "_.runInContext~baseSetData",
          "baseSetToString": "_.runInContext~baseSetToString",
          "baseShuffle": "_.runInContext~baseShuffle",
          "baseSlice": "_.runInContext~baseSlice",
          "baseSome": "_.runInContext~baseSome",
          "baseSortedIndex": "_.runInContext~baseSortedIndex",
          "baseSortedIndexBy": "_.runInContext~baseSortedIndexBy",
          "baseSortedUniq": "_.runInContext~baseSortedUniq",
          "baseToNumber": "_.runInContext~baseToNumber",
          "baseToString": "_.runInContext~baseToString",
          "baseUniq": "_.runInContext~baseUniq",
          "baseUnset": "_.runInContext~baseUnset",
          "baseUpdate": "_.runInContext~baseUpdate",
          "baseWhile": "_.runInContext~baseWhile",
          "baseWrapperValue": "_.runInContext~baseWrapperValue",
          "baseXor": "_.runInContext~baseXor",
          "baseZipObject": "_.runInContext~baseZipObject",
          "castArrayLikeObject": "_.runInContext~castArrayLikeObject",
          "castFunction": "_.runInContext~castFunction",
          "castPath": "_.runInContext~castPath",
          "castRest": "_.runInContext~castRest",
          "castSlice": "_.runInContext~castSlice",
          "clearTimeout": "_.runInContext~clearTimeout",
          "cloneBuffer": "_.runInContext~cloneBuffer",
          "cloneArrayBuffer": "_.runInContext~cloneArrayBuffer",
          "cloneDataView": "_.runInContext~cloneDataView",
          "cloneMap": "_.runInContext~cloneMap",
          "cloneRegExp": "_.runInContext~cloneRegExp",
          "cloneSet": "_.runInContext~cloneSet",
          "cloneSymbol": "_.runInContext~cloneSymbol",
          "cloneTypedArray": "_.runInContext~cloneTypedArray",
          "compareAscending": "_.runInContext~compareAscending",
          "compareMultiple": "_.runInContext~compareMultiple",
          "composeArgs": "_.runInContext~composeArgs",
          "composeArgsRight": "_.runInContext~composeArgsRight",
          "copyArray": "_.runInContext~copyArray",
          "copyObject": "_.runInContext~copyObject",
          "copySymbols": "_.runInContext~copySymbols",
          "createAggregator": "_.runInContext~createAggregator",
          "createAssigner": "_.runInContext~createAssigner",
          "createBaseEach": "_.runInContext~createBaseEach",
          "createBaseFor": "_.runInContext~createBaseFor",
          "createBind": "_.runInContext~createBind",
          "createCaseFirst": "_.runInContext~createCaseFirst",
          "createCompounder": "_.runInContext~createCompounder",
          "createCtor": "_.runInContext~createCtor",
          "createCurry": "_.runInContext~createCurry",
          "createFind": "_.runInContext~createFind",
          "createFlow": "_.runInContext~createFlow",
          "createHybrid": "_.runInContext~createHybrid",
          "createInverter": "_.runInContext~createInverter",
          "createMathOperation": "_.runInContext~createMathOperation",
          "createOver": "_.runInContext~createOver",
          "createPadding": "_.runInContext~createPadding",
          "createPartial": "_.runInContext~createPartial",
          "createRange": "_.runInContext~createRange",
          "createRelationalOperation": "_.runInContext~createRelationalOperation",
          "createRecurry": "_.runInContext~createRecurry",
          "createRound": "_.runInContext~createRound",
          "createSet": "_.runInContext~createSet",
          "createToPairs": "_.runInContext~createToPairs",
          "createWrap": "_.runInContext~createWrap",
          "equalArrays": "_.runInContext~equalArrays",
          "equalByTag": "_.runInContext~equalByTag",
          "equalObjects": "_.runInContext~equalObjects",
          "flatRest": "_.runInContext~flatRest",
          "getAllKeys": "_.runInContext~getAllKeys",
          "getAllKeysIn": "_.runInContext~getAllKeysIn",
          "getData": "_.runInContext~getData",
          "getFuncName": "_.runInContext~getFuncName",
          "getHolder": "_.runInContext~getHolder",
          "getIteratee": "_.runInContext~getIteratee",
          "getMapData": "_.runInContext~getMapData",
          "getMatchData": "_.runInContext~getMatchData",
          "getNative": "_.runInContext~getNative",
          "getRawTag": "_.runInContext~getRawTag",
          "getSymbols": "_.runInContext~getSymbols",
          "getSymbolsIn": "_.runInContext~getSymbolsIn",
          "getTag": "_.runInContext~getTag",
          "getView": "_.runInContext~getView",
          "getWrapDetails": "_.runInContext~getWrapDetails",
          "hasPath": "_.runInContext~hasPath",
          "initCloneArray": "_.runInContext~initCloneArray",
          "initCloneObject": "_.runInContext~initCloneObject",
          "initCloneByTag": "_.runInContext~initCloneByTag",
          "insertWrapDetails": "_.runInContext~insertWrapDetails",
          "isFlattenable": "_.runInContext~isFlattenable",
          "isIndex": "_.runInContext~isIndex",
          "isIterateeCall": "_.runInContext~isIterateeCall",
          "isKey": "_.runInContext~isKey",
          "isKeyable": "_.runInContext~isKeyable",
          "isLaziable": "_.runInContext~isLaziable",
          "isMasked": "_.runInContext~isMasked",
          "isMaskable": "_.runInContext~isMaskable",
          "isPrototype": "_.runInContext~isPrototype",
          "isStrictComparable": "_.runInContext~isStrictComparable",
          "matchesStrictComparable": "_.runInContext~matchesStrictComparable",
          "memoizeCapped": "_.runInContext~memoizeCapped",
          "mergeData": "_.runInContext~mergeData",
          "mergeDefaults": "_.runInContext~mergeDefaults",
          "nativeKeysIn": "_.runInContext~nativeKeysIn",
          "objectToString": "_.runInContext~objectToString",
          "overRest": "_.runInContext~overRest",
          "parent": "_.runInContext~parent",
          "reorder": "_.runInContext~reorder",
          "setData": "_.runInContext~setData",
          "setTimeout": "_.runInContext~setTimeout",
          "setToString": "_.runInContext~setToString",
          "setWrapToString": "_.runInContext~setWrapToString",
          "shortOut": "_.runInContext~shortOut",
          "shuffleSelf": "_.runInContext~shuffleSelf",
          "stringToPath": "_.runInContext~stringToPath",
          "toKey": "_.runInContext~toKey",
          "toSource": "_.runInContext~toSource",
          "updateWrapDetails": "_.runInContext~updateWrapDetails",
          "wrapperClone": "_.runInContext~wrapperClone",
          "chunk": "_.chunk",
          "compact": "_.compact",
          "concat": "_.concat",
          "difference": "_.difference",
          "differenceBy": "_.differenceBy",
          "differenceWith": "_.differenceWith",
          "drop": "_.drop",
          "dropRight": "_.dropRight",
          "dropRightWhile": "_.dropRightWhile",
          "dropWhile": "_.dropWhile",
          "fill": "_.fill",
          "findIndex": "_.findIndex",
          "findLastIndex": "_.findLastIndex",
          "flatten": "_.flatten",
          "flattenDeep": "_.flattenDeep",
          "flattenDepth": "_.flattenDepth",
          "fromPairs": "_.fromPairs",
          "head": "_.first",
          "indexOf": "_.indexOf",
          "initial": "_.initial",
          "intersection": "_.intersection",
          "intersectionBy": "_.intersectionBy",
          "intersectionWith": "_.intersectionWith",
          "join": "_.join",
          "last": "_.last",
          "lastIndexOf": "_.lastIndexOf",
          "nth": "_.nth",
          "pull": "_.pull",
          "pullAll": "_.pullAll",
          "pullAllBy": "_.pullAllBy",
          "pullAllWith": "_.pullAllWith",
          "pullAt": "_.pullAt",
          "remove": "_.remove",
          "reverse": "_.reverse",
          "slice": "_.slice",
          "sortedIndex": "_.sortedIndex",
          "sortedIndexBy": "_.sortedIndexBy",
          "sortedIndexOf": "_.sortedIndexOf",
          "sortedLastIndex": "_.sortedLastIndex",
          "sortedLastIndexBy": "_.sortedLastIndexBy",
          "sortedLastIndexOf": "_.sortedLastIndexOf",
          "sortedUniq": "_.sortedUniq",
          "sortedUniqBy": "_.sortedUniqBy",
          "tail": "_.tail",
          "take": "_.take",
          "takeRight": "_.takeRight",
          "takeRightWhile": "_.takeRightWhile",
          "takeWhile": "_.takeWhile",
          "union": "_.union",
          "unionBy": "_.unionBy",
          "unionWith": "_.unionWith",
          "uniq": "_.uniq",
          "uniqBy": "_.uniqBy",
          "uniqWith": "_.uniqWith",
          "unzip": "_.unzip",
          "unzipWith": "_.unzipWith",
          "without": "_.without",
          "xor": "_.xor",
          "xorBy": "_.xorBy",
          "xorWith": "_.xorWith",
          "zip": "_.zip",
          "zipObject": "_.zipObject",
          "zipObjectDeep": "_.zipObjectDeep",
          "zipWith": "_.zipWith",
          "chain": "_.chain",
          "tap": "_.tap",
          "thru": "_.thru",
          "wrapperAt": "_.runInContext~wrapperAt",
          "wrapperChain": "_.runInContext~wrapperChain",
          "wrapperCommit": "_.runInContext~wrapperCommit",
          "wrapperNext": "_.runInContext~wrapperNext",
          "wrapperToIterator": "_.runInContext~wrapperToIterator",
          "wrapperPlant": "_.runInContext~wrapperPlant",
          "wrapperReverse": "_.runInContext~wrapperReverse",
          "wrapperValue": "_.runInContext~wrapperValue",
          "countBy": "_.countBy",
          "every": "_.every",
          "filter": "_.filter",
          "find": "_.find",
          "findLast": "_.findLast",
          "flatMap": "_.flatMap",
          "flatMapDeep": "_.flatMapDeep",
          "flatMapDepth": "_.flatMapDepth",
          "forEach": "_.each",
          "forEachRight": "_.eachRight",
          "groupBy": "_.groupBy",
          "includes": "_.includes",
          "invokeMap": "_.invokeMap",
          "keyBy": "_.keyBy",
          "map": "_.map",
          "orderBy": "_.orderBy",
          "partition": "_.partition",
          "reduce": "_.reduce",
          "reduceRight": "_.reduceRight",
          "reject": "_.reject",
          "sample": "_.sample",
          "sampleSize": "_.sampleSize",
          "shuffle": "_.shuffle",
          "size": "_.size",
          "some": "_.some",
          "sortBy": "_.sortBy",
          "now": "_.now",
          "after": "_.after",
          "ary": "_.ary",
          "before": "_.before",
          "bind": "_.bind",
          "bindKey": "_.bindKey",
          "curry": "_.curry",
          "curryRight": "_.curryRight",
          "debounce": "_.debounce",
          "defer": "_.defer",
          "delay": "_.delay",
          "flip": "_.flip",
          "memoize": "_.memoize",
          "memoize.Cache": "_.memoize.Cache",
          "negate": "_.negate",
          "once": "_.once",
          "overArgs": "_.overArgs",
          "partial": "_.partial",
          "partialRight": "_.partialRight",
          "rearg": "_.rearg",
          "rest": "_.rest",
          "spread": "_.spread",
          "throttle": "_.throttle",
          "unary": "_.unary",
          "wrap": "_.wrap",
          "castArray": "_.castArray",
          "clone": "_.clone",
          "cloneWith": "_.cloneWith",
          "cloneDeep": "_.cloneDeep",
          "cloneDeepWith": "_.cloneDeepWith",
          "conformsTo": "_.conformsTo",
          "eq": "_.eq",
          "gt": "_.gt",
          "gte": "_.gte",
          "isArguments": "_.isArguments",
          "isArray": "_.isArray",
          "isArrayBuffer": "_.isArrayBuffer",
          "isArrayLike": "_.isArrayLike",
          "isArrayLikeObject": "_.isArrayLikeObject",
          "isBoolean": "_.isBoolean",
          "isBuffer": "_.isBuffer",
          "isDate": "_.isDate",
          "isElement": "_.isElement",
          "isEmpty": "_.isEmpty",
          "isEqual": "_.isEqual",
          "isEqualWith": "_.isEqualWith",
          "isError": "_.isError",
          "isFinite": "_.isFinite",
          "isFunction": "_.isFunction",
          "isInteger": "_.isInteger",
          "isLength": "_.isLength",
          "isObject": "_.isObject",
          "isObjectLike": "_.isObjectLike",
          "isMap": "_.isMap",
          "isMatch": "_.isMatch",
          "isMatchWith": "_.isMatchWith",
          "isNaN": "_.isNaN",
          "isNative": "_.isNative",
          "isNull": "_.isNull",
          "isNil": "_.isNil",
          "isNumber": "_.isNumber",
          "isPlainObject": "_.isPlainObject",
          "isRegExp": "_.isRegExp",
          "isSafeInteger": "_.isSafeInteger",
          "isSet": "_.isSet",
          "isString": "_.isString",
          "isSymbol": "_.isSymbol",
          "isTypedArray": "_.isTypedArray",
          "isUndefined": "_.isUndefined",
          "isWeakMap": "_.isWeakMap",
          "isWeakSet": "_.isWeakSet",
          "lt": "_.lt",
          "lte": "_.lte",
          "toArray": "_.toArray",
          "toFinite": "_.toFinite",
          "toInteger": "_.toInteger",
          "toLength": "_.toLength",
          "toNumber": "_.toNumber",
          "toPlainObject": "_.toPlainObject",
          "toSafeInteger": "_.toSafeInteger",
          "toString": "_.toString",
          "assign": "_.assign",
          "assignIn": "_.extend",
          "assignInWith": "_.extendWith",
          "assignWith": "_.assignWith",
          "at": "_.at",
          "create": "_.create",
          "defaults": "_.defaults",
          "defaultsDeep": "_.defaultsDeep",
          "findKey": "_.findKey",
          "findLastKey": "_.findLastKey",
          "forIn": "_.forIn",
          "forInRight": "_.forInRight",
          "forOwn": "_.forOwn",
          "forOwnRight": "_.forOwnRight",
          "functions": "_.functions",
          "functionsIn": "_.functionsIn",
          "get": "_.get",
          "has": "_.has",
          "hasIn": "_.hasIn",
          "invert": "_.invert",
          "invertBy": "_.invertBy",
          "invoke": "_.invoke",
          "keys": "_.keys",
          "keysIn": "_.keysIn",
          "mapKeys": "_.mapKeys",
          "mapValues": "_.mapValues",
          "merge": "_.merge",
          "mergeWith": "_.mergeWith",
          "omit": "_.omit",
          "omitBy": "_.omitBy",
          "pick": "_.pick",
          "pickBy": "_.pickBy",
          "result": "_.result",
          "set": "_.set",
          "setWith": "_.setWith",
          "toPairs": "_.entries",
          "toPairsIn": "_.entriesIn",
          "transform": "_.transform",
          "unset": "_.unset",
          "update": "_.update",
          "updateWith": "_.updateWith",
          "values": "_.values",
          "valuesIn": "_.valuesIn",
          "clamp": "_.clamp",
          "inRange": "_.inRange",
          "random": "_.random",
          "camelCase": "_.camelCase",
          "capitalize": "_.capitalize",
          "deburr": "_.deburr",
          "endsWith": "_.endsWith",
          "escape": "_.escape",
          "escapeRegExp": "_.escapeRegExp",
          "kebabCase": "_.kebabCase",
          "lowerCase": "_.lowerCase",
          "lowerFirst": "_.lowerFirst",
          "pad": "_.pad",
          "padEnd": "_.padEnd",
          "padStart": "_.padStart",
          "parseInt": "_.parseInt",
          "repeat": "_.repeat",
          "replace": "_.replace",
          "snakeCase": "_.snakeCase",
          "split": "_.split",
          "startCase": "_.startCase",
          "startsWith": "_.startsWith",
          "template": "_.template",
          "toLower": "_.toLower",
          "toUpper": "_.toUpper",
          "trim": "_.trim",
          "trimEnd": "_.trimEnd",
          "trimStart": "_.trimStart",
          "truncate": "_.truncate",
          "unescape": "_.unescape",
          "upperCase": "_.upperCase",
          "upperFirst": "_.upperFirst",
          "words": "_.words",
          "attempt": "_.attempt",
          "bindAll": "_.bindAll",
          "cond": "_.cond",
          "conforms": "_.conforms",
          "constant": "_.constant",
          "defaultTo": "_.defaultTo",
          "flow": "_.flow",
          "flowRight": "_.flowRight",
          "identity": "_.identity",
          "iteratee": "_.iteratee",
          "matches": "_.matches",
          "matchesProperty": "_.matchesProperty",
          "method": "_.method",
          "methodOf": "_.methodOf",
          "mixin": "_.mixin",
          "noConflict": "_.noConflict",
          "noop": "_.noop",
          "nthArg": "_.nthArg",
          "over": "_.over",
          "overEvery": "_.overEvery",
          "overSome": "_.overSome",
          "property": "_.property",
          "propertyOf": "_.propertyOf",
          "range": "_.range",
          "rangeRight": "_.rangeRight",
          "stubArray": "_.stubArray",
          "stubFalse": "_.stubFalse",
          "stubObject": "_.stubObject",
          "stubString": "_.stubString",
          "stubTrue": "_.stubTrue",
          "times": "_.times",
          "toPath": "_.toPath",
          "uniqueId": "_.uniqueId",
          "add": "_.add",
          "ceil": "_.ceil",
          "divide": "_.divide",
          "floor": "_.floor",
          "max": "_.max",
          "maxBy": "_.maxBy",
          "mean": "_.mean",
          "meanBy": "_.meanBy",
          "min": "_.min",
          "minBy": "_.minBy",
          "multiply": "_.multiply",
          "round": "_.round",
          "subtract": "_.subtract",
          "sum": "_.sum",
          "sumBy": "_.sumBy",
          "lodash.after": "_.runInContext~lodash.after",
          "lodash.ary": "_.runInContext~lodash.ary",
          "lodash.assign": "_.runInContext~lodash.assign",
          "lodash.assignIn": "_.runInContext~lodash.assignIn",
          "lodash.assignInWith": "_.runInContext~lodash.assignInWith",
          "lodash.assignWith": "_.runInContext~lodash.assignWith",
          "lodash.at": "_.runInContext~lodash.at",
          "lodash.before": "_.runInContext~lodash.before",
          "lodash.bind": "_.runInContext~lodash.bind",
          "lodash.bindAll": "_.runInContext~lodash.bindAll",
          "lodash.bindKey": "_.runInContext~lodash.bindKey",
          "lodash.castArray": "_.runInContext~lodash.castArray",
          "lodash.chain": "_.runInContext~lodash.chain",
          "lodash.chunk": "_.runInContext~lodash.chunk",
          "lodash.compact": "_.runInContext~lodash.compact",
          "lodash.concat": "_.runInContext~lodash.concat",
          "lodash.cond": "_.runInContext~lodash.cond",
          "lodash.conforms": "_.runInContext~lodash.conforms",
          "lodash.constant": "_.runInContext~lodash.constant",
          "lodash.countBy": "_.runInContext~lodash.countBy",
          "lodash.create": "_.runInContext~lodash.create",
          "lodash.curry": "_.runInContext~lodash.curry",
          "lodash.curryRight": "_.runInContext~lodash.curryRight",
          "lodash.debounce": "_.runInContext~lodash.debounce",
          "lodash.defaults": "_.runInContext~lodash.defaults",
          "lodash.defaultsDeep": "_.runInContext~lodash.defaultsDeep",
          "lodash.defer": "_.runInContext~lodash.defer",
          "lodash.delay": "_.runInContext~lodash.delay",
          "lodash.difference": "_.runInContext~lodash.difference",
          "lodash.differenceBy": "_.runInContext~lodash.differenceBy",
          "lodash.differenceWith": "_.runInContext~lodash.differenceWith",
          "lodash.drop": "_.runInContext~lodash.drop",
          "lodash.dropRight": "_.runInContext~lodash.dropRight",
          "lodash.dropRightWhile": "_.runInContext~lodash.dropRightWhile",
          "lodash.dropWhile": "_.runInContext~lodash.dropWhile",
          "lodash.fill": "_.runInContext~lodash.fill",
          "lodash.filter": "_.runInContext~lodash.filter",
          "lodash.flatMap": "_.runInContext~lodash.flatMap",
          "lodash.flatMapDeep": "_.runInContext~lodash.flatMapDeep",
          "lodash.flatMapDepth": "_.runInContext~lodash.flatMapDepth",
          "lodash.flatten": "_.runInContext~lodash.flatten",
          "lodash.flattenDeep": "_.runInContext~lodash.flattenDeep",
          "lodash.flattenDepth": "_.runInContext~lodash.flattenDepth",
          "lodash.flip": "_.runInContext~lodash.flip",
          "lodash.flow": "_.runInContext~lodash.flow",
          "lodash.flowRight": "_.runInContext~lodash.flowRight",
          "lodash.fromPairs": "_.runInContext~lodash.fromPairs",
          "lodash.functions": "_.runInContext~lodash.functions",
          "lodash.functionsIn": "_.runInContext~lodash.functionsIn",
          "lodash.groupBy": "_.runInContext~lodash.groupBy",
          "lodash.initial": "_.runInContext~lodash.initial",
          "lodash.intersection": "_.runInContext~lodash.intersection",
          "lodash.intersectionBy": "_.runInContext~lodash.intersectionBy",
          "lodash.intersectionWith": "_.runInContext~lodash.intersectionWith",
          "lodash.invert": "_.runInContext~lodash.invert",
          "lodash.invertBy": "_.runInContext~lodash.invertBy",
          "lodash.invokeMap": "_.runInContext~lodash.invokeMap",
          "lodash.iteratee": "_.runInContext~lodash.iteratee",
          "lodash.keyBy": "_.runInContext~lodash.keyBy",
          "lodash.keys": "_.runInContext~lodash.keys",
          "lodash.keysIn": "_.runInContext~lodash.keysIn",
          "lodash.map": "_.runInContext~lodash.map",
          "lodash.mapKeys": "_.runInContext~lodash.mapKeys",
          "lodash.mapValues": "_.runInContext~lodash.mapValues",
          "lodash.matches": "_.runInContext~lodash.matches",
          "lodash.matchesProperty": "_.runInContext~lodash.matchesProperty",
          "lodash.memoize": "_.runInContext~lodash.memoize",
          "lodash.merge": "_.runInContext~lodash.merge",
          "lodash.mergeWith": "_.runInContext~lodash.mergeWith",
          "lodash.method": "_.runInContext~lodash.method",
          "lodash.methodOf": "_.runInContext~lodash.methodOf",
          "lodash.mixin": "_.runInContext~lodash.mixin",
          "lodash.negate": "_.runInContext~lodash.negate",
          "lodash.nthArg": "_.runInContext~lodash.nthArg",
          "lodash.omit": "_.runInContext~lodash.omit",
          "lodash.omitBy": "_.runInContext~lodash.omitBy",
          "lodash.once": "_.runInContext~lodash.once",
          "lodash.orderBy": "_.runInContext~lodash.orderBy",
          "lodash.over": "_.runInContext~lodash.over",
          "lodash.overArgs": "_.runInContext~lodash.overArgs",
          "lodash.overEvery": "_.runInContext~lodash.overEvery",
          "lodash.overSome": "_.runInContext~lodash.overSome",
          "lodash.partial": "_.runInContext~lodash.partial",
          "lodash.partialRight": "_.runInContext~lodash.partialRight",
          "lodash.partition": "_.runInContext~lodash.partition",
          "lodash.pick": "_.runInContext~lodash.pick",
          "lodash.pickBy": "_.runInContext~lodash.pickBy",
          "lodash.property": "_.runInContext~lodash.property",
          "lodash.propertyOf": "_.runInContext~lodash.propertyOf",
          "lodash.pull": "_.runInContext~lodash.pull",
          "lodash.pullAll": "_.runInContext~lodash.pullAll",
          "lodash.pullAllBy": "_.runInContext~lodash.pullAllBy",
          "lodash.pullAllWith": "_.runInContext~lodash.pullAllWith",
          "lodash.pullAt": "_.runInContext~lodash.pullAt",
          "lodash.range": "_.runInContext~lodash.range",
          "lodash.rangeRight": "_.runInContext~lodash.rangeRight",
          "lodash.rearg": "_.runInContext~lodash.rearg",
          "lodash.reject": "_.runInContext~lodash.reject",
          "lodash.remove": "_.runInContext~lodash.remove",
          "lodash.rest": "_.runInContext~lodash.rest",
          "lodash.reverse": "_.runInContext~lodash.reverse",
          "lodash.sampleSize": "_.runInContext~lodash.sampleSize",
          "lodash.set": "_.runInContext~lodash.set",
          "lodash.setWith": "_.runInContext~lodash.setWith",
          "lodash.shuffle": "_.runInContext~lodash.shuffle",
          "lodash.slice": "_.runInContext~lodash.slice",
          "lodash.sortBy": "_.runInContext~lodash.sortBy",
          "lodash.sortedUniq": "_.runInContext~lodash.sortedUniq",
          "lodash.sortedUniqBy": "_.runInContext~lodash.sortedUniqBy",
          "lodash.split": "_.runInContext~lodash.split",
          "lodash.spread": "_.runInContext~lodash.spread",
          "lodash.tail": "_.runInContext~lodash.tail",
          "lodash.take": "_.runInContext~lodash.take",
          "lodash.takeRight": "_.runInContext~lodash.takeRight",
          "lodash.takeRightWhile": "_.runInContext~lodash.takeRightWhile",
          "lodash.takeWhile": "_.runInContext~lodash.takeWhile",
          "lodash.tap": "_.runInContext~lodash.tap",
          "lodash.throttle": "_.runInContext~lodash.throttle",
          "lodash.thru": "_.runInContext~lodash.thru",
          "lodash.toArray": "_.runInContext~lodash.toArray",
          "lodash.toPairs": "_.runInContext~lodash.toPairs",
          "lodash.toPairsIn": "_.runInContext~lodash.toPairsIn",
          "lodash.toPath": "_.runInContext~lodash.toPath",
          "lodash.toPlainObject": "_.runInContext~lodash.toPlainObject",
          "lodash.transform": "_.runInContext~lodash.transform",
          "lodash.unary": "_.runInContext~lodash.unary",
          "lodash.union": "_.runInContext~lodash.union",
          "lodash.unionBy": "_.runInContext~lodash.unionBy",
          "lodash.unionWith": "_.runInContext~lodash.unionWith",
          "lodash.uniq": "_.runInContext~lodash.uniq",
          "lodash.uniqBy": "_.runInContext~lodash.uniqBy",
          "lodash.uniqWith": "_.runInContext~lodash.uniqWith",
          "lodash.unset": "_.runInContext~lodash.unset",
          "lodash.unzip": "_.runInContext~lodash.unzip",
          "lodash.unzipWith": "_.runInContext~lodash.unzipWith",
          "lodash.update": "_.runInContext~lodash.update",
          "lodash.updateWith": "_.runInContext~lodash.updateWith",
          "lodash.values": "_.runInContext~lodash.values",
          "lodash.valuesIn": "_.runInContext~lodash.valuesIn",
          "lodash.without": "_.runInContext~lodash.without",
          "lodash.words": "_.runInContext~lodash.words",
          "lodash.wrap": "_.runInContext~lodash.wrap",
          "lodash.xor": "_.runInContext~lodash.xor",
          "lodash.xorBy": "_.runInContext~lodash.xorBy",
          "lodash.xorWith": "_.runInContext~lodash.xorWith",
          "lodash.zip": "_.runInContext~lodash.zip",
          "lodash.zipObject": "_.runInContext~lodash.zipObject",
          "lodash.zipObjectDeep": "_.runInContext~lodash.zipObjectDeep",
          "lodash.zipWith": "_.runInContext~lodash.zipWith",
          "lodash.entries": "_.runInContext~lodash.entries",
          "lodash.entriesIn": "_.runInContext~lodash.entriesIn",
          "lodash.extend": "_.runInContext~lodash.extend",
          "lodash.extendWith": "_.runInContext~lodash.extendWith",
          "lodash.add": "_.runInContext~lodash.add",
          "lodash.attempt": "_.runInContext~lodash.attempt",
          "lodash.camelCase": "_.runInContext~lodash.camelCase",
          "lodash.capitalize": "_.runInContext~lodash.capitalize",
          "lodash.ceil": "_.runInContext~lodash.ceil",
          "lodash.clamp": "_.runInContext~lodash.clamp",
          "lodash.clone": "_.runInContext~lodash.clone",
          "lodash.cloneDeep": "_.runInContext~lodash.cloneDeep",
          "lodash.cloneDeepWith": "_.runInContext~lodash.cloneDeepWith",
          "lodash.cloneWith": "_.runInContext~lodash.cloneWith",
          "lodash.conformsTo": "_.runInContext~lodash.conformsTo",
          "lodash.deburr": "_.runInContext~lodash.deburr",
          "lodash.defaultTo": "_.runInContext~lodash.defaultTo",
          "lodash.divide": "_.runInContext~lodash.divide",
          "lodash.endsWith": "_.runInContext~lodash.endsWith",
          "lodash.eq": "_.runInContext~lodash.eq",
          "lodash.escape": "_.runInContext~lodash.escape",
          "lodash.escapeRegExp": "_.runInContext~lodash.escapeRegExp",
          "lodash.every": "_.runInContext~lodash.every",
          "lodash.find": "_.runInContext~lodash.find",
          "lodash.findIndex": "_.runInContext~lodash.findIndex",
          "lodash.findKey": "_.runInContext~lodash.findKey",
          "lodash.findLast": "_.runInContext~lodash.findLast",
          "lodash.findLastIndex": "_.runInContext~lodash.findLastIndex",
          "lodash.findLastKey": "_.runInContext~lodash.findLastKey",
          "lodash.floor": "_.runInContext~lodash.floor",
          "lodash.forEach": "_.runInContext~lodash.forEach",
          "lodash.forEachRight": "_.runInContext~lodash.forEachRight",
          "lodash.forIn": "_.runInContext~lodash.forIn",
          "lodash.forInRight": "_.runInContext~lodash.forInRight",
          "lodash.forOwn": "_.runInContext~lodash.forOwn",
          "lodash.forOwnRight": "_.runInContext~lodash.forOwnRight",
          "lodash.get": "_.runInContext~lodash.get",
          "lodash.gt": "_.runInContext~lodash.gt",
          "lodash.gte": "_.runInContext~lodash.gte",
          "lodash.has": "_.runInContext~lodash.has",
          "lodash.hasIn": "_.runInContext~lodash.hasIn",
          "lodash.head": "_.runInContext~lodash.head",
          "lodash.identity": "_.runInContext~lodash.identity",
          "lodash.includes": "_.runInContext~lodash.includes",
          "lodash.indexOf": "_.runInContext~lodash.indexOf",
          "lodash.inRange": "_.runInContext~lodash.inRange",
          "lodash.invoke": "_.runInContext~lodash.invoke",
          "lodash.isArguments": "_.runInContext~lodash.isArguments",
          "lodash.isArray": "_.runInContext~lodash.isArray",
          "lodash.isArrayBuffer": "_.runInContext~lodash.isArrayBuffer",
          "lodash.isArrayLike": "_.runInContext~lodash.isArrayLike",
          "lodash.isArrayLikeObject": "_.runInContext~lodash.isArrayLikeObject",
          "lodash.isBoolean": "_.runInContext~lodash.isBoolean",
          "lodash.isBuffer": "_.runInContext~lodash.isBuffer",
          "lodash.isDate": "_.runInContext~lodash.isDate",
          "lodash.isElement": "_.runInContext~lodash.isElement",
          "lodash.isEmpty": "_.runInContext~lodash.isEmpty",
          "lodash.isEqual": "_.runInContext~lodash.isEqual",
          "lodash.isEqualWith": "_.runInContext~lodash.isEqualWith",
          "lodash.isError": "_.runInContext~lodash.isError",
          "lodash.isFinite": "_.runInContext~lodash.isFinite",
          "lodash.isFunction": "_.runInContext~lodash.isFunction",
          "lodash.isInteger": "_.runInContext~lodash.isInteger",
          "lodash.isLength": "_.runInContext~lodash.isLength",
          "lodash.isMap": "_.runInContext~lodash.isMap",
          "lodash.isMatch": "_.runInContext~lodash.isMatch",
          "lodash.isMatchWith": "_.runInContext~lodash.isMatchWith",
          "lodash.isNaN": "_.runInContext~lodash.isNaN",
          "lodash.isNative": "_.runInContext~lodash.isNative",
          "lodash.isNil": "_.runInContext~lodash.isNil",
          "lodash.isNull": "_.runInContext~lodash.isNull",
          "lodash.isNumber": "_.runInContext~lodash.isNumber",
          "lodash.isObject": "_.runInContext~lodash.isObject",
          "lodash.isObjectLike": "_.runInContext~lodash.isObjectLike",
          "lodash.isPlainObject": "_.runInContext~lodash.isPlainObject",
          "lodash.isRegExp": "_.runInContext~lodash.isRegExp",
          "lodash.isSafeInteger": "_.runInContext~lodash.isSafeInteger",
          "lodash.isSet": "_.runInContext~lodash.isSet",
          "lodash.isString": "_.runInContext~lodash.isString",
          "lodash.isSymbol": "_.runInContext~lodash.isSymbol",
          "lodash.isTypedArray": "_.runInContext~lodash.isTypedArray",
          "lodash.isUndefined": "_.runInContext~lodash.isUndefined",
          "lodash.isWeakMap": "_.runInContext~lodash.isWeakMap",
          "lodash.isWeakSet": "_.runInContext~lodash.isWeakSet",
          "lodash.join": "_.runInContext~lodash.join",
          "lodash.kebabCase": "_.runInContext~lodash.kebabCase",
          "lodash.last": "_.runInContext~lodash.last",
          "lodash.lastIndexOf": "_.runInContext~lodash.lastIndexOf",
          "lodash.lowerCase": "_.runInContext~lodash.lowerCase",
          "lodash.lowerFirst": "_.runInContext~lodash.lowerFirst",
          "lodash.lt": "_.runInContext~lodash.lt",
          "lodash.lte": "_.runInContext~lodash.lte",
          "lodash.max": "_.runInContext~lodash.max",
          "lodash.maxBy": "_.runInContext~lodash.maxBy",
          "lodash.mean": "_.runInContext~lodash.mean",
          "lodash.meanBy": "_.runInContext~lodash.meanBy",
          "lodash.min": "_.runInContext~lodash.min",
          "lodash.minBy": "_.runInContext~lodash.minBy",
          "lodash.stubArray": "_.runInContext~lodash.stubArray",
          "lodash.stubFalse": "_.runInContext~lodash.stubFalse",
          "lodash.stubObject": "_.runInContext~lodash.stubObject",
          "lodash.stubString": "_.runInContext~lodash.stubString",
          "lodash.stubTrue": "_.runInContext~lodash.stubTrue",
          "lodash.multiply": "_.runInContext~lodash.multiply",
          "lodash.nth": "_.runInContext~lodash.nth",
          "lodash.noConflict": "_.runInContext~lodash.noConflict",
          "lodash.noop": "_.runInContext~lodash.noop",
          "lodash.now": "_.runInContext~lodash.now",
          "lodash.pad": "_.runInContext~lodash.pad",
          "lodash.padEnd": "_.runInContext~lodash.padEnd",
          "lodash.padStart": "_.runInContext~lodash.padStart",
          "lodash.parseInt": "_.runInContext~lodash.parseInt",
          "lodash.random": "_.runInContext~lodash.random",
          "lodash.reduce": "_.runInContext~lodash.reduce",
          "lodash.reduceRight": "_.runInContext~lodash.reduceRight",
          "lodash.repeat": "_.runInContext~lodash.repeat",
          "lodash.replace": "_.runInContext~lodash.replace",
          "lodash.result": "_.runInContext~lodash.result",
          "lodash.round": "_.runInContext~lodash.round",
          "lodash.runInContext": "_.runInContext~lodash.runInContext",
          "lodash.sample": "_.runInContext~lodash.sample",
          "lodash.size": "_.runInContext~lodash.size",
          "lodash.snakeCase": "_.runInContext~lodash.snakeCase",
          "lodash.some": "_.runInContext~lodash.some",
          "lodash.sortedIndex": "_.runInContext~lodash.sortedIndex",
          "lodash.sortedIndexBy": "_.runInContext~lodash.sortedIndexBy",
          "lodash.sortedIndexOf": "_.runInContext~lodash.sortedIndexOf",
          "lodash.sortedLastIndex": "_.runInContext~lodash.sortedLastIndex",
          "lodash.sortedLastIndexBy": "_.runInContext~lodash.sortedLastIndexBy",
          "lodash.sortedLastIndexOf": "_.runInContext~lodash.sortedLastIndexOf",
          "lodash.startCase": "_.runInContext~lodash.startCase",
          "lodash.startsWith": "_.runInContext~lodash.startsWith",
          "lodash.subtract": "_.runInContext~lodash.subtract",
          "lodash.sum": "_.runInContext~lodash.sum",
          "lodash.sumBy": "_.runInContext~lodash.sumBy",
          "lodash.template": "_.runInContext~lodash.template",
          "lodash.times": "_.runInContext~lodash.times",
          "lodash.toFinite": "_.runInContext~lodash.toFinite",
          "lodash.toInteger": "_.runInContext~lodash.toInteger",
          "lodash.toLength": "_.runInContext~lodash.toLength",
          "lodash.toLower": "_.runInContext~lodash.toLower",
          "lodash.toNumber": "_.runInContext~lodash.toNumber",
          "lodash.toSafeInteger": "_.runInContext~lodash.toSafeInteger",
          "lodash.toString": "_.runInContext~lodash.toString",
          "lodash.toUpper": "_.runInContext~lodash.toUpper",
          "lodash.trim": "_.runInContext~lodash.trim",
          "lodash.trimEnd": "_.runInContext~lodash.trimEnd",
          "lodash.trimStart": "_.runInContext~lodash.trimStart",
          "lodash.truncate": "_.runInContext~lodash.truncate",
          "lodash.unescape": "_.runInContext~lodash.unescape",
          "lodash.uniqueId": "_.runInContext~lodash.uniqueId",
          "lodash.upperCase": "_.runInContext~lodash.upperCase",
          "lodash.upperFirst": "_.runInContext~lodash.upperFirst",
          "lodash.each": "_.runInContext~lodash.each",
          "lodash.eachRight": "_.runInContext~lodash.eachRight",
          "lodash.first": "_.runInContext~lodash.first",
          "lodash.VERSION": "_.lodash.VERSION",
          "LazyWrapper.prototype.compact": "_.runInContext~LazyWrapper#compact",
          "LazyWrapper.prototype.find": "_.runInContext~LazyWrapper#find",
          "LazyWrapper.prototype.findLast": "_.runInContext~LazyWrapper#findLast",
          "LazyWrapper.prototype.invokeMap": "_.runInContext~LazyWrapper#invokeMap",
          "LazyWrapper.prototype.reject": "_.runInContext~LazyWrapper#reject",
          "LazyWrapper.prototype.slice": "_.runInContext~LazyWrapper#slice",
          "LazyWrapper.prototype.takeRightWhile": "_.runInContext~LazyWrapper#takeRightWhile",
          "LazyWrapper.prototype.toArray": "_.runInContext~LazyWrapper#toArray",
          "realNames[undefined]": "_.runInContext~realNames.undefined]",
          "LazyWrapper.prototype.clone": "_.runInContext~LazyWrapper#clone",
          "LazyWrapper.prototype.reverse": "_.runInContext~LazyWrapper#reverse",
          "LazyWrapper.prototype.value": "_.runInContext~LazyWrapper#value",
          "lodash.prototype.at": "_.runInContext~lodash#at",
          "lodash.prototype.chain": "_.runInContext~lodash#chain",
          "lodash.prototype.commit": "_.runInContext~lodash#commit",
          "lodash.prototype.next": "_.runInContext~lodash#next",
          "lodash.prototype.plant": "_.runInContext~lodash#plant",
          "lodash.prototype.reverse": "_.runInContext~lodash#reverse",
          "lodash.prototype.toJSON": "_.runInContext~lodash#toJSON",
          "lodash.prototype.valueOf": "_.runInContext~lodash#valueOf",
          "lodash.prototype.value": "_.runInContext~lodash#toJSON#value",
          "lodash.prototype.first": "_.runInContext~lodash#first",
          "lodash.prototype[undefined]": "_.runInContext~lodash#[undefined]"
        }
      },
      "description": "Create a new pristine `lodash` function using the `context` object.",
      "scope": "static",
      "memberof": "_",
      "since": "1.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "root",
          "description": "The context object.",
          "name": "context"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns a new `lodash` function."
        }
      ],
      "examples": [
        "_.mixin({ 'foo': _.constant('foo') });\n\nvar lodash = _.runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n\n_.isFunction(_.foo);\n// => true\n_.isFunction(_.bar);\n// => false\n\nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n\n// Create a suped-up `defer` in Node.js.\nvar defer = _.runInContext({ 'setTimeout': setImmediate }).defer;"
      ],
      "name": "runInContext",
      "longname": "_.runInContext",
      "kind": "function",
      "___id": "T000002R000566",
      "___s": true
    },
    {
      "comment": "/** Built-in constructor references. */",
      "meta": {
        "range": [
          45883,
          45904
        ],
        "filename": "lodash.js",
        "lineno": 1423,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003167",
          "name": "Array",
          "type": "MemberExpression",
          "value": "context.Array"
        }
      },
      "description": "Built-in constructor references.",
      "name": "Array",
      "longname": "_.runInContext~Array",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000568",
      "___s": true
    },
    {
      "comment": "/** Used for built-in method references. */",
      "meta": {
        "range": [
          46227,
          46255
        ],
        "filename": "lodash.js",
        "lineno": 1434,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003213",
          "name": "arrayProto",
          "type": "MemberExpression",
          "value": "Array.prototype"
        }
      },
      "description": "Used for built-in method references.",
      "name": "arrayProto",
      "longname": "_.runInContext~arrayProto",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000577",
      "___s": true
    },
    {
      "comment": "/** Used to detect overreaching core-js shims. */",
      "meta": {
        "range": [
          46400,
          46442
        ],
        "filename": "lodash.js",
        "lineno": 1439,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003229",
          "name": "coreJsData",
          "type": "MemberExpression",
          "value": "context['__core-js_shared__']"
        }
      },
      "description": "Used to detect overreaching core-js shims.",
      "name": "coreJsData",
      "longname": "_.runInContext~coreJsData",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000580",
      "___s": true
    },
    {
      "comment": "/** Used to resolve the decompiled source of functions. */",
      "meta": {
        "range": [
          46516,
          46549
        ],
        "filename": "lodash.js",
        "lineno": 1442,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003235",
          "name": "funcToString",
          "type": "MemberExpression",
          "value": "funcProto.toString"
        }
      },
      "description": "Used to resolve the decompiled source of functions.",
      "name": "funcToString",
      "longname": "_.runInContext~funcToString",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000581",
      "___s": true
    },
    {
      "comment": "/** Used to check objects for own properties. */",
      "meta": {
        "range": [
          46613,
          46656
        ],
        "filename": "lodash.js",
        "lineno": 1445,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003241",
          "name": "hasOwnProperty",
          "type": "MemberExpression",
          "value": "objectProto.hasOwnProperty"
        }
      },
      "description": "Used to check objects for own properties.",
      "name": "hasOwnProperty",
      "longname": "_.runInContext~hasOwnProperty",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000582",
      "___s": true
    },
    {
      "comment": "/** Used to generate unique IDs. */",
      "meta": {
        "range": [
          46707,
          46720
        ],
        "filename": "lodash.js",
        "lineno": 1448,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003247",
          "name": "idCounter",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "Used to generate unique IDs.",
      "name": "idCounter",
      "longname": "_.runInContext~idCounter",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000583",
      "___s": true
    },
    {
      "comment": "/** Used to detect methods masquerading as native. */",
      "meta": {
        "range": [
          46789,
          46970
        ],
        "filename": "lodash.js",
        "lineno": 1451,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003251",
          "name": "maskSrcKey",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to detect methods masquerading as native.",
      "name": "maskSrcKey",
      "longname": "_.runInContext~maskSrcKey",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000584",
      "___s": true
    },
    {
      "comment": "/**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */",
      "meta": {
        "range": [
          47140,
          47183
        ],
        "filename": "lodash.js",
        "lineno": 1461,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003284",
          "name": "nativeObjectToString",
          "type": "MemberExpression",
          "value": "objectProto.toString"
        }
      },
      "description": "Used to resolve the\n[`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\nof values.",
      "name": "nativeObjectToString",
      "longname": "_.runInContext~nativeObjectToString",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000586",
      "___s": true
    },
    {
      "comment": "/** Used to infer the `Object` constructor. */",
      "meta": {
        "range": [
          47245,
          47289
        ],
        "filename": "lodash.js",
        "lineno": 1464,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003290",
          "name": "objectCtorString",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to infer the `Object` constructor.",
      "name": "objectCtorString",
      "longname": "_.runInContext~objectCtorString",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000587",
      "___s": true
    },
    {
      "comment": "/** Used to restore the original `_` reference in `_.noConflict`. */",
      "meta": {
        "range": [
          47373,
          47389
        ],
        "filename": "lodash.js",
        "lineno": 1467,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003298",
          "name": "oldDash",
          "type": "MemberExpression",
          "value": "root._"
        }
      },
      "description": "Used to restore the original `_` reference in `_.noConflict`.",
      "name": "oldDash",
      "longname": "_.runInContext~oldDash",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000588",
      "___s": true
    },
    {
      "comment": "/** Used to detect if a method is native. */",
      "meta": {
        "range": [
          47449,
          47638
        ],
        "filename": "lodash.js",
        "lineno": 1470,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003304",
          "name": "reIsNative",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to detect if a method is native.",
      "name": "reIsNative",
      "longname": "_.runInContext~reIsNative",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000589",
      "___s": true
    },
    {
      "comment": "/** Built-in value references. */",
      "meta": {
        "range": [
          47687,
          47738
        ],
        "filename": "lodash.js",
        "lineno": 1476,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003328",
          "name": "Buffer",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Built-in value references.",
      "name": "Buffer",
      "longname": "_.runInContext~Buffer",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000590",
      "___s": true
    },
    {
      "comment": "/** Mocked built-ins. */",
      "meta": {
        "range": [
          48504,
          48588
        ],
        "filename": "lodash.js",
        "lineno": 1497,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003426",
          "name": "ctxClearTimeout",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Mocked built-ins.",
      "name": "ctxClearTimeout",
      "longname": "_.runInContext~ctxClearTimeout",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000603",
      "___s": true
    },
    {
      "comment": "/** Used to store function metadata. */",
      "meta": {
        "range": [
          49772,
          49804
        ],
        "filename": "lodash.js",
        "lineno": 1525,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003579",
          "name": "metaMap",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Used to store function metadata.",
      "name": "metaMap",
      "longname": "_.runInContext~metaMap",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000625",
      "___s": true
    },
    {
      "comment": "/** Used to lookup unminified function names. */",
      "meta": {
        "range": [
          49868,
          49882
        ],
        "filename": "lodash.js",
        "lineno": 1528,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003586",
          "name": "realNames",
          "type": "ObjectExpression",
          "value": "{}"
        }
      },
      "description": "Used to lookup unminified function names.",
      "name": "realNames",
      "longname": "_.runInContext~realNames",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000626",
      "___s": true
    },
    {
      "comment": "/** Used to detect maps, sets, and weakmaps. */",
      "meta": {
        "range": [
          49945,
          49984
        ],
        "filename": "lodash.js",
        "lineno": 1531,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003590",
          "name": "dataViewCtorString",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Used to detect maps, sets, and weakmaps.",
      "name": "dataViewCtorString",
      "longname": "_.runInContext~dataViewCtorString",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000627",
      "___s": true
    },
    {
      "comment": "/** Used to convert symbols to primitives and strings. */",
      "meta": {
        "range": [
          50229,
          50280
        ],
        "filename": "lodash.js",
        "lineno": 1538,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003616",
          "name": "symbolProto",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Used to convert symbols to primitives and strings.",
      "name": "symbolProto",
      "longname": "_.runInContext~symbolProto",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000632",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array of at least `200` elements\n     * and any iteratees accept only one argument. The heuristic for whether a\n     * section qualifies for shortcut fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */",
      "meta": {
        "range": [
          50513,
          57035
        ],
        "filename": "lodash.js",
        "lineno": 1544,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Creates a `lodash` object which wraps `value` to enable implicit method\nchain sequences. Methods that operate on and return arrays, collections,\nand functions can be chained together. Methods that retrieve a single value\nor may return a primitive value will automatically end the chain sequence\nand return the unwrapped value. Otherwise, the value must be unwrapped\nwith `_#value`.\n\nExplicit chain sequences, which must be unwrapped with `_#value`, may be\nenabled using `_.chain`.\n\nThe execution of chained methods is lazy, that is, it's deferred until\n`_#value` is implicitly or explicitly called.\n\nLazy evaluation allows several methods to support shortcut fusion.\nShortcut fusion is an optimization to merge iteratee calls; this avoids\nthe creation of intermediate arrays and can greatly reduce the number of\niteratee executions. Sections of a chain sequence qualify for shortcut\nfusion if the section is applied to an array of at least `200` elements\nand any iteratees accept only one argument. The heuristic for whether a\nsection qualifies for shortcut fusion is subject to change.\n\nChaining is supported in custom builds as long as the `_#value` method is\ndirectly or indirectly included in the build.\n\nIn addition to lodash methods, wrappers have `Array` and `String` methods.\n\nThe wrapper `Array` methods are:\n`concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n\nThe wrapper `String` methods are:\n`replace` and `split`\n\nThe wrapper methods that support shortcut fusion are:\n`at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n`findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n`tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n\nThe chainable wrapper methods are:\n`after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n`before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n`commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n`curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n`difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n`dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n`flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n`flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n`functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n`intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n`keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n`memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n`nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n`overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n`pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n`pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n`remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n`slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n`takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n`toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n`union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n`unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n`valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n`zipObject`, `zipObjectDeep`, and `zipWith`\n\nThe wrapper methods that are **not** chainable by default are:\n`add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n`cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n`defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n`escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n`findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n`forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n`hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n`isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n`isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n`isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n`isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n`isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n`isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n`isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n`lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n`min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n`padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n`repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n`snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n`sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n`stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n`template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n`toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n`trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n`upperFirst`, `value`, and `words`",
      "name": "_",
      "kind": "class",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to wrap in a `lodash` instance.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new `lodash` wrapper instance."
        }
      ],
      "examples": [
        "function square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2, 3]);\n\n// Returns an unwrapped value.\nwrapped.reduce(_.add);\n// => 6\n\n// Returns a wrapped value.\nvar squares = wrapped.map(square);\n\n_.isArray(squares);\n// => false\n\n_.isArray(squares.value());\n// => true"
      ],
      "longname": "_",
      "scope": "global",
      "___id": "T000002R000635",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */",
      "meta": {
        "range": [
          57660,
          58029
        ],
        "filename": "lodash.js",
        "lineno": 1681,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003683",
          "name": "baseCreate",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The base implementation of `_.create` without support for assigning\nproperties to the created object.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inherit from.",
          "name": "proto"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "name": "baseCreate",
      "longname": "_.runInContext~baseCreate",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000637",
      "___s": true
    },
    {
      "comment": "/**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */",
      "meta": {
        "range": [
          58149,
          58211
        ],
        "filename": "lodash.js",
        "lineno": 1702,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003729",
          "name": "baseLodash",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "The function whose prototype chain sequence wrappers inherit from.",
      "access": "private",
      "name": "baseLodash",
      "longname": "_.runInContext~baseLodash",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "params": [],
      "___id": "T000002R000642",
      "___s": true
    },
    {
      "comment": "/**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */",
      "meta": {
        "range": [
          58441,
          58645
        ],
        "filename": "lodash.js",
        "lineno": 1713,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003732",
          "name": "LodashWrapper",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "chainAll"
          ]
        },
        "vars": {
          "this.__wrapped__": "_.runInContext~LodashWrapper#__wrapped__",
          "this.__actions__": "_.runInContext~LodashWrapper#__actions__",
          "this.__chain__": "_.runInContext~LodashWrapper#__chain__",
          "this.__index__": "_.runInContext~LodashWrapper#__index__",
          "this.__values__": "_.runInContext~LodashWrapper#__values__"
        }
      },
      "description": "The base constructor for creating `lodash` wrapper objects.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to wrap.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Enable explicit method chain sequences.",
          "name": "chainAll"
        }
      ],
      "name": "LodashWrapper",
      "longname": "_.runInContext~LodashWrapper",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000643",
      "___s": true
    },
    {
      "comment": "/**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB). Change the following template settings to use\n     * alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */",
      "meta": {
        "range": [
          58911,
          60024
        ],
        "filename": "lodash.js",
        "lineno": 1730,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003770",
          "name": "lodash.templateSettings",
          "type": "ObjectExpression",
          "funcscope": "_.runInContext",
          "value": "{\"undefined\":\"\"}",
          "paramnames": []
        }
      },
      "description": "By default, the template delimiters used by lodash are like those in\nembedded Ruby (ERB). Change the following template settings to use\nalternative delimiters.",
      "scope": "static",
      "memberof": "_.lodash",
      "type": {
        "names": [
          "Object"
        ]
      },
      "name": "templateSettings",
      "longname": "_.lodash.templateSettings",
      "kind": "member",
      "___id": "T000002R000649",
      "___s": true
    },
    {
      "comment": "/**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */",
      "meta": {
        "range": [
          59104,
          59122
        ],
        "filename": "lodash.js",
        "lineno": 1738,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003775",
          "name": "escape",
          "type": "Identifier",
          "value": "reEscape"
        }
      },
      "description": "Used to detect `data` property values to be HTML-escaped.",
      "memberof": "_.templateSettings",
      "type": {
        "names": [
          "RegExp"
        ]
      },
      "name": "escape",
      "longname": "_.templateSettings.escape",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000650",
      "___s": true
    },
    {
      "comment": "/**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */",
      "meta": {
        "range": [
          59268,
          59290
        ],
        "filename": "lodash.js",
        "lineno": 1746,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003777",
          "name": "evaluate",
          "type": "Identifier",
          "value": "reEvaluate"
        }
      },
      "description": "Used to detect code to be evaluated.",
      "memberof": "_.templateSettings",
      "type": {
        "names": [
          "RegExp"
        ]
      },
      "name": "evaluate",
      "longname": "_.templateSettings.evaluate",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000651",
      "___s": true
    },
    {
      "comment": "/**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */",
      "meta": {
        "range": [
          59448,
          59476
        ],
        "filename": "lodash.js",
        "lineno": 1754,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003779",
          "name": "interpolate",
          "type": "Identifier",
          "value": "reInterpolate"
        }
      },
      "description": "Used to detect `data` property values to inject.",
      "memberof": "_.templateSettings",
      "type": {
        "names": [
          "RegExp"
        ]
      },
      "name": "interpolate",
      "longname": "_.templateSettings.interpolate",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000652",
      "___s": true
    },
    {
      "comment": "/**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */",
      "meta": {
        "range": [
          59641,
          59655
        ],
        "filename": "lodash.js",
        "lineno": 1762,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003781",
          "name": "variable",
          "type": "Literal",
          "value": ""
        }
      },
      "description": "Used to reference the data object in the template text.",
      "memberof": "_.templateSettings",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "variable",
      "longname": "_.templateSettings.variable",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000653",
      "___s": true
    },
    {
      "comment": "/**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */",
      "meta": {
        "range": [
          59817,
          60018
        ],
        "filename": "lodash.js",
        "lineno": 1770,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003783",
          "name": "imports",
          "type": "ObjectExpression",
          "value": "{\"undefined\":\"\"}"
        }
      },
      "description": "Used to import variables into the compiled template.",
      "memberof": "_.templateSettings",
      "type": {
        "names": [
          "Object"
        ]
      },
      "name": "imports",
      "longname": "_.templateSettings.imports",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000654",
      "___s": true
    },
    {
      "comment": "/**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */",
      "meta": {
        "range": [
          59999,
          60010
        ],
        "filename": "lodash.js",
        "lineno": 1778,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003785",
          "name": "_",
          "type": "Identifier",
          "value": "lodash"
        }
      },
      "description": "A reference to the `lodash` function.",
      "memberof": "_.templateSettings.imports",
      "type": {
        "names": [
          "function"
        ]
      },
      "name": "_",
      "longname": "_.templateSettings.imports._",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R000655",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */",
      "meta": {
        "range": [
          60564,
          60820
        ],
        "filename": "lodash.js",
        "lineno": 1798,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100003821",
          "name": "LazyWrapper",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "this.__wrapped__": "_.runInContext~LazyWrapper#__wrapped__",
          "this.__actions__": "_.runInContext~LazyWrapper#__actions__",
          "this.__dir__": "_.runInContext~LazyWrapper#__dir__",
          "this.__filtered__": "_.runInContext~LazyWrapper#__filtered__",
          "this.__iteratees__": "_.runInContext~LazyWrapper#__iteratees__",
          "this.__takeCount__": "_.runInContext~LazyWrapper#__takeCount__",
          "this.__views__": "_.runInContext~LazyWrapper#__views__"
        }
      },
      "description": "Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.",
      "access": "private",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to wrap.",
          "name": "value"
        }
      ],
      "name": "LazyWrapper",
      "longname": "_.runInContext~LazyWrapper",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000660",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */",
      "meta": {
        "range": [
          60826,
          61025
        ],
        "filename": "lodash.js",
        "lineno": 1808,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Creates a clone of the lazy wrapper object.",
      "access": "private",
      "name": "clone",
      "memberof": "LazyWrapper",
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned `LazyWrapper` object."
        }
      ],
      "scope": "static",
      "longname": "LazyWrapper.clone",
      "kind": "member",
      "___id": "T000002R000668",
      "___s": true
    },
    {
      "comment": "/**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */",
      "meta": {
        "range": [
          61440,
          61645
        ],
        "filename": "lodash.js",
        "lineno": 1827,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Reverses the direction of lazy iteration.",
      "access": "private",
      "name": "reverse",
      "memberof": "LazyWrapper",
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new reversed `LazyWrapper` object."
        }
      ],
      "scope": "static",
      "longname": "LazyWrapper.reverse",
      "kind": "member",
      "___id": "T000002R000677",
      "___s": true
    },
    {
      "comment": "/**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */",
      "meta": {
        "range": [
          61931,
          62121
        ],
        "filename": "lodash.js",
        "lineno": 1847,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Extracts the unwrapped value from its lazy wrapper.",
      "access": "private",
      "name": "value",
      "memberof": "LazyWrapper",
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the unwrapped value."
        }
      ],
      "scope": "static",
      "longname": "LazyWrapper.value",
      "kind": "member",
      "___id": "T000002R000684",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */",
      "meta": {
        "range": [
          63989,
          64226
        ],
        "filename": "lodash.js",
        "lineno": 1918,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100004191",
          "name": "Hash",
          "type": "FunctionDeclaration",
          "paramnames": [
            "entries"
          ]
        },
        "vars": {
          "index": "_.runInContext~Hash~index",
          "length": "_.runInContext~Hash~length",
          "entry": "_.runInContext~Hash~entry"
        }
      },
      "description": "Creates a hash object.",
      "access": "private",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The key-value pairs to cache.",
          "name": "entries"
        }
      ],
      "name": "Hash",
      "longname": "_.runInContext~Hash",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000712",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */",
      "meta": {
        "range": [
          64232,
          64359
        ],
        "filename": "lodash.js",
        "lineno": 1929,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes all key-value entries from the hash.",
      "access": "private",
      "name": "clear",
      "memberof": "Hash",
      "scope": "static",
      "longname": "Hash.clear",
      "kind": "member",
      "___id": "T000002R000716",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */",
      "meta": {
        "range": [
          64481,
          64795
        ],
        "filename": "lodash.js",
        "lineno": 1941,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes `key` and its value from the hash.",
      "access": "private",
      "name": "delete",
      "memberof": "Hash",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The hash to modify.",
          "name": "hash"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to remove.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the entry was removed, else `false`."
        }
      ],
      "scope": "static",
      "longname": "Hash.delete",
      "kind": "member",
      "___id": "T000002R000720",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */",
      "meta": {
        "range": [
          64957,
          65169
        ],
        "filename": "lodash.js",
        "lineno": 1957,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Gets the hash value for `key`.",
      "access": "private",
      "name": "get",
      "memberof": "Hash",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to get.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the entry value."
        }
      ],
      "scope": "static",
      "longname": "Hash.get",
      "kind": "member",
      "___id": "T000002R000724",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */",
      "meta": {
        "range": [
          65439,
          65703
        ],
        "filename": "lodash.js",
        "lineno": 1975,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Checks if a hash value for `key` exists.",
      "access": "private",
      "name": "has",
      "memberof": "Hash",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the entry to check.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if an entry for `key` exists, else `false`."
        }
      ],
      "scope": "static",
      "longname": "Hash.has",
      "kind": "member",
      "___id": "T000002R000728",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */",
      "meta": {
        "range": [
          65861,
          66123
        ],
        "filename": "lodash.js",
        "lineno": 1989,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Sets the hash `key` to `value`.",
      "access": "private",
      "name": "set",
      "memberof": "Hash",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to set.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to set.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the hash instance."
        }
      ],
      "scope": "static",
      "longname": "Hash.set",
      "kind": "member",
      "___id": "T000002R000731",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */",
      "meta": {
        "range": [
          66799,
          67041
        ],
        "filename": "lodash.js",
        "lineno": 2022,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100004427",
          "name": "ListCache",
          "type": "FunctionDeclaration",
          "paramnames": [
            "entries"
          ]
        },
        "vars": {
          "index": "_.runInContext~ListCache~index",
          "length": "_.runInContext~ListCache~length",
          "entry": "_.runInContext~ListCache~entry"
        }
      },
      "description": "Creates an list cache object.",
      "access": "private",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The key-value pairs to cache.",
          "name": "entries"
        }
      ],
      "name": "ListCache",
      "longname": "_.runInContext~ListCache",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000741",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */",
      "meta": {
        "range": [
          67047,
          67185
        ],
        "filename": "lodash.js",
        "lineno": 2033,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes all key-value entries from the list cache.",
      "access": "private",
      "name": "clear",
      "memberof": "ListCache",
      "scope": "static",
      "longname": "ListCache.clear",
      "kind": "member",
      "___id": "T000002R000745",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */",
      "meta": {
        "range": [
          67276,
          67553
        ],
        "filename": "lodash.js",
        "lineno": 2045,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes `key` and its value from the list cache.",
      "access": "private",
      "name": "delete",
      "memberof": "ListCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to remove.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the entry was removed, else `false`."
        }
      ],
      "scope": "static",
      "longname": "ListCache.delete",
      "kind": "member",
      "___id": "T000002R000749",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */",
      "meta": {
        "range": [
          67919,
          68142
        ],
        "filename": "lodash.js",
        "lineno": 2071,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Gets the list cache value for `key`.",
      "access": "private",
      "name": "get",
      "memberof": "ListCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to get.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the entry value."
        }
      ],
      "scope": "static",
      "longname": "ListCache.get",
      "kind": "member",
      "___id": "T000002R000754",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */",
      "meta": {
        "range": [
          68316,
          68591
        ],
        "filename": "lodash.js",
        "lineno": 2087,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Checks if a list cache value for `key` exists.",
      "access": "private",
      "name": "has",
      "memberof": "ListCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the entry to check.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if an entry for `key` exists, else `false`."
        }
      ],
      "scope": "static",
      "longname": "ListCache.has",
      "kind": "member",
      "___id": "T000002R000758",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */",
      "meta": {
        "range": [
          68688,
          68967
        ],
        "filename": "lodash.js",
        "lineno": 2100,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Sets the list cache `key` to `value`.",
      "access": "private",
      "name": "set",
      "memberof": "ListCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to set.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to set.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the list cache instance."
        }
      ],
      "scope": "static",
      "longname": "ListCache.set",
      "kind": "member",
      "___id": "T000002R000760",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */",
      "meta": {
        "range": [
          69778,
          70019
        ],
        "filename": "lodash.js",
        "lineno": 2139,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100004671",
          "name": "MapCache",
          "type": "FunctionDeclaration",
          "paramnames": [
            "entries"
          ]
        },
        "vars": {
          "index": "_.runInContext~MapCache~index",
          "length": "_.runInContext~MapCache~length",
          "entry": "_.runInContext~MapCache~entry"
        }
      },
      "description": "Creates a map cache object to store key-value pairs.",
      "access": "private",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The key-value pairs to cache.",
          "name": "entries"
        }
      ],
      "name": "MapCache",
      "longname": "_.runInContext~MapCache",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000770",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */",
      "meta": {
        "range": [
          70025,
          70155
        ],
        "filename": "lodash.js",
        "lineno": 2150,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes all key-value entries from the map.",
      "access": "private",
      "name": "clear",
      "memberof": "MapCache",
      "scope": "static",
      "longname": "MapCache.clear",
      "kind": "member",
      "___id": "T000002R000774",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */",
      "meta": {
        "range": [
          70344,
          70613
        ],
        "filename": "lodash.js",
        "lineno": 2166,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes `key` and its value from the map.",
      "access": "private",
      "name": "delete",
      "memberof": "MapCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to remove.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the entry was removed, else `false`."
        }
      ],
      "scope": "static",
      "longname": "MapCache.delete",
      "kind": "member",
      "___id": "T000002R000781",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */",
      "meta": {
        "range": [
          70773,
          70988
        ],
        "filename": "lodash.js",
        "lineno": 2181,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Gets the map value for `key`.",
      "access": "private",
      "name": "get",
      "memberof": "MapCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to get.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the entry value."
        }
      ],
      "scope": "static",
      "longname": "MapCache.get",
      "kind": "member",
      "___id": "T000002R000785",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */",
      "meta": {
        "range": [
          71077,
          71344
        ],
        "filename": "lodash.js",
        "lineno": 2194,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Checks if a map value for `key` exists.",
      "access": "private",
      "name": "has",
      "memberof": "MapCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the entry to check.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if an entry for `key` exists, else `false`."
        }
      ],
      "scope": "static",
      "longname": "MapCache.has",
      "kind": "member",
      "___id": "T000002R000787",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */",
      "meta": {
        "range": [
          71433,
          71703
        ],
        "filename": "lodash.js",
        "lineno": 2207,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Sets the map `key` to `value`.",
      "access": "private",
      "name": "set",
      "memberof": "MapCache",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to set.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to set.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the map cache instance."
        }
      ],
      "scope": "static",
      "longname": "MapCache.set",
      "kind": "member",
      "___id": "T000002R000789",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */",
      "meta": {
        "range": [
          72435,
          72648
        ],
        "filename": "lodash.js",
        "lineno": 2243,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100004873",
          "name": "SetCache",
          "type": "FunctionDeclaration",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "index": "_.runInContext~SetCache~index",
          "length": "_.runInContext~SetCache~length",
          "this.__data__": "_.runInContext~SetCache#__data__"
        }
      },
      "description": "Creates an array cache object to store unique values.",
      "access": "private",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The values to cache.",
          "name": "values"
        }
      ],
      "name": "SetCache",
      "longname": "_.runInContext~SetCache",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000799",
      "___s": true
    },
    {
      "comment": "/**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */",
      "meta": {
        "range": [
          72654,
          72887
        ],
        "filename": "lodash.js",
        "lineno": 2253,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Adds `value` to the array cache.",
      "access": "private",
      "name": "add",
      "memberof": "SetCache",
      "alias": "push",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to cache.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cache instance."
        }
      ],
      "scope": "static",
      "longname": "SetCache.add",
      "kind": "member",
      "___id": "T000002R000803",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */",
      "meta": {
        "range": [
          73000,
          73249
        ],
        "filename": "lodash.js",
        "lineno": 2268,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Checks if `value` is in the array cache.",
      "access": "private",
      "name": "has",
      "memberof": "SetCache",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns `true` if `value` is found, else `false`."
        }
      ],
      "scope": "static",
      "longname": "SetCache.has",
      "kind": "member",
      "___id": "T000002R000805",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */",
      "meta": {
        "range": [
          73744,
          73861
        ],
        "filename": "lodash.js",
        "lineno": 2294,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100004960",
          "name": "Stack",
          "type": "FunctionDeclaration",
          "paramnames": [
            "entries"
          ]
        },
        "vars": {
          "data": "_.runInContext~Stack~data",
          "this.__data__": "_.runInContext~Stack#__data__",
          "this.size": "_.runInContext~Stack#size"
        }
      },
      "description": "Creates a stack cache object to store key-value pairs.",
      "access": "private",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The key-value pairs to cache.",
          "name": "entries"
        }
      ],
      "name": "Stack",
      "longname": "_.runInContext~Stack",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000810",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */",
      "meta": {
        "range": [
          73867,
          73996
        ],
        "filename": "lodash.js",
        "lineno": 2299,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes all key-value entries from the stack.",
      "access": "private",
      "name": "clear",
      "memberof": "Stack",
      "scope": "static",
      "longname": "Stack.clear",
      "kind": "member",
      "___id": "T000002R000814",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */",
      "meta": {
        "range": [
          74094,
          74362
        ],
        "filename": "lodash.js",
        "lineno": 2311,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Removes `key` and its value from the stack.",
      "access": "private",
      "name": "delete",
      "memberof": "Stack",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to remove.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the entry was removed, else `false`."
        }
      ],
      "scope": "static",
      "longname": "Stack.delete",
      "kind": "member",
      "___id": "T000002R000818",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */",
      "meta": {
        "range": [
          74529,
          74743
        ],
        "filename": "lodash.js",
        "lineno": 2328,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Gets the stack value for `key`.",
      "access": "private",
      "name": "get",
      "memberof": "Stack",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to get.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the entry value."
        }
      ],
      "scope": "static",
      "longname": "Stack.get",
      "kind": "member",
      "___id": "T000002R000823",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */",
      "meta": {
        "range": [
          74821,
          75087
        ],
        "filename": "lodash.js",
        "lineno": 2341,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Checks if a stack value for `key` exists.",
      "access": "private",
      "name": "has",
      "memberof": "Stack",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the entry to check.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if an entry for `key` exists, else `false`."
        }
      ],
      "scope": "static",
      "longname": "Stack.has",
      "kind": "member",
      "___id": "T000002R000825",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */",
      "meta": {
        "range": [
          75165,
          75436
        ],
        "filename": "lodash.js",
        "lineno": 2354,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Sets the stack `key` to `value`.",
      "access": "private",
      "name": "set",
      "memberof": "Stack",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to set.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to set.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the stack cache instance."
        }
      ],
      "scope": "static",
      "longname": "Stack.set",
      "kind": "member",
      "___id": "T000002R000827",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */",
      "meta": {
        "range": [
          76504,
          77647
        ],
        "filename": "lodash.js",
        "lineno": 2397,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005169",
          "name": "arrayLikeKeys",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "inherited"
          ]
        },
        "vars": {
          "isArr": "_.runInContext~arrayLikeKeys~isArr",
          "isArg": "_.runInContext~arrayLikeKeys~isArg",
          "isBuff": "_.runInContext~arrayLikeKeys~isBuff",
          "isType": "_.runInContext~arrayLikeKeys~isType",
          "skipIndexes": "_.runInContext~arrayLikeKeys~skipIndexes",
          "result": "_.runInContext~arrayLikeKeys~result",
          "length": "_.runInContext~arrayLikeKeys~length",
          "key": "_.runInContext~arrayLikeKeys~key"
        }
      },
      "description": "Creates an array of the enumerable property names of the array-like `value`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to query.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Specify returning inherited property names.",
          "name": "inherited"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names."
        }
      ],
      "name": "arrayLikeKeys",
      "longname": "_.runInContext~arrayLikeKeys",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000840",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */",
      "meta": {
        "range": [
          77844,
          77980
        ],
        "filename": "lodash.js",
        "lineno": 2431,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005298",
          "name": "arraySample",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.runInContext~arraySample~length"
        }
      },
      "description": "A specialized version of `_.sample` for arrays.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to sample.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the random element."
        }
      ],
      "name": "arraySample",
      "longname": "_.runInContext~arraySample",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000849",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */",
      "meta": {
        "range": [
          78245,
          78362
        ],
        "filename": "lodash.js",
        "lineno": 2444,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005320",
          "name": "arraySampleSize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "n"
          ]
        }
      },
      "description": "A specialized version of `_.sampleSize` for arrays.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to sample.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of elements to sample.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the random elements."
        }
      ],
      "name": "arraySampleSize",
      "longname": "_.runInContext~arraySampleSize",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000851",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */",
      "meta": {
        "range": [
          78569,
          78649
        ],
        "filename": "lodash.js",
        "lineno": 2455,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005338",
          "name": "arrayShuffle",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "A specialized version of `_.shuffle` for arrays.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to shuffle.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new shuffled array."
        }
      ],
      "name": "arrayShuffle",
      "longname": "_.runInContext~arrayShuffle",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000852",
      "___s": true
    },
    {
      "comment": "/**\n     * Used by `_.defaults` to customize its `_.assignIn` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */",
      "meta": {
        "range": [
          79026,
          79267
        ],
        "filename": "lodash.js",
        "lineno": 2469,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005348",
          "name": "assignInDefaults",
          "type": "FunctionDeclaration",
          "paramnames": [
            "objValue",
            "srcValue",
            "key",
            "object"
          ]
        }
      },
      "description": "Used by `_.defaults` to customize its `_.assignIn` use.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The destination value.",
          "name": "objValue"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The source value.",
          "name": "srcValue"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to assign.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The parent object of `objValue`.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the value to assign."
        }
      ],
      "name": "assignInDefaults",
      "longname": "_.runInContext~assignInDefaults",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000853",
      "___s": true
    },
    {
      "comment": "/**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */",
      "meta": {
        "range": [
          79571,
          79794
        ],
        "filename": "lodash.js",
        "lineno": 2486,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005379",
          "name": "assignMergeValue",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "key",
            "value"
          ]
        }
      },
      "description": "This function is like `assignValue` except that it doesn't assign\n`undefined` values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to assign.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to assign.",
          "name": "value"
        }
      ],
      "name": "assignMergeValue",
      "longname": "_.runInContext~assignMergeValue",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000854",
      "___s": true
    },
    {
      "comment": "/**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */",
      "meta": {
        "range": [
          80209,
          80471
        ],
        "filename": "lodash.js",
        "lineno": 2503,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005413",
          "name": "assignValue",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "key",
            "value"
          ]
        },
        "vars": {
          "objValue": "_.runInContext~assignValue~objValue"
        }
      },
      "description": "Assigns `value` to `key` of `object` if the existing value is not equivalent\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to assign.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to assign.",
          "name": "value"
        }
      ],
      "name": "assignValue",
      "longname": "_.runInContext~assignValue",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000855",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */",
      "meta": {
        "range": [
          80768,
          80968
        ],
        "filename": "lodash.js",
        "lineno": 2519,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005454",
          "name": "assocIndexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "key"
          ]
        },
        "vars": {
          "length": "_.runInContext~assocIndexOf~length"
        }
      },
      "description": "Gets the index at which the `key` is found in `array` of key-value pairs.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The key to search for.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "name": "assocIndexOf",
      "longname": "_.runInContext~assocIndexOf",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000857",
      "___s": true
    },
    {
      "comment": "/**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */",
      "meta": {
        "range": [
          81472,
          81709
        ],
        "filename": "lodash.js",
        "lineno": 2540,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005484",
          "name": "baseAggregator",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "setter",
            "iteratee",
            "accumulator"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Aggregates elements of `collection` on `accumulator` with keys transformed\nby `iteratee` and values set by `setter`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to set `accumulator` values.",
          "name": "setter"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The iteratee to transform keys.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The initial aggregated object.",
          "name": "accumulator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `accumulator`."
        }
      ],
      "name": "baseAggregator",
      "longname": "_.runInContext~baseAggregator",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000859",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          82016,
          82124
        ],
        "filename": "lodash.js",
        "lineno": 2556,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005511",
          "name": "baseAssign",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source"
          ]
        }
      },
      "description": "The base implementation of `_.assign` without support for multiple sources\nor `customizer` functions.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "baseAssign",
      "longname": "_.runInContext~baseAssign",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000860",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */",
      "meta": {
        "range": [
          82428,
          82747
        ],
        "filename": "lodash.js",
        "lineno": 2569,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005526",
          "name": "baseAssignValue",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "key",
            "value"
          ]
        },
        "vars": {
          "object[undefined]": null
        }
      },
      "description": "The base implementation of `assignValue` and `assignMergeValue` without\nvalue checks.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to assign.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to assign.",
          "name": "value"
        }
      ],
      "name": "baseAssignValue",
      "longname": "_.runInContext~baseAssignValue",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000861",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths of elements to pick.\n     * @returns {Array} Returns the picked elements.\n     */",
      "meta": {
        "range": [
          83053,
          83348
        ],
        "filename": "lodash.js",
        "lineno": 2590,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005560",
          "name": "baseAt",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "paths"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseAt~index",
          "isNil": "_.runInContext~baseAt~isNil",
          "length": "_.runInContext~baseAt~length",
          "result": "_.runInContext~baseAt~result",
          "result[undefined]": "_.runInContext~baseAt~result.undefined]"
        }
      },
      "description": "The base implementation of `_.at` without support for individual paths.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The property paths of elements to pick.",
          "name": "paths"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the picked elements."
        }
      ],
      "name": "baseAt",
      "longname": "_.runInContext~baseAt",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000867",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */",
      "meta": {
        "range": [
          83667,
          83971
        ],
        "filename": "lodash.js",
        "lineno": 2611,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005607",
          "name": "baseClamp",
          "type": "FunctionDeclaration",
          "paramnames": [
            "number",
            "lower",
            "upper"
          ]
        },
        "vars": {
          "number": "_.runInContext~baseClamp~number"
        }
      },
      "description": "The base implementation of `_.clamp` which doesn't coerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number to clamp.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The lower bound.",
          "name": "lower"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound.",
          "name": "upper"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the clamped number."
        }
      ],
      "name": "baseClamp",
      "longname": "_.runInContext~baseClamp",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000873",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {boolean} [isFull] Specify a clone including symbols.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */",
      "meta": {
        "range": [
          84600,
          86387
        ],
        "filename": "lodash.js",
        "lineno": 2637,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005648",
          "name": "baseClone",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "isDeep",
            "isFull",
            "customizer",
            "key",
            "object",
            "stack"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseClone~result",
          "isArr": "_.runInContext~baseClone~isArr",
          "tag": "_.runInContext~baseClone~tag",
          "isFunc": "_.runInContext~baseClone~isFunc",
          "stack": "_.runInContext~baseClone~stack",
          "stacked": "_.runInContext~baseClone~stacked",
          "props": "_.runInContext~baseClone~props",
          "": null
        }
      },
      "description": "The base implementation of `_.clone` and `_.cloneDeep` which tracks\ntraversed objects.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to clone.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a deep clone.",
          "name": "isDeep"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a clone including symbols.",
          "name": "isFull"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize cloning.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "The key of `value`.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The parent object of `value`.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Tracks traversed objects and their clone counterparts.",
          "name": "stack"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the cloned value."
        }
      ],
      "name": "baseClone",
      "longname": "_.runInContext~baseClone",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000876",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */",
      "meta": {
        "range": [
          86646,
          86810
        ],
        "filename": "lodash.js",
        "lineno": 2700,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005877",
          "name": "baseConforms",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source"
          ]
        },
        "vars": {
          "props": "_.runInContext~baseConforms~props",
          "": null
        }
      },
      "description": "The base implementation of `_.conforms` which doesn't clone `source`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property predicates to conform to.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new spec function."
        }
      ],
      "name": "baseConforms",
      "longname": "_.runInContext~baseConforms",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000890",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */",
      "meta": {
        "range": [
          87145,
          87591
        ],
        "filename": "lodash.js",
        "lineno": 2715,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005897",
          "name": "baseConformsTo",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source",
            "props"
          ]
        },
        "vars": {
          "length": "_.runInContext~baseConformsTo~length",
          "object": "_.runInContext~baseConformsTo~object",
          "key": "_.runInContext~baseConformsTo~key",
          "predicate": "_.runInContext~baseConformsTo~predicate",
          "value": "_.runInContext~baseConformsTo~value"
        }
      },
      "description": "The base implementation of `_.conformsTo` which accepts `props` to check.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property predicates to conform to.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `object` conforms, else `false`."
        }
      ],
      "name": "baseConformsTo",
      "longname": "_.runInContext~baseConformsTo",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000892",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */",
      "meta": {
        "range": [
          88008,
          88221
        ],
        "filename": "lodash.js",
        "lineno": 2743,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005962",
          "name": "baseDelay",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "wait",
            "args"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.delay` and `_.defer` which accepts `args`\nto provide to `func`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to delay.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of milliseconds to delay invocation.",
          "name": "wait"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arguments to provide to `func`.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number",
              "Object"
            ]
          },
          "description": "Returns the timer id or timeout object."
        }
      ],
      "name": "baseDelay",
      "longname": "_.runInContext~baseDelay",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000898",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */",
      "meta": {
        "range": [
          88717,
          89954
        ],
        "filename": "lodash.js",
        "lineno": 2761,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100005991",
          "name": "baseDifference",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "values",
            "iteratee",
            "comparator"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseDifference~index",
          "includes": "_.runInContext~baseDifference~includes",
          "isCommon": "_.runInContext~baseDifference~isCommon",
          "length": "_.runInContext~baseDifference~length",
          "result": "_.runInContext~baseDifference~result",
          "valuesLength": "_.runInContext~baseDifference~valuesLength",
          "values": "_.runInContext~baseDifference~values",
          "value": "_.runInContext~baseDifference~value",
          "computed": "_.runInContext~baseDifference~computed",
          "valuesIndex": "_.runInContext~baseDifference~valuesIndex"
        }
      },
      "description": "The base implementation of methods like `_.difference` without support\nfor excluding multiple arrays or iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The values to exclude.",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "name": "baseDifference",
      "longname": "_.runInContext~baseDifference",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000899",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */",
      "meta": {
        "range": [
          90285,
          90322
        ],
        "filename": "lodash.js",
        "lineno": 2814,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006150",
          "name": "baseEach",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The base implementation of `_.forEach` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "Returns `collection`."
        }
      ],
      "name": "baseEach",
      "longname": "_.runInContext~baseEach",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000916",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */",
      "meta": {
        "range": [
          90659,
          90712
        ],
        "filename": "lodash.js",
        "lineno": 2824,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006156",
          "name": "baseEachRight",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The base implementation of `_.forEachRight` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "Returns `collection`."
        }
      ],
      "name": "baseEachRight",
      "longname": "_.runInContext~baseEachRight",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000917",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */",
      "meta": {
        "range": [
          91090,
          91338
        ],
        "filename": "lodash.js",
        "lineno": 2835,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006162",
          "name": "baseEvery",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseEvery~result",
          "": null
        }
      },
      "description": "The base implementation of `_.every` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if all elements pass the predicate check,\n else `false`"
        }
      ],
      "name": "baseEvery",
      "longname": "_.runInContext~baseEvery",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000918",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */",
      "meta": {
        "range": [
          91767,
          92269
        ],
        "filename": "lodash.js",
        "lineno": 2854,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006194",
          "name": "baseExtremum",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee",
            "comparator"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseExtremum~index",
          "length": "_.runInContext~baseExtremum~length",
          "value": "_.runInContext~baseExtremum~value",
          "current": "_.runInContext~baseExtremum~current",
          "computed": "_.runInContext~baseExtremum~computed",
          "result": "_.runInContext~baseExtremum~result"
        }
      },
      "description": "The base implementation of methods like `_.max` and `_.min` which accepts a\n`comparator` to determine the extremum value.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The iteratee invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The comparator used to compare values.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the extremum value."
        }
      ],
      "name": "baseExtremum",
      "longname": "_.runInContext~baseExtremum",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000921",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */",
      "meta": {
        "range": [
          92646,
          93110
        ],
        "filename": "lodash.js",
        "lineno": 2883,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006258",
          "name": "baseFill",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "start",
            "end"
          ]
        },
        "vars": {
          "length": "_.runInContext~baseFill~length",
          "start": "_.runInContext~baseFill~start",
          "end": "_.runInContext~baseFill~end",
          "array[undefined]": null
        }
      },
      "description": "The base implementation of `_.fill` without an iteratee call guard.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to fill.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to fill `array` with.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start position.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length",
          "description": "The end position.",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "baseFill",
      "longname": "_.runInContext~baseFill",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000928",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */",
      "meta": {
        "range": [
          93440,
          93699
        ],
        "filename": "lodash.js",
        "lineno": 2909,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006343",
          "name": "baseFilter",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseFilter~result",
          "": null
        }
      },
      "description": "The base implementation of `_.filter` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new filtered array."
        }
      ],
      "name": "baseFilter",
      "longname": "_.runInContext~baseFilter",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000936",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */",
      "meta": {
        "range": [
          94226,
          94903
        ],
        "filename": "lodash.js",
        "lineno": 2930,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006376",
          "name": "baseFlatten",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "depth",
            "predicate",
            "isStrict",
            "result"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseFlatten~index",
          "length": "_.runInContext~baseFlatten~length",
          "predicate": "_.runInContext~baseFlatten~predicate",
          "result": "_.runInContext~baseFlatten~result",
          "value": "_.runInContext~baseFlatten~value",
          "result[undefined]": "_.runInContext~baseFlatten~result.undefined]"
        }
      },
      "description": "The base implementation of `_.flatten` with support for restricting flattening.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to flatten.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The maximum recursion depth.",
          "name": "depth"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": "isFlattenable",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Restrict to values that pass `predicate` checks.",
          "name": "isStrict"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The initial result value.",
          "name": "result"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new flattened array."
        }
      ],
      "name": "baseFlatten",
      "longname": "_.runInContext~baseFlatten",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000938",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          95442,
          95467
        ],
        "filename": "lodash.js",
        "lineno": 2964,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006463",
          "name": "baseFor",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The base implementation of `baseForOwn` which iterates over `object`\nproperties returned by `keysFunc` and invokes `iteratee` for each property.\nIteratee functions may exit iteration early by explicitly returning `false`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to get the keys of `object`.",
          "name": "keysFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "baseFor",
      "longname": "_.runInContext~baseFor",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000945",
      "___s": true
    },
    {
      "comment": "/**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          95873,
          95907
        ],
        "filename": "lodash.js",
        "lineno": 2976,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006468",
          "name": "baseForRight",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This function is like `baseFor` except that it iterates over properties\nin the opposite order.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to get the keys of `object`.",
          "name": "keysFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "baseForRight",
      "longname": "_.runInContext~baseForRight",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000946",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          96210,
          96311
        ],
        "filename": "lodash.js",
        "lineno": 2986,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006473",
          "name": "baseForOwn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        }
      },
      "description": "The base implementation of `_.forOwn` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "baseForOwn",
      "longname": "_.runInContext~baseForOwn",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000947",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          96618,
          96729
        ],
        "filename": "lodash.js",
        "lineno": 2998,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006486",
          "name": "baseForOwnRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        }
      },
      "description": "The base implementation of `_.forOwnRight` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "baseForOwnRight",
      "longname": "_.runInContext~baseForOwnRight",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000948",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */",
      "meta": {
        "range": [
          97074,
          97217
        ],
        "filename": "lodash.js",
        "lineno": 3011,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006499",
          "name": "baseFunctions",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "props"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.functions` which creates an array of\n`object` function property names filtered from `props`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The property names to filter.",
          "name": "props"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the function names."
        }
      ],
      "name": "baseFunctions",
      "longname": "_.runInContext~baseFunctions",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000949",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */",
      "meta": {
        "range": [
          97506,
          97825
        ],
        "filename": "lodash.js",
        "lineno": 3025,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006517",
          "name": "baseGet",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path"
          ]
        },
        "vars": {
          "path": "_.runInContext~baseGet~path",
          "index": "_.runInContext~baseGet~index",
          "length": "_.runInContext~baseGet~length",
          "object": "_.runInContext~baseGet~object"
        }
      },
      "description": "The base implementation of `_.get` without support for default values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to get.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the resolved value."
        }
      ],
      "name": "baseGet",
      "longname": "_.runInContext~baseGet",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000950",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */",
      "meta": {
        "range": [
          98334,
          98513
        ],
        "filename": "lodash.js",
        "lineno": 3048,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006573",
          "name": "baseGetAllKeys",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "keysFunc",
            "symbolsFunc"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseGetAllKeys~result"
        }
      },
      "description": "The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n`keysFunc` and `symbolsFunc` to get the enumerable property names and\nsymbols of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to get the keys of `object`.",
          "name": "keysFunc"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to get the symbols of `object`.",
          "name": "symbolsFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names and symbols."
        }
      ],
      "name": "baseGetAllKeys",
      "longname": "_.runInContext~baseGetAllKeys",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000955",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */",
      "meta": {
        "range": [
          98739,
          99015
        ],
        "filename": "lodash.js",
        "lineno": 3060,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006597",
          "name": "baseGetTag",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "value": "_.runInContext~baseGetTag~value"
        }
      },
      "description": "The base implementation of `getTag` without fallbacks for buggy environments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to query.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the `toStringTag`."
        }
      ],
      "name": "baseGetTag",
      "longname": "_.runInContext~baseGetTag",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000957",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */",
      "meta": {
        "range": [
          99330,
          99395
        ],
        "filename": "lodash.js",
        "lineno": 3079,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006632",
          "name": "baseGt",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "other"
          ]
        }
      },
      "description": "The base implementation of `_.gt` which doesn't coerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is greater than `other`,\n else `false`."
        }
      ],
      "name": "baseGt",
      "longname": "_.runInContext~baseGt",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000959",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */",
      "meta": {
        "range": [
          99690,
          99792
        ],
        "filename": "lodash.js",
        "lineno": 3091,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006641",
          "name": "baseHas",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "key"
          ]
        }
      },
      "description": "The base implementation of `_.has` without support for deep paths.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The key to check.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `key` exists, else `false`."
        }
      ],
      "name": "baseHas",
      "longname": "_.runInContext~baseHas",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000960",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */",
      "meta": {
        "range": [
          100089,
          100182
        ],
        "filename": "lodash.js",
        "lineno": 3103,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006657",
          "name": "baseHasIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "key"
          ]
        }
      },
      "description": "The base implementation of `_.hasIn` without support for deep paths.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The key to check.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `key` exists, else `false`."
        }
      ],
      "name": "baseHasIn",
      "longname": "_.runInContext~baseHasIn",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000961",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */",
      "meta": {
        "range": [
          100542,
          100670
        ],
        "filename": "lodash.js",
        "lineno": 3116,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006672",
          "name": "baseInRange",
          "type": "FunctionDeclaration",
          "paramnames": [
            "number",
            "start",
            "end"
          ]
        }
      },
      "description": "The base implementation of `_.inRange` which doesn't coerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number to check.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The start of the range.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The end of the range.",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `number` is in the range, else `false`."
        }
      ],
      "name": "baseInRange",
      "longname": "_.runInContext~baseInRange",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000962",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */",
      "meta": {
        "range": [
          101132,
          102748
        ],
        "filename": "lodash.js",
        "lineno": 3130,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006692",
          "name": "baseIntersection",
          "type": "FunctionDeclaration",
          "paramnames": [
            "arrays",
            "iteratee",
            "comparator"
          ]
        },
        "vars": {
          "includes": "_.runInContext~baseIntersection~includes",
          "length": "_.runInContext~baseIntersection~length",
          "othLength": "_.runInContext~baseIntersection~othLength",
          "othIndex": "_.runInContext~baseIntersection~othIndex",
          "caches": "_.runInContext~baseIntersection~caches",
          "maxLength": "_.runInContext~baseIntersection~maxLength",
          "result": "_.runInContext~baseIntersection~result",
          "array": "_.runInContext~baseIntersection~array",
          "caches[undefined]": "_.runInContext~baseIntersection~caches.undefined]",
          "index": "_.runInContext~baseIntersection~index",
          "seen": "_.runInContext~baseIntersection~seen",
          "value": "_.runInContext~baseIntersection~value",
          "computed": "_.runInContext~baseIntersection~computed",
          "cache": "_.runInContext~baseIntersection~cache"
        }
      },
      "description": "The base implementation of methods like `_.intersection`, without support\nfor iteratee shorthands, that accepts an array of arrays to inspect.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of shared values."
        }
      ],
      "name": "baseIntersection",
      "longname": "_.runInContext~baseIntersection",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000963",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */",
      "meta": {
        "range": [
          103258,
          103477
        ],
        "filename": "lodash.js",
        "lineno": 3194,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006906",
          "name": "baseInverter",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "setter",
            "iteratee",
            "accumulator"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.invert` and `_.invertBy` which inverts\n`object` with values transformed by `iteratee` and set by `setter`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to set `accumulator` values.",
          "name": "setter"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The iteratee to transform values.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The initial inverted object.",
          "name": "accumulator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `accumulator`."
        }
      ],
      "name": "baseInverter",
      "longname": "_.runInContext~baseInverter",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000983",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */",
      "meta": {
        "range": [
          103872,
          104189
        ],
        "filename": "lodash.js",
        "lineno": 3211,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006933",
          "name": "baseInvoke",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "args"
          ]
        },
        "vars": {
          "path": "_.runInContext~baseInvoke~path",
          "object": "_.runInContext~baseInvoke~object",
          "func": "_.runInContext~baseInvoke~func"
        }
      },
      "description": "The base implementation of `_.invoke` without support for individual\nmethod arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the method to invoke.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arguments to invoke the method with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the result of the invoked method."
        }
      ],
      "name": "baseInvoke",
      "longname": "_.runInContext~baseInvoke",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000984",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */",
      "meta": {
        "range": [
          104407,
          104512
        ],
        "filename": "lodash.js",
        "lineno": 3228,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100006989",
          "name": "baseIsArguments",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isArguments`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an `arguments` object,"
        }
      ],
      "name": "baseIsArguments",
      "longname": "_.runInContext~baseIsArguments",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000989",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */",
      "meta": {
        "range": [
          104770,
          104884
        ],
        "filename": "lodash.js",
        "lineno": 3239,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007003",
          "name": "baseIsArrayBuffer",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isArrayBuffer` without Node.js optimizations.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an array buffer, else `false`."
        }
      ],
      "name": "baseIsArrayBuffer",
      "longname": "_.runInContext~baseIsArrayBuffer",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000990",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */",
      "meta": {
        "range": [
          105133,
          105233
        ],
        "filename": "lodash.js",
        "lineno": 3250,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007017",
          "name": "baseIsDate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isDate` without Node.js optimizations.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a date object, else `false`."
        }
      ],
      "name": "baseIsDate",
      "longname": "_.runInContext~baseIsDate",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000991",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {boolean} [bitmask] The bitmask of comparison flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - Unordered comparison\n     *     2 - Partial comparison\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */",
      "meta": {
        "range": [
          105930,
          106292
        ],
        "filename": "lodash.js",
        "lineno": 3269,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007031",
          "name": "baseIsEqual",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "other",
            "customizer",
            "bitmask",
            "stack"
          ]
        }
      },
      "description": "The base implementation of `_.isEqual` which supports partial comparisons\nand tracks traversed objects.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize comparisons.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "The bitmask of comparison flags.\n The bitmask may be composed of the following flags:\n    1 - Unordered comparison\n    2 - Partial comparison",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Tracks traversed `value` and `other` objects.",
          "name": "stack"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the values are equivalent, else `false`."
        }
      ],
      "name": "baseIsEqual",
      "longname": "_.runInContext~baseIsEqual",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000992",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */",
      "meta": {
        "range": [
          107085,
          108842
        ],
        "filename": "lodash.js",
        "lineno": 3294,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007082",
          "name": "baseIsEqualDeep",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "other",
            "equalFunc",
            "customizer",
            "bitmask",
            "stack"
          ]
        },
        "vars": {
          "objIsArr": "_.runInContext~baseIsEqualDeep~objIsArr",
          "othIsArr": "_.runInContext~baseIsEqualDeep~othIsArr",
          "objTag": "_.runInContext~baseIsEqualDeep~objTag",
          "othTag": "_.runInContext~baseIsEqualDeep~othTag",
          "objIsObj": "_.runInContext~baseIsEqualDeep~objIsObj",
          "othIsObj": "_.runInContext~baseIsEqualDeep~othIsObj",
          "isSameTag": "_.runInContext~baseIsEqualDeep~isSameTag",
          "stack": "_.runInContext~baseIsEqualDeep~stack",
          "objIsWrapped": "_.runInContext~baseIsEqualDeep~objIsWrapped",
          "othIsWrapped": "_.runInContext~baseIsEqualDeep~othIsWrapped",
          "objUnwrapped": "_.runInContext~baseIsEqualDeep~objUnwrapped",
          "othUnwrapped": "_.runInContext~baseIsEqualDeep~othUnwrapped"
        }
      },
      "description": "A specialized version of `baseIsEqual` for arrays and objects which performs\ndeep comparisons and tracks traversed objects enabling objects with circular\nreferences to be compared.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to compare.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The other object to compare.",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to determine equivalents of values.",
          "name": "equalFunc"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize comparisons.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The bitmask of comparison flags. See `baseIsEqual`\n for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Tracks traversed `object` and `other` objects.",
          "name": "stack"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the objects are equivalent, else `false`."
        }
      ],
      "name": "baseIsEqualDeep",
      "longname": "_.runInContext~baseIsEqualDeep",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R000993",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */",
      "meta": {
        "range": [
          109082,
          109176
        ],
        "filename": "lodash.js",
        "lineno": 3351,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007310",
          "name": "baseIsMap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isMap` without Node.js optimizations.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a map, else `false`."
        }
      ],
      "name": "baseIsMap",
      "longname": "_.runInContext~baseIsMap",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001014",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */",
      "meta": {
        "range": [
          109675,
          110918
        ],
        "filename": "lodash.js",
        "lineno": 3365,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007324",
          "name": "baseIsMatch",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source",
            "matchData",
            "customizer"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseIsMatch~index",
          "length": "_.runInContext~baseIsMatch~length",
          "noCustomizer": "_.runInContext~baseIsMatch~noCustomizer",
          "object": "_.runInContext~baseIsMatch~object",
          "data": "_.runInContext~baseIsMatch~data",
          "key": "_.runInContext~baseIsMatch~key",
          "objValue": "_.runInContext~baseIsMatch~objValue",
          "srcValue": "_.runInContext~baseIsMatch~srcValue",
          "stack": "_.runInContext~baseIsMatch~stack",
          "result": "_.runInContext~baseIsMatch~result"
        }
      },
      "description": "The base implementation of `_.isMatch` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property values to match.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The property names, values, and compare flags to match.",
          "name": "matchData"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize comparisons.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `object` is a match, else `false`."
        }
      ],
      "name": "baseIsMatch",
      "longname": "_.runInContext~baseIsMatch",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001015",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */",
      "meta": {
        "range": [
          111175,
          111401
        ],
        "filename": "lodash.js",
        "lineno": 3417,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007481",
          "name": "baseIsNative",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "pattern": "_.runInContext~baseIsNative~pattern"
        }
      },
      "description": "The base implementation of `_.isNative` without bad shim checks.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a native function,\n else `false`."
        }
      ],
      "name": "baseIsNative",
      "longname": "_.runInContext~baseIsNative",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001027",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */",
      "meta": {
        "range": [
          111647,
          111751
        ],
        "filename": "lodash.js",
        "lineno": 3432,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007514",
          "name": "baseIsRegExp",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isRegExp` without Node.js optimizations.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a regexp, else `false`."
        }
      ],
      "name": "baseIsRegExp",
      "longname": "_.runInContext~baseIsRegExp",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001029",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */",
      "meta": {
        "range": [
          111991,
          112085
        ],
        "filename": "lodash.js",
        "lineno": 3443,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007528",
          "name": "baseIsSet",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isSet` without Node.js optimizations.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a set, else `false`."
        }
      ],
      "name": "baseIsSet",
      "longname": "_.runInContext~baseIsSet",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001030",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */",
      "meta": {
        "range": [
          112340,
          112487
        ],
        "filename": "lodash.js",
        "lineno": 3454,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007542",
          "name": "baseIsTypedArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.isTypedArray` without Node.js optimizations.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a typed array, else `false`."
        }
      ],
      "name": "baseIsTypedArray",
      "longname": "_.runInContext~baseIsTypedArray",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001031",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */",
      "meta": {
        "range": [
          112703,
          113224
        ],
        "filename": "lodash.js",
        "lineno": 3466,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007564",
          "name": "baseIteratee",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.iteratee`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The value to convert to an iteratee.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the iteratee."
        }
      ],
      "name": "baseIteratee",
      "longname": "_.runInContext~baseIteratee",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001032",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */",
      "meta": {
        "range": [
          113468,
          113780
        ],
        "filename": "lodash.js",
        "lineno": 3490,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007609",
          "name": "baseKeys",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseKeys~result",
          "key": "_.runInContext~baseKeys~key"
        }
      },
      "description": "The base implementation of `_.keys` which doesn't treat sparse arrays as dense.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names."
        }
      ],
      "name": "baseKeys",
      "longname": "_.runInContext~baseKeys",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001033",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */",
      "meta": {
        "range": [
          114026,
          114390
        ],
        "filename": "lodash.js",
        "lineno": 3510,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007655",
          "name": "baseKeysIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        },
        "vars": {
          "isProto": "_.runInContext~baseKeysIn~isProto",
          "result": "_.runInContext~baseKeysIn~result",
          "key": "_.runInContext~baseKeysIn~key"
        }
      },
      "description": "The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names."
        }
      ],
      "name": "baseKeysIn",
      "longname": "_.runInContext~baseKeysIn",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001036",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */",
      "meta": {
        "range": [
          114702,
          114767
        ],
        "filename": "lodash.js",
        "lineno": 3534,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007708",
          "name": "baseLt",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "other"
          ]
        }
      },
      "description": "The base implementation of `_.lt` which doesn't coerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is less than `other`,\n else `false`."
        }
      ],
      "name": "baseLt",
      "longname": "_.runInContext~baseLt",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001040",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */",
      "meta": {
        "range": [
          115091,
          115389
        ],
        "filename": "lodash.js",
        "lineno": 3546,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007717",
          "name": "baseMap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseMap~index",
          "result": "_.runInContext~baseMap~result",
          "": null
        }
      },
      "description": "The base implementation of `_.map` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new mapped array."
        }
      ],
      "name": "baseMap",
      "longname": "_.runInContext~baseMap",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001041",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */",
      "meta": {
        "range": [
          115638,
          115971
        ],
        "filename": "lodash.js",
        "lineno": 3563,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007761",
          "name": "baseMatches",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source"
          ]
        },
        "vars": {
          "matchData": "_.runInContext~baseMatches~matchData",
          "": null
        }
      },
      "description": "The base implementation of `_.matches` which doesn't clone `source`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property values to match.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new spec function."
        }
      ],
      "name": "baseMatches",
      "longname": "_.runInContext~baseMatches",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001045",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */",
      "meta": {
        "range": [
          116268,
          116731
        ],
        "filename": "lodash.js",
        "lineno": 3581,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007811",
          "name": "baseMatchesProperty",
          "type": "FunctionDeclaration",
          "paramnames": [
            "path",
            "srcValue"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The path of the property to get.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to match.",
          "name": "srcValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new spec function."
        }
      ],
      "name": "baseMatchesProperty",
      "longname": "_.runInContext~baseMatchesProperty",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001047",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */",
      "meta": {
        "range": [
          117196,
          117864
        ],
        "filename": "lodash.js",
        "lineno": 3604,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007864",
          "name": "baseMerge",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source",
            "srcIndex",
            "customizer",
            "stack"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The base implementation of `_.merge` without support for multiple sources.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index of `source`.",
          "name": "srcIndex"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize merged values.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Tracks traversed source values and their merged\n counterparts.",
          "name": "stack"
        }
      ],
      "name": "baseMerge",
      "longname": "_.runInContext~baseMerge",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001049",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */",
      "meta": {
        "range": [
          118565,
          120504
        ],
        "filename": "lodash.js",
        "lineno": 3641,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100007943",
          "name": "baseMergeDeep",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source",
            "key",
            "srcIndex",
            "mergeFunc",
            "customizer",
            "stack"
          ]
        },
        "vars": {
          "objValue": "_.runInContext~baseMergeDeep~objValue",
          "srcValue": "_.runInContext~baseMergeDeep~srcValue",
          "stacked": "_.runInContext~baseMergeDeep~stacked",
          "newValue": "_.runInContext~baseMergeDeep~newValue",
          "isCommon": "_.runInContext~baseMergeDeep~isCommon",
          "isArr": "_.runInContext~baseMergeDeep~isArr",
          "isBuff": "_.runInContext~baseMergeDeep~isBuff",
          "isTyped": "_.runInContext~baseMergeDeep~isTyped"
        }
      },
      "description": "A specialized version of `baseMerge` for arrays and objects which performs\ndeep merges and tracks traversed objects enabling objects with circular\nreferences to be merged.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the value to merge.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index of `source`.",
          "name": "srcIndex"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to merge values.",
          "name": "mergeFunc"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize assigned values.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Tracks traversed source values and their merged\n counterparts.",
          "name": "stack"
        }
      ],
      "name": "baseMergeDeep",
      "longname": "_.runInContext~baseMergeDeep",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001053",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */",
      "meta": {
        "range": [
          120788,
          120987
        ],
        "filename": "lodash.js",
        "lineno": 3711,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008172",
          "name": "baseNth",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "n"
          ]
        },
        "vars": {
          "length": "_.runInContext~baseNth~length",
          "n": "_.runInContext~baseNth~n"
        }
      },
      "description": "The base implementation of `_.nth` which doesn't coerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The index of the element to return.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the nth element of `array`."
        }
      ],
      "name": "baseNth",
      "longname": "_.runInContext~baseNth",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001074",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */",
      "meta": {
        "range": [
          121371,
          121943
        ],
        "filename": "lodash.js",
        "lineno": 3729,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008207",
          "name": "baseOrderBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratees",
            "orders"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseOrderBy~index",
          "iteratees": "_.runInContext~baseOrderBy~iteratees",
          "result": "_.runInContext~baseOrderBy~result",
          "": null
        }
      },
      "description": "The base implementation of `_.orderBy` without param guards.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "Array.<function()>",
              "Array.<Object>",
              "Array.<string>"
            ]
          },
          "description": "The iteratees to sort by.",
          "name": "iteratees"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The sort orders of `iteratees`.",
          "name": "orders"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new sorted array."
        }
      ],
      "name": "baseOrderBy",
      "longname": "_.runInContext~baseOrderBy",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001077",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     */",
      "meta": {
        "range": [
          122254,
          122427
        ],
        "filename": "lodash.js",
        "lineno": 3754,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008281",
          "name": "basePick",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "props"
          ]
        },
        "vars": {
          "object": "_.runInContext~basePick~object",
          "": null
        }
      },
      "description": "The base implementation of `_.pick` without support for individual\nproperty identifiers.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The property identifiers to pick.",
          "name": "props"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "name": "basePick",
      "longname": "_.runInContext~basePick",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001085",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick from.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */",
      "meta": {
        "range": [
          122797,
          123151
        ],
        "filename": "lodash.js",
        "lineno": 3770,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008305",
          "name": "basePickBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "props",
            "predicate"
          ]
        },
        "vars": {
          "index": "_.runInContext~basePickBy~index",
          "length": "_.runInContext~basePickBy~length",
          "result": "_.runInContext~basePickBy~result",
          "key": "_.runInContext~basePickBy~key",
          "value": "_.runInContext~basePickBy~value"
        }
      },
      "description": "The base implementation of  `_.pickBy` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "The property identifiers to pick from.",
          "name": "props"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per property.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "name": "basePickBy",
      "longname": "_.runInContext~basePickBy",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001087",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */",
      "meta": {
        "range": [
          123399,
          123517
        ],
        "filename": "lodash.js",
        "lineno": 3793,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008355",
          "name": "basePropertyDeep",
          "type": "FunctionDeclaration",
          "paramnames": [
            "path"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "A specialized version of `baseProperty` which supports deep paths.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to get.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new accessor function."
        }
      ],
      "name": "basePropertyDeep",
      "longname": "_.runInContext~basePropertyDeep",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001093",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */",
      "meta": {
        "range": [
          123943,
          124720
        ],
        "filename": "lodash.js",
        "lineno": 3810,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008368",
          "name": "basePullAll",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "values",
            "iteratee",
            "comparator"
          ]
        },
        "vars": {
          "indexOf": "_.runInContext~basePullAll~indexOf",
          "index": "_.runInContext~basePullAll~index",
          "length": "_.runInContext~basePullAll~length",
          "seen": "_.runInContext~basePullAll~seen",
          "values": "_.runInContext~basePullAll~values",
          "fromIndex": "_.runInContext~basePullAll~fromIndex",
          "value": "_.runInContext~basePullAll~value",
          "computed": "_.runInContext~basePullAll~computed"
        }
      },
      "description": "The base implementation of `_.pullAllBy` without support for iteratee\nshorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The values to remove.",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "basePullAll",
      "longname": "_.runInContext~basePullAll",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001094",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */",
      "meta": {
        "range": [
          125049,
          125756
        ],
        "filename": "lodash.js",
        "lineno": 3846,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008476",
          "name": "basePullAt",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "indexes"
          ]
        },
        "vars": {
          "length": "_.runInContext~basePullAt~length",
          "lastIndex": "_.runInContext~basePullAt~lastIndex",
          "index": "_.runInContext~basePullAt~index",
          "previous": "_.runInContext~basePullAt~previous",
          "path": "_.runInContext~basePullAt~path",
          "object": "_.runInContext~basePullAt~object"
        }
      },
      "description": "The base implementation of `_.pullAt` without support for individual\nindexes or capturing the removed elements.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The indexes of elements to remove.",
          "name": "indexes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "basePullAt",
      "longname": "_.runInContext~basePullAt",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001105",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */",
      "meta": {
        "range": [
          126051,
          126164
        ],
        "filename": "lodash.js",
        "lineno": 3882,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008574",
          "name": "baseRandom",
          "type": "FunctionDeclaration",
          "paramnames": [
            "lower",
            "upper"
          ]
        }
      },
      "description": "The base implementation of `_.random` without support for returning\nfloating-point numbers.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The lower bound.",
          "name": "lower"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound.",
          "name": "upper"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the random number."
        }
      ],
      "name": "baseRandom",
      "longname": "_.runInContext~baseRandom",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001112",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */",
      "meta": {
        "range": [
          126609,
          126926
        ],
        "filename": "lodash.js",
        "lineno": 3897,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008592",
          "name": "baseRange",
          "type": "FunctionDeclaration",
          "paramnames": [
            "start",
            "end",
            "step",
            "fromRight"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseRange~index",
          "length": "_.runInContext~baseRange~length",
          "result": "_.runInContext~baseRange~result",
          "result[undefined]": "_.runInContext~baseRange~result.undefined]",
          "start": "_.runInContext~baseRange~start"
        }
      },
      "description": "The base implementation of `_.range` and `_.rangeRight` which doesn't\ncoerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The start of the range.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The end of the range.",
          "name": "end"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to increment or decrement by.",
          "name": "step"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify iterating from right to left.",
          "name": "fromRight"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the range of numbers."
        }
      ],
      "name": "baseRange",
      "longname": "_.runInContext~baseRange",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001113",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */",
      "meta": {
        "range": [
          127221,
          127733
        ],
        "filename": "lodash.js",
        "lineno": 3917,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008643",
          "name": "baseRepeat",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "n"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseRepeat~result",
          "n": "_.runInContext~baseRepeat~n",
          "string": "_.runInContext~baseRepeat~string"
        }
      },
      "description": "The base implementation of `_.repeat` which doesn't coerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to repeat.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of times to repeat the string.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the repeated string."
        }
      ],
      "name": "baseRepeat",
      "longname": "_.runInContext~baseRepeat",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001119",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */",
      "meta": {
        "range": [
          128078,
          128186
        ],
        "filename": "lodash.js",
        "lineno": 3945,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008695",
          "name": "baseRest",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "start"
          ]
        }
      },
      "description": "The base implementation of `_.rest` which doesn't validate or coerce arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to apply a rest parameter to.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "func.length-1",
          "description": "The start position of the rest parameter.",
          "name": "start"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "name": "baseRest",
      "longname": "_.runInContext~baseRest",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001124",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */",
      "meta": {
        "range": [
          128391,
          128476
        ],
        "filename": "lodash.js",
        "lineno": 3956,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008711",
          "name": "baseSample",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection"
          ]
        }
      },
      "description": "The base implementation of `_.sample`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to sample.",
          "name": "collection"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the random element."
        }
      ],
      "name": "baseSample",
      "longname": "_.runInContext~baseSample",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001125",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */",
      "meta": {
        "range": [
          128770,
          128918
        ],
        "filename": "lodash.js",
        "lineno": 3968,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008721",
          "name": "baseSampleSize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "n"
          ]
        },
        "vars": {
          "array": "_.runInContext~baseSampleSize~array"
        }
      },
      "description": "The base implementation of `_.sampleSize` without param guards.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to sample.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of elements to sample.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the random elements."
        }
      ],
      "name": "baseSampleSize",
      "longname": "_.runInContext~baseSampleSize",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001126",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          129289,
          130144
        ],
        "filename": "lodash.js",
        "lineno": 3983,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008743",
          "name": "baseSet",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "value",
            "customizer"
          ]
        },
        "vars": {
          "path": "_.runInContext~baseSet~path",
          "index": "_.runInContext~baseSet~index",
          "length": "_.runInContext~baseSet~length",
          "lastIndex": "_.runInContext~baseSet~lastIndex",
          "nested": "_.runInContext~baseSet~nested",
          "key": "_.runInContext~baseSet~key",
          "newValue": "_.runInContext~baseSet~newValue",
          "objValue": "_.runInContext~baseSet~objValue"
        }
      },
      "description": "The base implementation of `_.set`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to set.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to set.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize path creation.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "baseSet",
      "longname": "_.runInContext~baseSet",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001128",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */",
      "meta": {
        "range": [
          130427,
          130541
        ],
        "filename": "lodash.js",
        "lineno": 4021,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008870",
          "name": "baseSetData",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "The base implementation of `setData` without support for hot loop shorting.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to associate metadata with.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The metadata.",
          "name": "data"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `func`."
        }
      ],
      "name": "baseSetData",
      "longname": "_.runInContext~baseSetData",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001140",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */",
      "meta": {
        "range": [
          130830,
          131084
        ],
        "filename": "lodash.js",
        "lineno": 4034,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008890",
          "name": "baseSetToString",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "The base implementation of `setToString` without support for hot loop shorting.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to modify.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The `toString` result.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `func`."
        }
      ],
      "name": "baseSetToString",
      "longname": "_.runInContext~baseSetToString",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001141",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */",
      "meta": {
        "range": [
          131300,
          131386
        ],
        "filename": "lodash.js",
        "lineno": 4050,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008916",
          "name": "baseShuffle",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection"
          ]
        }
      },
      "description": "The base implementation of `_.shuffle`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to shuffle.",
          "name": "collection"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new shuffled array."
        }
      ],
      "name": "baseShuffle",
      "longname": "_.runInContext~baseShuffle",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001146",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */",
      "meta": {
        "range": [
          131722,
          132222
        ],
        "filename": "lodash.js",
        "lineno": 4063,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100008926",
          "name": "baseSlice",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "start",
            "end"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseSlice~index",
          "length": "_.runInContext~baseSlice~length",
          "start": "_.runInContext~baseSlice~start",
          "end": "_.runInContext~baseSlice~end",
          "result": "_.runInContext~baseSlice~result",
          "result[undefined]": "_.runInContext~baseSlice~result.undefined]"
        }
      },
      "description": "The base implementation of `_.slice` without an iteratee call guard.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to slice.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start position.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length",
          "description": "The end position.",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "name": "baseSlice",
      "longname": "_.runInContext~baseSlice",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001147",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */",
      "meta": {
        "range": [
          132600,
          132842
        ],
        "filename": "lodash.js",
        "lineno": 4093,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009018",
          "name": "baseSome",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseSome~result",
          "": null
        }
      },
      "description": "The base implementation of `_.some` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if any element passes the predicate check,\n else `false`."
        }
      ],
      "name": "baseSome",
      "longname": "_.runInContext~baseSome",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001157",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */",
      "meta": {
        "range": [
          133415,
          134055
        ],
        "filename": "lodash.js",
        "lineno": 4115,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009050",
          "name": "baseSortedIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "retHighest"
          ]
        },
        "vars": {
          "low": "_.runInContext~baseSortedIndex~low",
          "high": "_.runInContext~baseSortedIndex~high",
          "mid": "_.runInContext~baseSortedIndex~mid",
          "computed": "_.runInContext~baseSortedIndex~computed"
        }
      },
      "description": "The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\nperforms a binary search of `array` to determine the index at which `value`\nshould be inserted into `array` in order to maintain its sort order.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The sorted array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to evaluate.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify returning the highest qualified index.",
          "name": "retHighest"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index at which `value` should be inserted\n into `array`."
        }
      ],
      "name": "baseSortedIndex",
      "longname": "_.runInContext~baseSortedIndex",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001160",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */",
      "meta": {
        "range": [
          134697,
          136091
        ],
        "filename": "lodash.js",
        "lineno": 4149,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009139",
          "name": "baseSortedIndexBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "iteratee",
            "retHighest"
          ]
        },
        "vars": {
          "value": "_.runInContext~baseSortedIndexBy~value",
          "low": "_.runInContext~baseSortedIndexBy~low",
          "high": "_.runInContext~baseSortedIndexBy~high",
          "valIsNaN": "_.runInContext~baseSortedIndexBy~valIsNaN",
          "valIsNull": "_.runInContext~baseSortedIndexBy~valIsNull",
          "valIsSymbol": "_.runInContext~baseSortedIndexBy~valIsSymbol",
          "valIsUndefined": "_.runInContext~baseSortedIndexBy~valIsUndefined",
          "mid": "_.runInContext~baseSortedIndexBy~mid",
          "computed": "_.runInContext~baseSortedIndexBy~computed",
          "othIsDefined": "_.runInContext~baseSortedIndexBy~othIsDefined",
          "othIsNull": "_.runInContext~baseSortedIndexBy~othIsNull",
          "othIsReflexive": "_.runInContext~baseSortedIndexBy~othIsReflexive",
          "othIsSymbol": "_.runInContext~baseSortedIndexBy~othIsSymbol",
          "setLow": "_.runInContext~baseSortedIndexBy~setLow"
        }
      },
      "description": "The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\nwhich invokes `iteratee` for `value` and each element of `array` to compute\ntheir sort ranking. The iteratee is invoked with one argument; (value).",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The sorted array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to evaluate.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify returning the highest qualified index.",
          "name": "retHighest"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index at which `value` should be inserted\n into `array`."
        }
      ],
      "name": "baseSortedIndexBy",
      "longname": "_.runInContext~baseSortedIndexBy",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001167",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */",
      "meta": {
        "range": [
          136436,
          136885
        ],
        "filename": "lodash.js",
        "lineno": 4198,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009317",
          "name": "baseSortedUniq",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseSortedUniq~index",
          "length": "_.runInContext~baseSortedUniq~length",
          "resIndex": "_.runInContext~baseSortedUniq~resIndex",
          "result": "_.runInContext~baseSortedUniq~result",
          "value": "_.runInContext~baseSortedUniq~value",
          "computed": "_.runInContext~baseSortedUniq~computed",
          "seen": "_.runInContext~baseSortedUniq~seen",
          "result[undefined]": "_.runInContext~baseSortedUniq~result.undefined]"
        }
      },
      "description": "The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\nsupport for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new duplicate free array."
        }
      ],
      "name": "baseSortedUniq",
      "longname": "_.runInContext~baseSortedUniq",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001189",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */",
      "meta": {
        "range": [
          137164,
          137346
        ],
        "filename": "lodash.js",
        "lineno": 4224,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009386",
          "name": "baseToNumber",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "The base implementation of `_.toNumber` which doesn't ensure correct\nconversions of binary, hexadecimal, or octal string values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to process.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the number."
        }
      ],
      "name": "baseToNumber",
      "longname": "_.runInContext~baseToNumber",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001198",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */",
      "meta": {
        "range": [
          137591,
          138146
        ],
        "filename": "lodash.js",
        "lineno": 4242,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009408",
          "name": "baseToString",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseToString~result"
        }
      },
      "description": "The base implementation of `_.toString` which doesn't convert nullish\nvalues to empty strings.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to process.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the string."
        }
      ],
      "name": "baseToString",
      "longname": "_.runInContext~baseToString",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001199",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */",
      "meta": {
        "range": [
          138533,
          139901
        ],
        "filename": "lodash.js",
        "lineno": 4267,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009466",
          "name": "baseUniq",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee",
            "comparator"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseUniq~index",
          "includes": "_.runInContext~baseUniq~includes",
          "length": "_.runInContext~baseUniq~length",
          "isCommon": "_.runInContext~baseUniq~isCommon",
          "result": "_.runInContext~baseUniq~result",
          "seen": "_.runInContext~baseUniq~seen",
          "set": "_.runInContext~baseUniq~set",
          "value": "_.runInContext~baseUniq~value",
          "computed": "_.runInContext~baseUniq~computed",
          "seenIndex": "_.runInContext~baseUniq~seenIndex"
        }
      },
      "description": "The base implementation of `_.uniqBy` without support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new duplicate free array."
        }
      ],
      "name": "baseUniq",
      "longname": "_.runInContext~baseUniq",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001201",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */",
      "meta": {
        "range": [
          140195,
          140458
        ],
        "filename": "lodash.js",
        "lineno": 4327,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009646",
          "name": "baseUnset",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path"
          ]
        },
        "vars": {
          "path": "_.runInContext~baseUnset~path",
          "object": "_.runInContext~baseUnset~object",
          "key": "_.runInContext~baseUnset~key"
        }
      },
      "description": "The base implementation of `_.unset`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to unset.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the property is deleted, else `false`."
        }
      ],
      "name": "baseUnset",
      "longname": "_.runInContext~baseUnset",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001219",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          140869,
          141011
        ],
        "filename": "lodash.js",
        "lineno": 4345,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009696",
          "name": "baseUpdate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "updater",
            "customizer"
          ]
        }
      },
      "description": "The base implementation of `_.update`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to update.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to produce the updated value.",
          "name": "updater"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize path creation.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "baseUpdate",
      "longname": "_.runInContext~baseUpdate",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001223",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */",
      "meta": {
        "range": [
          141513,
          141954
        ],
        "filename": "lodash.js",
        "lineno": 4360,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009715",
          "name": "baseWhile",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate",
            "isDrop",
            "fromRight"
          ]
        },
        "vars": {
          "length": "_.runInContext~baseWhile~length",
          "index": "_.runInContext~baseWhile~index"
        }
      },
      "description": "The base implementation of methods like `_.dropWhile` and `_.takeWhile`\nwithout support for iteratee shorthands.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify dropping elements instead of taking them.",
          "name": "isDrop"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify iterating from right to left.",
          "name": "fromRight"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "name": "baseWhile",
      "longname": "_.runInContext~baseWhile",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001224",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */",
      "meta": {
        "range": [
          142398,
          142720
        ],
        "filename": "lodash.js",
        "lineno": 4382,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009782",
          "name": "baseWrapperValue",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "actions"
          ]
        },
        "vars": {
          "result": "_.runInContext~baseWrapperValue~result",
          "": null
        }
      },
      "description": "The base implementation of `wrapperValue` which returns the result of\nperforming a sequence of actions on the unwrapped `value`, where each\nsuccessive action is supplied the return value of the previous.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The unwrapped value.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Actions to perform to resolve the unwrapped value.",
          "name": "actions"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the resolved value."
        }
      ],
      "name": "baseWrapperValue",
      "longname": "_.runInContext~baseWrapperValue",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001227",
      "___s": true
    },
    {
      "comment": "/**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */",
      "meta": {
        "range": [
          143166,
          143645
        ],
        "filename": "lodash.js",
        "lineno": 4402,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009829",
          "name": "baseXor",
          "type": "FunctionDeclaration",
          "paramnames": [
            "arrays",
            "iteratee",
            "comparator"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseXor~index",
          "length": "_.runInContext~baseXor~length",
          "result": "_.runInContext~baseXor~result"
        }
      },
      "description": "The base implementation of methods like `_.xor`, without support for\niteratee shorthands, that accepts an array of arrays to inspect.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of values."
        }
      ],
      "name": "baseXor",
      "longname": "_.runInContext~baseXor",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001230",
      "___s": true
    },
    {
      "comment": "/**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */",
      "meta": {
        "range": [
          144000,
          144353
        ],
        "filename": "lodash.js",
        "lineno": 4426,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009890",
          "name": "baseZipObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "props",
            "values",
            "assignFunc"
          ]
        },
        "vars": {
          "index": "_.runInContext~baseZipObject~index",
          "length": "_.runInContext~baseZipObject~length",
          "valsLength": "_.runInContext~baseZipObject~valsLength",
          "result": "_.runInContext~baseZipObject~result",
          "value": "_.runInContext~baseZipObject~value"
        }
      },
      "description": "This base implementation of `_.zipObject` which assigns values using `assignFunc`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The property identifiers.",
          "name": "props"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The property values.",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to assign values.",
          "name": "assignFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "name": "baseZipObject",
      "longname": "_.runInContext~baseZipObject",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001234",
      "___s": true
    },
    {
      "comment": "/**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */",
      "meta": {
        "range": [
          144584,
          144679
        ],
        "filename": "lodash.js",
        "lineno": 4446,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009941",
          "name": "castArrayLikeObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Casts `value` to an empty array if it's not an array like object.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to inspect.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "Returns the cast array-like object."
        }
      ],
      "name": "castArrayLikeObject",
      "longname": "_.runInContext~castArrayLikeObject",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001240",
      "___s": true
    },
    {
      "comment": "/**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */",
      "meta": {
        "range": [
          144879,
          144975
        ],
        "filename": "lodash.js",
        "lineno": 4457,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009952",
          "name": "castFunction",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Casts `value` to `identity` if it's not a function.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to inspect.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns cast function."
        }
      ],
      "name": "castFunction",
      "longname": "_.runInContext~castFunction",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001241",
      "___s": true
    },
    {
      "comment": "/**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast property path array.\n     */",
      "meta": {
        "range": [
          145182,
          145273
        ],
        "filename": "lodash.js",
        "lineno": 4468,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009964",
          "name": "castPath",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Casts `value` to a path array if it's not one.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to inspect.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the cast property path array."
        }
      ],
      "name": "castPath",
      "longname": "_.runInContext~castPath",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001242",
      "___s": true
    },
    {
      "comment": "/**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */",
      "meta": {
        "range": [
          145574,
          145593
        ],
        "filename": "lodash.js",
        "lineno": 4481,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009978",
          "name": "castRest",
          "type": "Identifier",
          "value": "baseRest"
        }
      },
      "description": "A `baseRest` alias which can be replaced with `identity` by module\nreplacement plugins.",
      "access": "private",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to apply a rest parameter to.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "name": "castRest",
      "longname": "_.runInContext~castRest",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001243",
      "___s": true
    },
    {
      "comment": "/**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */",
      "meta": {
        "range": [
          145894,
          146097
        ],
        "filename": "lodash.js",
        "lineno": 4492,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100009981",
          "name": "castSlice",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "start",
            "end"
          ]
        },
        "vars": {
          "length": "_.runInContext~castSlice~length",
          "end": "_.runInContext~castSlice~end"
        }
      },
      "description": "Casts `array` to a slice if it's needed.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The start position.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length",
          "description": "The end position.",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the cast slice."
        }
      ],
      "name": "castSlice",
      "longname": "_.runInContext~castSlice",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001244",
      "___s": true
    },
    {
      "comment": "/**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */",
      "meta": {
        "range": [
          146322,
          146412
        ],
        "filename": "lodash.js",
        "lineno": 4504,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010017",
          "name": "clearTimeout",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Object"
            ]
          },
          "description": "The timer id or timeout object of the timer to clear.",
          "name": "id"
        }
      ],
      "name": "clearTimeout",
      "longname": "_.runInContext~clearTimeout",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001247",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */",
      "meta": {
        "range": [
          146653,
          146926
        ],
        "filename": "lodash.js",
        "lineno": 4516,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010030",
          "name": "cloneBuffer",
          "type": "FunctionDeclaration",
          "paramnames": [
            "buffer",
            "isDeep"
          ]
        },
        "vars": {
          "length": "_.runInContext~cloneBuffer~length",
          "result": "_.runInContext~cloneBuffer~result"
        }
      },
      "description": "Creates a clone of  `buffer`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "The buffer to clone.",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a deep clone.",
          "name": "isDeep"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Returns the cloned buffer."
        }
      ],
      "name": "cloneBuffer",
      "longname": "_.runInContext~cloneBuffer",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001248",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */",
      "meta": {
        "range": [
          147142,
          147344
        ],
        "filename": "lodash.js",
        "lineno": 4534,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010069",
          "name": "cloneArrayBuffer",
          "type": "FunctionDeclaration",
          "paramnames": [
            "arrayBuffer"
          ]
        },
        "vars": {
          "result": "_.runInContext~cloneArrayBuffer~result"
        }
      },
      "description": "Creates a clone of `arrayBuffer`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "ArrayBuffer"
            ]
          },
          "description": "The array buffer to clone.",
          "name": "arrayBuffer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "ArrayBuffer"
            ]
          },
          "description": "Returns the cloned array buffer."
        }
      ],
      "name": "cloneArrayBuffer",
      "longname": "_.runInContext~cloneArrayBuffer",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001251",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */",
      "meta": {
        "range": [
          147593,
          147811
        ],
        "filename": "lodash.js",
        "lineno": 4548,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010095",
          "name": "cloneDataView",
          "type": "FunctionDeclaration",
          "paramnames": [
            "dataView",
            "isDeep"
          ]
        },
        "vars": {
          "buffer": "_.runInContext~cloneDataView~buffer"
        }
      },
      "description": "Creates a clone of `dataView`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The data view to clone.",
          "name": "dataView"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a deep clone.",
          "name": "isDeep"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned data view."
        }
      ],
      "name": "cloneDataView",
      "longname": "_.runInContext~cloneDataView",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001253",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */",
      "meta": {
        "range": [
          148103,
          148298
        ],
        "filename": "lodash.js",
        "lineno": 4562,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010125",
          "name": "cloneMap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "map",
            "isDeep",
            "cloneFunc"
          ]
        },
        "vars": {
          "array": "_.runInContext~cloneMap~array"
        }
      },
      "description": "Creates a clone of `map`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The map to clone.",
          "name": "map"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to clone values.",
          "name": "cloneFunc"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a deep clone.",
          "name": "isDeep"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned map."
        }
      ],
      "name": "cloneMap",
      "longname": "_.runInContext~cloneMap",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001255",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */",
      "meta": {
        "range": [
          148482,
          148662
        ],
        "filename": "lodash.js",
        "lineno": 4574,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010154",
          "name": "cloneRegExp",
          "type": "FunctionDeclaration",
          "paramnames": [
            "regexp"
          ]
        },
        "vars": {
          "result": "_.runInContext~cloneRegExp~result",
          "result.lastIndex": "_.runInContext~cloneRegExp~result.lastIndex"
        }
      },
      "description": "Creates a clone of `regexp`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The regexp to clone.",
          "name": "regexp"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned regexp."
        }
      ],
      "name": "cloneRegExp",
      "longname": "_.runInContext~cloneRegExp",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001257",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */",
      "meta": {
        "range": [
          148954,
          149149
        ],
        "filename": "lodash.js",
        "lineno": 4589,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010183",
          "name": "cloneSet",
          "type": "FunctionDeclaration",
          "paramnames": [
            "set",
            "isDeep",
            "cloneFunc"
          ]
        },
        "vars": {
          "array": "_.runInContext~cloneSet~array"
        }
      },
      "description": "Creates a clone of `set`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The set to clone.",
          "name": "set"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to clone values.",
          "name": "cloneFunc"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a deep clone.",
          "name": "isDeep"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned set."
        }
      ],
      "name": "cloneSet",
      "longname": "_.runInContext~cloneSet",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001260",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */",
      "meta": {
        "range": [
          149358,
          149464
        ],
        "filename": "lodash.js",
        "lineno": 4601,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010212",
          "name": "cloneSymbol",
          "type": "FunctionDeclaration",
          "paramnames": [
            "symbol"
          ]
        }
      },
      "description": "Creates a clone of the `symbol` object.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The symbol object to clone.",
          "name": "symbol"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned symbol object."
        }
      ],
      "name": "cloneSymbol",
      "longname": "_.runInContext~cloneSymbol",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001262",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */",
      "meta": {
        "range": [
          149721,
          149949
        ],
        "filename": "lodash.js",
        "lineno": 4613,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010227",
          "name": "cloneTypedArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "typedArray",
            "isDeep"
          ]
        },
        "vars": {
          "buffer": "_.runInContext~cloneTypedArray~buffer"
        }
      },
      "description": "Creates a clone of `typedArray`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The typed array to clone.",
          "name": "typedArray"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a deep clone.",
          "name": "isDeep"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned typed array."
        }
      ],
      "name": "cloneTypedArray",
      "longname": "_.runInContext~cloneTypedArray",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001263",
      "___s": true
    },
    {
      "comment": "/**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */",
      "meta": {
        "range": [
          150219,
          151358
        ],
        "filename": "lodash.js",
        "lineno": 4626,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010257",
          "name": "compareAscending",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "other"
          ]
        },
        "vars": {
          "valIsDefined": "_.runInContext~compareAscending~valIsDefined",
          "valIsNull": "_.runInContext~compareAscending~valIsNull",
          "valIsReflexive": "_.runInContext~compareAscending~valIsReflexive",
          "valIsSymbol": "_.runInContext~compareAscending~valIsSymbol",
          "othIsDefined": "_.runInContext~compareAscending~othIsDefined",
          "othIsNull": "_.runInContext~compareAscending~othIsNull",
          "othIsReflexive": "_.runInContext~compareAscending~othIsReflexive",
          "othIsSymbol": "_.runInContext~compareAscending~othIsSymbol"
        }
      },
      "description": "Compares values to sort them in ascending order.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the sort order indicator for `value`."
        }
      ],
      "name": "compareAscending",
      "longname": "_.runInContext~compareAscending",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001265",
      "___s": true
    },
    {
      "comment": "/**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */",
      "meta": {
        "range": [
          151987,
          153023
        ],
        "filename": "lodash.js",
        "lineno": 4670,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010396",
          "name": "compareMultiple",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "other",
            "orders"
          ]
        },
        "vars": {
          "index": "_.runInContext~compareMultiple~index",
          "objCriteria": "_.runInContext~compareMultiple~objCriteria",
          "othCriteria": "_.runInContext~compareMultiple~othCriteria",
          "length": "_.runInContext~compareMultiple~length",
          "ordersLength": "_.runInContext~compareMultiple~ordersLength",
          "result": "_.runInContext~compareMultiple~result",
          "order": "_.runInContext~compareMultiple~order"
        }
      },
      "description": "Used by `_.orderBy` to compare multiple properties of a value to another\nand stable sort them.\n\nIf `orders` is unspecified, all values are sorted in ascending order. Otherwise,\nspecify an order of \"desc\" for descending or \"asc\" for ascending sort order\nof corresponding values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to compare.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The other object to compare.",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "Array.<boolean>",
              "Array.<string>"
            ]
          },
          "description": "The order to sort by for each property.",
          "name": "orders"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the sort order indicator for `object`."
        }
      ],
      "name": "compareMultiple",
      "longname": "_.runInContext~compareMultiple",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001274",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */",
      "meta": {
        "range": [
          153566,
          154332
        ],
        "filename": "lodash.js",
        "lineno": 4708,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010478",
          "name": "composeArgs",
          "type": "FunctionDeclaration",
          "paramnames": [
            "args",
            "partials",
            "holders",
            "isCurried"
          ]
        },
        "vars": {
          "argsIndex": "_.runInContext~composeArgs~argsIndex",
          "argsLength": "_.runInContext~composeArgs~argsLength",
          "holdersLength": "_.runInContext~composeArgs~holdersLength",
          "leftIndex": "_.runInContext~composeArgs~leftIndex",
          "leftLength": "_.runInContext~composeArgs~leftLength",
          "rangeLength": "_.runInContext~composeArgs~rangeLength",
          "result": "_.runInContext~composeArgs~result",
          "isUncurried": "_.runInContext~composeArgs~isUncurried",
          "result[undefined]": "_.runInContext~composeArgs~result.undefined]"
        }
      },
      "description": "Creates an array that is the composition of partially applied arguments,\nplaceholders, and provided arguments into a single array of arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The provided arguments.",
          "name": "args"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arguments to prepend to those provided.",
          "name": "partials"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The `partials` placeholder indexes.",
          "name": "holders"
        }
      ],
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{boolean} [isCurried] Specify composing for a curried function.",
          "value": "{boolean} [isCurried] Specify composing for a curried function."
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of composed arguments."
        }
      ],
      "name": "composeArgs",
      "longname": "_.runInContext~composeArgs",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001282",
      "___s": true
    },
    {
      "comment": "/**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */",
      "meta": {
        "range": [
          154838,
          155709
        ],
        "filename": "lodash.js",
        "lineno": 4743,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010581",
          "name": "composeArgsRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "args",
            "partials",
            "holders",
            "isCurried"
          ]
        },
        "vars": {
          "argsIndex": "_.runInContext~composeArgsRight~argsIndex",
          "argsLength": "_.runInContext~composeArgsRight~argsLength",
          "holdersIndex": "_.runInContext~composeArgsRight~holdersIndex",
          "holdersLength": "_.runInContext~composeArgsRight~holdersLength",
          "rightIndex": "_.runInContext~composeArgsRight~rightIndex",
          "rightLength": "_.runInContext~composeArgsRight~rightLength",
          "rangeLength": "_.runInContext~composeArgsRight~rangeLength",
          "result": "_.runInContext~composeArgsRight~result",
          "isUncurried": "_.runInContext~composeArgsRight~isUncurried",
          "result[undefined]": "_.runInContext~composeArgsRight~result.undefined]",
          "offset": "_.runInContext~composeArgsRight~offset"
        }
      },
      "description": "This function is like `composeArgs` except that the arguments composition\nis tailored for `_.partialRight`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The provided arguments.",
          "name": "args"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arguments to append to those provided.",
          "name": "partials"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The `partials` placeholder indexes.",
          "name": "holders"
        }
      ],
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{boolean} [isCurried] Specify composing for a curried function.",
          "value": "{boolean} [isCurried] Specify composing for a curried function."
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of composed arguments."
        }
      ],
      "name": "composeArgsRight",
      "longname": "_.runInContext~composeArgsRight",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001294",
      "___s": true
    },
    {
      "comment": "/**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */",
      "meta": {
        "range": [
          155966,
          156203
        ],
        "filename": "lodash.js",
        "lineno": 4777,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010697",
          "name": "copyArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source",
            "array"
          ]
        },
        "vars": {
          "index": "_.runInContext~copyArray~index",
          "length": "_.runInContext~copyArray~length",
          "array": "_.runInContext~copyArray~array",
          "array[undefined]": "_.runInContext~copyArray~array.undefined]"
        }
      },
      "description": "Copies the values of `source` to `array`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to copy values from.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The array to copy values to.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "copyArray",
      "longname": "_.runInContext~copyArray",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001308",
      "___s": true
    },
    {
      "comment": "/**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          156617,
          157243
        ],
        "filename": "lodash.js",
        "lineno": 4798,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010736",
          "name": "copyObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source",
            "props",
            "object",
            "customizer"
          ]
        },
        "vars": {
          "isNew": "_.runInContext~copyObject~isNew",
          "object": "_.runInContext~copyObject~object",
          "index": "_.runInContext~copyObject~index",
          "length": "_.runInContext~copyObject~length",
          "key": "_.runInContext~copyObject~key",
          "newValue": "_.runInContext~copyObject~newValue"
        }
      },
      "description": "Copies properties of `source` to `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to copy properties from.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The property identifiers to copy.",
          "name": "props"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "The object to copy properties to.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize copied values.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "copyObject",
      "longname": "_.runInContext~copyObject",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001313",
      "___s": true
    },
    {
      "comment": "/**\n     * Copies own symbol properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */",
      "meta": {
        "range": [
          157521,
          157626
        ],
        "filename": "lodash.js",
        "lineno": 4832,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010822",
          "name": "copySymbols",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source",
            "object"
          ]
        }
      },
      "description": "Copies own symbol properties of `source` to `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to copy symbols from.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "The object to copy symbols to.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "name": "copySymbols",
      "longname": "_.runInContext~copySymbols",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001321",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */",
      "meta": {
        "range": [
          157926,
          158251
        ],
        "filename": "lodash.js",
        "lineno": 4844,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010835",
          "name": "createAggregator",
          "type": "FunctionDeclaration",
          "paramnames": [
            "setter",
            "initializer"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function like `_.groupBy`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to set accumulator values.",
          "name": "setter"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The accumulator object initializer.",
          "name": "initializer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new aggregator function."
        }
      ],
      "name": "createAggregator",
      "longname": "_.runInContext~createAggregator",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001322",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */",
      "meta": {
        "range": [
          158466,
          159289
        ],
        "filename": "lodash.js",
        "lineno": 4860,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010871",
          "name": "createAssigner",
          "type": "FunctionDeclaration",
          "paramnames": [
            "assigner"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function like `_.assign`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to assign values.",
          "name": "assigner"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new assigner function."
        }
      ],
      "name": "createAssigner",
      "longname": "_.runInContext~createAssigner",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001325",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */",
      "meta": {
        "range": [
          159600,
          160205
        ],
        "filename": "lodash.js",
        "lineno": 4894,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100010989",
          "name": "createBaseEach",
          "type": "FunctionDeclaration",
          "paramnames": [
            "eachFunc",
            "fromRight"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a `baseEach` or `baseEachRight` function.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to iterate over a collection.",
          "name": "eachFunc"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify iterating from right to left.",
          "name": "fromRight"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new base function."
        }
      ],
      "name": "createBaseEach",
      "longname": "_.runInContext~createBaseEach",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001335",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */",
      "meta": {
        "range": [
          160456,
          160909
        ],
        "filename": "lodash.js",
        "lineno": 4922,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011059",
          "name": "createBaseFor",
          "type": "FunctionDeclaration",
          "paramnames": [
            "fromRight"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a base function for methods like `_.forIn` and `_.forOwn`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify iterating from right to left.",
          "name": "fromRight"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new base function."
        }
      ],
      "name": "createBaseFor",
      "longname": "_.runInContext~createBaseFor",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001339",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */",
      "meta": {
        "range": [
          161321,
          161649
        ],
        "filename": "lodash.js",
        "lineno": 4949,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011117",
          "name": "createBind",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "bitmask",
            "thisArg"
          ]
        },
        "vars": {
          "isBind": "_.runInContext~createBind~isBind",
          "Ctor": "_.runInContext~createBind~Ctor",
          "wrapper": "_.runInContext~createBind~wrapper"
        }
      },
      "description": "Creates a function that wraps `func` to invoke it with the optional `this`\nbinding of `thisArg`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags. See `createWrap` for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The `this` binding of `func`.",
          "name": "thisArg"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new wrapped function."
        }
      ],
      "name": "createBind",
      "longname": "_.runInContext~createBind",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001345",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */",
      "meta": {
        "range": [
          161878,
          162342
        ],
        "filename": "lodash.js",
        "lineno": 4967,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011164",
          "name": "createCaseFirst",
          "type": "FunctionDeclaration",
          "paramnames": [
            "methodName"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function like `_.lowerFirst`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The name of the `String` case method to use.",
          "name": "methodName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new case function."
        }
      ],
      "name": "createCaseFirst",
      "longname": "_.runInContext~createCaseFirst",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001350",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */",
      "meta": {
        "range": [
          162566,
          162735
        ],
        "filename": "lodash.js",
        "lineno": 4994,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011227",
          "name": "createCompounder",
          "type": "FunctionDeclaration",
          "paramnames": [
            "callback"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function like `_.camelCase`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to combine each word.",
          "name": "callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new compounder function."
        }
      ],
      "name": "createCompounder",
      "longname": "_.runInContext~createCompounder",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001355",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */",
      "meta": {
        "range": [
          163057,
          164230
        ],
        "filename": "lodash.js",
        "lineno": 5008,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011250",
          "name": "createCtor",
          "type": "FunctionDeclaration",
          "paramnames": [
            "Ctor"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function that produces an instance of `Ctor` regardless of\nwhether it was invoked as part of a `new` expression or by `call` or `apply`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The constructor to wrap.",
          "name": "Ctor"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new wrapped function."
        }
      ],
      "name": "createCtor",
      "longname": "_.runInContext~createCtor",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001356",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */",
      "meta": {
        "range": [
          164587,
          165483
        ],
        "filename": "lodash.js",
        "lineno": 5042,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011412",
          "name": "createCurry",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "bitmask",
            "arity"
          ]
        },
        "vars": {
          "Ctor": "_.runInContext~createCurry~Ctor",
          "wrapper": "_.runInContext~createCurry~wrapper"
        }
      },
      "description": "Creates a function that wraps `func` to enable currying.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags. See `createWrap` for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The arity of `func`.",
          "name": "arity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new wrapped function."
        }
      ],
      "name": "createCurry",
      "longname": "_.runInContext~createCurry",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001360",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */",
      "meta": {
        "range": [
          165720,
          166260
        ],
        "filename": "lodash.js",
        "lineno": 5077,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011535",
          "name": "createFind",
          "type": "FunctionDeclaration",
          "paramnames": [
            "findIndexFunc"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a `_.find` or `_.findLast` function.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to find the collection index.",
          "name": "findIndexFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new find function."
        }
      ],
      "name": "createFind",
      "longname": "_.runInContext~createFind",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001371",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */",
      "meta": {
        "range": [
          166490,
          168241
        ],
        "filename": "lodash.js",
        "lineno": 5097,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011607",
          "name": "createFlow",
          "type": "FunctionDeclaration",
          "paramnames": [
            "fromRight"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a `_.flow` or `_.flowRight` function.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify iterating from right to left.",
          "name": "fromRight"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new flow function."
        }
      ],
      "name": "createFlow",
      "longname": "_.runInContext~createFlow",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001377",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */",
      "meta": {
        "range": [
          169247,
          171092
        ],
        "filename": "lodash.js",
        "lineno": 5171,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100011865",
          "name": "createHybrid",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "bitmask",
            "thisArg",
            "partials",
            "holders",
            "partialsRight",
            "holdersRight",
            "argPos",
            "ary",
            "arity"
          ]
        },
        "vars": {
          "isAry": "_.runInContext~createHybrid~isAry",
          "isBind": "_.runInContext~createHybrid~isBind",
          "isBindKey": "_.runInContext~createHybrid~isBindKey",
          "isCurried": "_.runInContext~createHybrid~isCurried",
          "isFlip": "_.runInContext~createHybrid~isFlip",
          "Ctor": "_.runInContext~createHybrid~Ctor",
          "wrapper": "_.runInContext~createHybrid~wrapper"
        }
      },
      "description": "Creates a function that wraps `func` to invoke it with optional `this`\nbinding of `thisArg`, partial application, and currying.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function",
              "string"
            ]
          },
          "description": "The function or method name to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags. See `createWrap` for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The `this` binding of `func`.",
          "name": "thisArg"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The arguments to prepend to those provided to\n the new function.",
          "name": "partials"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The `partials` placeholder indexes.",
          "name": "holders"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The arguments to append to those provided\n to the new function.",
          "name": "partialsRight"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The `partialsRight` placeholder indexes.",
          "name": "holdersRight"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The argument positions of the new function.",
          "name": "argPos"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The arity cap of `func`.",
          "name": "ary"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The arity of `func`.",
          "name": "arity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new wrapped function."
        }
      ],
      "name": "createHybrid",
      "longname": "_.runInContext~createHybrid",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001394",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */",
      "meta": {
        "range": [
          171387,
          171560
        ],
        "filename": "lodash.js",
        "lineno": 5233,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012101",
          "name": "createInverter",
          "type": "FunctionDeclaration",
          "paramnames": [
            "setter",
            "toIteratee"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function like `_.invertBy`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to set accumulator values.",
          "name": "setter"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to resolve iteratees.",
          "name": "toIteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new inverter function."
        }
      ],
      "name": "createInverter",
      "longname": "_.runInContext~createInverter",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001418",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */",
      "meta": {
        "range": [
          171914,
          172663
        ],
        "filename": "lodash.js",
        "lineno": 5247,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012120",
          "name": "createMathOperation",
          "type": "FunctionDeclaration",
          "paramnames": [
            "operator",
            "defaultValue"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function that performs a mathematical operation on two values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to perform the operation.",
          "name": "operator"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The value used for `undefined` arguments.",
          "name": "defaultValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new mathematical operation function."
        }
      ],
      "name": "createMathOperation",
      "longname": "_.runInContext~createMathOperation",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001419",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */",
      "meta": {
        "range": [
          172882,
          173248
        ],
        "filename": "lodash.js",
        "lineno": 5280,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012210",
          "name": "createOver",
          "type": "FunctionDeclaration",
          "paramnames": [
            "arrayFunc"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function like `_.over`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to iterate over iteratees.",
          "name": "arrayFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new over function."
        }
      ],
      "name": "createOver",
      "longname": "_.runInContext~createOver",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001427",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */",
      "meta": {
        "range": [
          173609,
          174064
        ],
        "filename": "lodash.js",
        "lineno": 5301,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012253",
          "name": "createPadding",
          "type": "FunctionDeclaration",
          "paramnames": [
            "length",
            "chars"
          ]
        },
        "vars": {
          "chars": "_.runInContext~createPadding~chars",
          "charsLength": "_.runInContext~createPadding~charsLength",
          "result": "_.runInContext~createPadding~result"
        }
      },
      "description": "Creates the padding for `string` based on `length`. The `chars` string\nis truncated if the number of characters exceeds `length`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The padding length.",
          "name": "length"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "' '",
          "description": "The string used as padding.",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the padding for `string`."
        }
      ],
      "name": "createPadding",
      "longname": "_.runInContext~createPadding",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001430",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */",
      "meta": {
        "range": [
          174622,
          175349
        ],
        "filename": "lodash.js",
        "lineno": 5326,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012323",
          "name": "createPartial",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "bitmask",
            "thisArg",
            "partials"
          ]
        },
        "vars": {
          "isBind": "_.runInContext~createPartial~isBind",
          "Ctor": "_.runInContext~createPartial~Ctor",
          "wrapper": "_.runInContext~createPartial~wrapper"
        }
      },
      "description": "Creates a function that wraps `func` to invoke it with the `this` binding\nof `thisArg` and `partials` prepended to the arguments it receives.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags. See `createWrap` for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The `this` binding of `func`.",
          "name": "thisArg"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arguments to prepend to those provided to\n the new function.",
          "name": "partials"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new wrapped function."
        }
      ],
      "name": "createPartial",
      "longname": "_.runInContext~createPartial",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001434",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */",
      "meta": {
        "range": [
          175582,
          176148
        ],
        "filename": "lodash.js",
        "lineno": 5356,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012423",
          "name": "createRange",
          "type": "FunctionDeclaration",
          "paramnames": [
            "fromRight"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a `_.range` or `_.rangeRight` function.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify iterating from right to left.",
          "name": "fromRight"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new range function."
        }
      ],
      "name": "createRange",
      "longname": "_.runInContext~createRange",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001446",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */",
      "meta": {
        "range": [
          176418,
          176707
        ],
        "filename": "lodash.js",
        "lineno": 5381,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012503",
          "name": "createRelationalOperation",
          "type": "FunctionDeclaration",
          "paramnames": [
            "operator"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function that performs a relational operation on two values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to perform the operation.",
          "name": "operator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new relational operation function."
        }
      ],
      "name": "createRelationalOperation",
      "longname": "_.runInContext~createRelationalOperation",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001454",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */",
      "meta": {
        "range": [
          177558,
          178548
        ],
        "filename": "lodash.js",
        "lineno": 5408,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012541",
          "name": "createRecurry",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "bitmask",
            "wrapFunc",
            "placeholder",
            "thisArg",
            "partials",
            "holders",
            "argPos",
            "ary",
            "arity"
          ]
        },
        "vars": {
          "isCurry": "_.runInContext~createRecurry~isCurry",
          "newHolders": "_.runInContext~createRecurry~newHolders",
          "newHoldersRight": "_.runInContext~createRecurry~newHoldersRight",
          "newPartials": "_.runInContext~createRecurry~newPartials",
          "newPartialsRight": "_.runInContext~createRecurry~newPartialsRight",
          "bitmask": "_.runInContext~createRecurry~bitmask",
          "newData": "_.runInContext~createRecurry~newData",
          "result": "_.runInContext~createRecurry~result",
          "result.placeholder": "_.runInContext~createRecurry~result.placeholder"
        }
      },
      "description": "Creates a function that wraps `func` to continue currying.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags. See `createWrap` for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to create the `func` wrapper.",
          "name": "wrapFunc"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The placeholder value.",
          "name": "placeholder"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The `this` binding of `func`.",
          "name": "thisArg"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The arguments to prepend to those provided to\n the new function.",
          "name": "partials"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The `partials` placeholder indexes.",
          "name": "holders"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The argument positions of the new function.",
          "name": "argPos"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The arity cap of `func`.",
          "name": "ary"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The arity of `func`.",
          "name": "arity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new wrapped function."
        }
      ],
      "name": "createRecurry",
      "longname": "_.runInContext~createRecurry",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001457",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */",
      "meta": {
        "range": [
          178780,
          179453
        ],
        "filename": "lodash.js",
        "lineno": 5441,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012657",
          "name": "createRound",
          "type": "FunctionDeclaration",
          "paramnames": [
            "methodName"
          ]
        },
        "vars": {
          "func": "_.runInContext~createRound~func",
          "": null
        }
      },
      "description": "Creates a function like `_.round`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The name of the `Math` method to use when rounding.",
          "name": "methodName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new round function."
        }
      ],
      "name": "createRound",
      "longname": "_.runInContext~createRound",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001469",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */",
      "meta": {
        "range": [
          179648,
          179781
        ],
        "filename": "lodash.js",
        "lineno": 5466,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012749",
          "name": "createSet",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Creates a set object of `values`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The values to add to the set.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new set."
        }
      ],
      "name": "createSet",
      "longname": "_.runInContext~createSet",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001476",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */",
      "meta": {
        "range": [
          180024,
          180345
        ],
        "filename": "lodash.js",
        "lineno": 5477,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012776",
          "name": "createToPairs",
          "type": "FunctionDeclaration",
          "paramnames": [
            "keysFunc"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a `_.toPairs` or `_.toPairsIn` function.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to get the keys of a given object.",
          "name": "keysFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new pairs function."
        }
      ],
      "name": "createToPairs",
      "longname": "_.runInContext~createToPairs",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001477",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - `_.bind`\n     *     2 - `_.bindKey`\n     *     4 - `_.curry` or `_.curryRight` of a bound function\n     *     8 - `_.curry`\n     *    16 - `_.curryRight`\n     *    32 - `_.partial`\n     *    64 - `_.partialRight`\n     *   128 - `_.rearg`\n     *   256 - `_.ary`\n     *   512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */",
      "meta": {
        "range": [
          181447,
          183461
        ],
        "filename": "lodash.js",
        "lineno": 5516,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100012815",
          "name": "createWrap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "bitmask",
            "thisArg",
            "partials",
            "holders",
            "argPos",
            "ary",
            "arity"
          ]
        },
        "vars": {
          "isBindKey": "_.runInContext~createWrap~isBindKey",
          "length": "_.runInContext~createWrap~length",
          "bitmask": "_.runInContext~createWrap~bitmask",
          "partials": "_.runInContext~createWrap~partials",
          "holders": "_.runInContext~createWrap~holders",
          "ary": "_.runInContext~createWrap~ary",
          "arity": "_.runInContext~createWrap~arity",
          "partialsRight": "_.runInContext~createWrap~partialsRight",
          "holdersRight": "_.runInContext~createWrap~holdersRight",
          "data": "_.runInContext~createWrap~data",
          "newData": "_.runInContext~createWrap~newData",
          "func": "_.runInContext~createWrap~func",
          "thisArg": "_.runInContext~createWrap~thisArg",
          "newData[9]": "_.runInContext~createWrap~newData.9]",
          "result": "_.runInContext~createWrap~result",
          "setter": "_.runInContext~createWrap~setter"
        }
      },
      "description": "Creates a function that either curries or invokes `func` with optional\n`this` binding and partially applied arguments.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function",
              "string"
            ]
          },
          "description": "The function or method name to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags.\n The bitmask may be composed of the following flags:\n    1 - `_.bind`\n    2 - `_.bindKey`\n    4 - `_.curry` or `_.curryRight` of a bound function\n    8 - `_.curry`\n   16 - `_.curryRight`\n   32 - `_.partial`\n   64 - `_.partialRight`\n  128 - `_.rearg`\n  256 - `_.ary`\n  512 - `_.flip`",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The `this` binding of `func`.",
          "name": "thisArg"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The arguments to be partially applied.",
          "name": "partials"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The `partials` placeholder indexes.",
          "name": "holders"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "The argument positions of the new function.",
          "name": "argPos"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The arity cap of `func`.",
          "name": "ary"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The arity of `func`.",
          "name": "arity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new wrapped function."
        }
      ],
      "name": "createWrap",
      "longname": "_.runInContext~createWrap",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001479",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */",
      "meta": {
        "range": [
          184150,
          186086
        ],
        "filename": "lodash.js",
        "lineno": 5585,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013112",
          "name": "equalArrays",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "other",
            "equalFunc",
            "customizer",
            "bitmask",
            "stack"
          ]
        },
        "vars": {
          "isPartial": "_.runInContext~equalArrays~isPartial",
          "arrLength": "_.runInContext~equalArrays~arrLength",
          "othLength": "_.runInContext~equalArrays~othLength",
          "stacked": "_.runInContext~equalArrays~stacked",
          "index": "_.runInContext~equalArrays~index",
          "result": "_.runInContext~equalArrays~result",
          "seen": "_.runInContext~equalArrays~seen",
          "arrValue": "_.runInContext~equalArrays~arrValue",
          "othValue": "_.runInContext~equalArrays~othValue",
          "compared": "_.runInContext~equalArrays~compared",
          "": null
        }
      },
      "description": "A specialized version of `baseIsEqualDeep` for arrays with support for\npartial deep comparisons.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to compare.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The other array to compare.",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to determine equivalents of values.",
          "name": "equalFunc"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to customize comparisons.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask of comparison flags. See `baseIsEqual`\n for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Tracks traversed `array` and `other` objects.",
          "name": "stack"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the arrays are equivalent, else `false`."
        }
      ],
      "name": "equalArrays",
      "longname": "_.runInContext~equalArrays",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001507",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */",
      "meta": {
        "range": [
          186999,
          189150
        ],
        "filename": "lodash.js",
        "lineno": 5664,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013334",
          "name": "equalByTag",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "other",
            "tag",
            "equalFunc",
            "customizer",
            "bitmask",
            "stack"
          ]
        },
        "vars": {
          "object": "_.runInContext~equalByTag~object",
          "other": "_.runInContext~equalByTag~other",
          "convert": "_.runInContext~equalByTag~convert",
          "isPartial": "_.runInContext~equalByTag~isPartial",
          "stacked": "_.runInContext~equalByTag~stacked",
          "bitmask": "_.runInContext~equalByTag~bitmask",
          "result": "_.runInContext~equalByTag~result"
        }
      },
      "description": "A specialized version of `baseIsEqualDeep` for comparing objects of\nthe same `toStringTag`.\n\n**Note:** This function only supports comparing values with tags of\n`Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to compare.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The other object to compare.",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The `toStringTag` of the objects to compare.",
          "name": "tag"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to determine equivalents of values.",
          "name": "equalFunc"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to customize comparisons.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask of comparison flags. See `baseIsEqual`\n for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Tracks traversed `object` and `other` objects.",
          "name": "stack"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the objects are equivalent, else `false`."
        }
      ],
      "name": "equalByTag",
      "longname": "_.runInContext~equalByTag",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001521",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */",
      "meta": {
        "range": [
          189847,
          192010
        ],
        "filename": "lodash.js",
        "lineno": 5743,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013547",
          "name": "equalObjects",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "other",
            "equalFunc",
            "customizer",
            "bitmask",
            "stack"
          ]
        },
        "vars": {
          "isPartial": "_.runInContext~equalObjects~isPartial",
          "objProps": "_.runInContext~equalObjects~objProps",
          "objLength": "_.runInContext~equalObjects~objLength",
          "othProps": "_.runInContext~equalObjects~othProps",
          "othLength": "_.runInContext~equalObjects~othLength",
          "index": "_.runInContext~equalObjects~index",
          "key": "_.runInContext~equalObjects~key",
          "stacked": "_.runInContext~equalObjects~stacked",
          "result": "_.runInContext~equalObjects~result",
          "skipCtor": "_.runInContext~equalObjects~skipCtor",
          "objValue": "_.runInContext~equalObjects~objValue",
          "othValue": "_.runInContext~equalObjects~othValue",
          "compared": "_.runInContext~equalObjects~compared",
          "objCtor": "_.runInContext~equalObjects~objCtor",
          "othCtor": "_.runInContext~equalObjects~othCtor"
        }
      },
      "description": "A specialized version of `baseIsEqualDeep` for objects with support for\npartial deep comparisons.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to compare.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The other object to compare.",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to determine equivalents of values.",
          "name": "equalFunc"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to customize comparisons.",
          "name": "customizer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask of comparison flags. See `baseIsEqual`\n for more details.",
          "name": "bitmask"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Tracks traversed `object` and `other` objects.",
          "name": "stack"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the objects are equivalent, else `false`."
        }
      ],
      "name": "equalObjects",
      "longname": "_.runInContext~equalObjects",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001530",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */",
      "meta": {
        "range": [
          192255,
          192359
        ],
        "filename": "lodash.js",
        "lineno": 5814,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013811",
          "name": "flatRest",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        }
      },
      "description": "A specialized version of `baseRest` which flattens the rest array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to apply a rest parameter to.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "name": "flatRest",
      "longname": "_.runInContext~flatRest",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001550",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */",
      "meta": {
        "range": [
          192610,
          192700
        ],
        "filename": "lodash.js",
        "lineno": 5825,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013826",
          "name": "getAllKeys",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of own enumerable property names and symbols of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names and symbols."
        }
      ],
      "name": "getAllKeys",
      "longname": "_.runInContext~getAllKeys",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001551",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */",
      "meta": {
        "range": [
          192972,
          193068
        ],
        "filename": "lodash.js",
        "lineno": 5837,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013836",
          "name": "getAllKeysIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of own and inherited enumerable property names and\nsymbols of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names and symbols."
        }
      ],
      "name": "getAllKeysIn",
      "longname": "_.runInContext~getAllKeysIn",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001552",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */",
      "meta": {
        "range": [
          193256,
          193338
        ],
        "filename": "lodash.js",
        "lineno": 5848,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013847",
          "name": "getData",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Gets metadata for `func`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to query.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the metadata for `func`."
        }
      ],
      "name": "getData",
      "longname": "_.runInContext~getData",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001553",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */",
      "meta": {
        "range": [
          193521,
          193923
        ],
        "filename": "lodash.js",
        "lineno": 5859,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013862",
          "name": "getFuncName",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "result": "_.runInContext~getFuncName~result",
          "array": "_.runInContext~getFuncName~array",
          "length": "_.runInContext~getFuncName~length",
          "data": "_.runInContext~getFuncName~data",
          "otherFunc": "_.runInContext~getFuncName~otherFunc"
        }
      },
      "description": "Gets the name of `func`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to query.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the function name."
        }
      ],
      "name": "getFuncName",
      "longname": "_.runInContext~getFuncName",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001554",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */",
      "meta": {
        "range": [
          194129,
          194273
        ],
        "filename": "lodash.js",
        "lineno": 5881,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013922",
          "name": "getHolder",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "object": "_.runInContext~getHolder~object"
        }
      },
      "description": "Gets the argument placeholder value for `func`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to inspect.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the placeholder value."
        }
      ],
      "name": "getHolder",
      "longname": "_.runInContext~getHolder",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001560",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */",
      "meta": {
        "range": [
          194792,
          195007
        ],
        "filename": "lodash.js",
        "lineno": 5897,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013942",
          "name": "getIteratee",
          "type": "FunctionDeclaration",
          "paramnames": []
        },
        "vars": {
          "result": "_.runInContext~getIteratee~result"
        }
      },
      "description": "Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\nthis function returns the custom method, otherwise it returns `baseIteratee`.\nIf arguments are provided, the chosen function is invoked with them and\nits result is returned.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The value to convert to an iteratee.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The arity of the created iteratee.",
          "name": "arity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the chosen function or its result."
        }
      ],
      "name": "getIteratee",
      "longname": "_.runInContext~getIteratee",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001562",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */",
      "meta": {
        "range": [
          195217,
          195392
        ],
        "filename": "lodash.js",
        "lineno": 5911,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100013976",
          "name": "getMapData",
          "type": "FunctionDeclaration",
          "paramnames": [
            "map",
            "key"
          ]
        },
        "vars": {
          "data": "_.runInContext~getMapData~data"
        }
      },
      "description": "Gets the data for `map`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The map to query.",
          "name": "map"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The reference key.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the map data."
        }
      ],
      "name": "getMapData",
      "longname": "_.runInContext~getMapData",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001565",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */",
      "meta": {
        "range": [
          195619,
          195912
        ],
        "filename": "lodash.js",
        "lineno": 5925,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014004",
          "name": "getMatchData",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        },
        "vars": {
          "result": "_.runInContext~getMatchData~result",
          "length": "_.runInContext~getMatchData~length",
          "key": "_.runInContext~getMatchData~key",
          "value": "_.runInContext~getMatchData~value",
          "result[undefined]": "_.runInContext~getMatchData~result.undefined]"
        }
      },
      "description": "Gets the property names, values, and compare flags of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the match data of `object`."
        }
      ],
      "name": "getMatchData",
      "longname": "_.runInContext~getMatchData",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001567",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */",
      "meta": {
        "range": [
          196194,
          196328
        ],
        "filename": "lodash.js",
        "lineno": 5946,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014047",
          "name": "getNative",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "key"
          ]
        },
        "vars": {
          "value": "_.runInContext~getNative~value"
        }
      },
      "description": "Gets the native function at `key` of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the method to get.",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the function if it's native, else `undefined`."
        }
      ],
      "name": "getNative",
      "longname": "_.runInContext~getNative",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001573",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */",
      "meta": {
        "range": [
          196561,
          196891
        ],
        "filename": "lodash.js",
        "lineno": 5958,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014066",
          "name": "getRawTag",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "symbol": "_.runInContext~getRawTag~symbol",
          "value[undefined]": null,
          "result": "_.runInContext~getRawTag~result"
        }
      },
      "description": "A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to query.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the raw `toStringTag`."
        }
      ],
      "name": "getRawTag",
      "longname": "_.runInContext~getRawTag",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001575",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of the own enumerable symbol properties of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */",
      "meta": {
        "range": [
          197122,
          197199
        ],
        "filename": "lodash.js",
        "lineno": 5979,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014109",
          "name": "getSymbols",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Creates an array of the own enumerable symbol properties of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of symbols."
        }
      ],
      "name": "getSymbols",
      "longname": "_.runInContext~getSymbols",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001581",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of the own and inherited enumerable symbol properties\n     * of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */",
      "meta": {
        "range": [
          197452,
          197684
        ],
        "filename": "lodash.js",
        "lineno": 5989,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014119",
          "name": "getSymbolsIn",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Creates an array of the own and inherited enumerable symbol properties\nof `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of symbols."
        }
      ],
      "name": "getSymbolsIn",
      "longname": "_.runInContext~getSymbolsIn",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001582",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */",
      "meta": {
        "range": [
          197872,
          197891
        ],
        "filename": "lodash.js",
        "lineno": 6005,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014151",
          "name": "getTag",
          "type": "Identifier",
          "value": "baseGetTag"
        }
      },
      "description": "Gets the `toStringTag` of `value`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to query.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the `toStringTag`."
        }
      ],
      "name": "getTag",
      "longname": "_.runInContext~getTag",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001585",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */",
      "meta": {
        "range": [
          199273,
          199818
        ],
        "filename": "lodash.js",
        "lineno": 6041,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014262",
          "name": "getView",
          "type": "FunctionDeclaration",
          "paramnames": [
            "start",
            "end",
            "transforms"
          ]
        },
        "vars": {
          "index": "_.runInContext~getView~index",
          "length": "_.runInContext~getView~length",
          "data": "_.runInContext~getView~data",
          "size": "_.runInContext~getView~size",
          "start": "_.runInContext~getView~start",
          "end": "_.runInContext~getView~end"
        }
      },
      "description": "Gets the view, applying any `transforms` to the `start` and `end` positions.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The start of the view.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The end of the view.",
          "name": "end"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The transformations to apply to the view.",
          "name": "transforms"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns an object containing the `start` and `end`\n positions of the view."
        }
      ],
      "name": "getView",
      "longname": "_.runInContext~getView",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001590",
      "___s": true
    },
    {
      "comment": "/**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */",
      "meta": {
        "range": [
          200033,
          200177
        ],
        "filename": "lodash.js",
        "lineno": 6066,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014343",
          "name": "getWrapDetails",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source"
          ]
        },
        "vars": {
          "match": "_.runInContext~getWrapDetails~match"
        }
      },
      "description": "Extracts wrapper details from the `source` body comment.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The source to inspect.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the wrapper details."
        }
      ],
      "name": "getWrapDetails",
      "longname": "_.runInContext~getWrapDetails",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001601",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */",
      "meta": {
        "range": [
          200510,
          201135
        ],
        "filename": "lodash.js",
        "lineno": 6080,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014366",
          "name": "hasPath",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "hasFunc"
          ]
        },
        "vars": {
          "path": "_.runInContext~hasPath~path",
          "index": "_.runInContext~hasPath~index",
          "length": "_.runInContext~hasPath~length",
          "result": "_.runInContext~hasPath~result",
          "key": "_.runInContext~hasPath~key",
          "object": "_.runInContext~hasPath~object"
        }
      },
      "description": "Checks if `path` exists on `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path to check.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to check properties.",
          "name": "hasFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `path` exists, else `false`."
        }
      ],
      "name": "hasPath",
      "longname": "_.runInContext~hasPath",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001603",
      "___s": true
    },
    {
      "comment": "/**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */",
      "meta": {
        "range": [
          201318,
          201678
        ],
        "filename": "lodash.js",
        "lineno": 6109,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014472",
          "name": "initCloneArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.runInContext~initCloneArray~length",
          "result": "_.runInContext~initCloneArray~result",
          "result.index": "_.runInContext~initCloneArray~result.index",
          "result.input": "_.runInContext~initCloneArray~result.input"
        }
      },
      "description": "Initializes an array clone.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to clone.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the initialized clone."
        }
      ],
      "name": "initCloneArray",
      "longname": "_.runInContext~initCloneArray",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001612",
      "___s": true
    },
    {
      "comment": "/**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */",
      "meta": {
        "range": [
          201866,
          202042
        ],
        "filename": "lodash.js",
        "lineno": 6128,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014524",
          "name": "initCloneObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Initializes an object clone.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to clone.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the initialized clone."
        }
      ],
      "name": "initCloneObject",
      "longname": "_.runInContext~initCloneObject",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001617",
      "___s": true
    },
    {
      "comment": "/**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */",
      "meta": {
        "range": [
          202594,
          203535
        ],
        "filename": "lodash.js",
        "lineno": 6147,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014547",
          "name": "initCloneByTag",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "tag",
            "cloneFunc",
            "isDeep"
          ]
        },
        "vars": {
          "Ctor": "_.runInContext~initCloneByTag~Ctor"
        }
      },
      "description": "Initializes an object clone based on its `toStringTag`.\n\n**Note:** This function only supports cloning values with tags of\n`Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to clone.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The `toStringTag` of the object to clone.",
          "name": "tag"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to clone values.",
          "name": "cloneFunc"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify a deep clone.",
          "name": "isDeep"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the initialized clone."
        }
      ],
      "name": "initCloneByTag",
      "longname": "_.runInContext~initCloneByTag",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001618",
      "___s": true
    },
    {
      "comment": "/**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */",
      "meta": {
        "range": [
          203820,
          204210
        ],
        "filename": "lodash.js",
        "lineno": 6191,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014643",
          "name": "insertWrapDetails",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source",
            "details"
          ]
        },
        "vars": {
          "length": "_.runInContext~insertWrapDetails~length",
          "lastIndex": "_.runInContext~insertWrapDetails~lastIndex",
          "details[undefined]": null,
          "details": "_.runInContext~insertWrapDetails~details"
        }
      },
      "description": "Inserts wrapper `details` in a comment at the top of the `source` body.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The source to modify.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "details The details to insert."
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the modified source."
        }
      ],
      "name": "insertWrapDetails",
      "longname": "_.runInContext~insertWrapDetails",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001620",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */",
      "meta": {
        "range": [
          204452,
          204608
        ],
        "filename": "lodash.js",
        "lineno": 6209,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014705",
          "name": "isFlattenable",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is a flattenable `arguments` object or array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is flattenable, else `false`."
        }
      ],
      "name": "isFlattenable",
      "longname": "_.runInContext~isFlattenable",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001625",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */",
      "meta": {
        "range": [
          204919,
          205162
        ],
        "filename": "lodash.js",
        "lineno": 6222,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014727",
          "name": "isIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "length"
          ]
        },
        "vars": {
          "length": "_.runInContext~isIndex~length"
        }
      },
      "description": "Checks if `value` is a valid array-like index.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "MAX_SAFE_INTEGER",
          "description": "The upper bounds of a valid index.",
          "name": "length"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a valid index, else `false`."
        }
      ],
      "name": "isIndex",
      "longname": "_.runInContext~isIndex",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001626",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */",
      "meta": {
        "range": [
          205576,
          205952
        ],
        "filename": "lodash.js",
        "lineno": 6239,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014771",
          "name": "isIterateeCall",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "index",
            "object"
          ]
        },
        "vars": {
          "type": "_.runInContext~isIterateeCall~type"
        }
      },
      "description": "Checks if the given arguments are from an iteratee call.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The potential iteratee value argument.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The potential iteratee index or key argument.",
          "name": "index"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The potential iteratee object argument.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the arguments are from an iteratee call,\n else `false`."
        }
      ],
      "name": "isIterateeCall",
      "longname": "_.runInContext~isIterateeCall",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001628",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */",
      "meta": {
        "range": [
          206257,
          206653
        ],
        "filename": "lodash.js",
        "lineno": 6261,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014822",
          "name": "isKey",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "object"
          ]
        },
        "vars": {
          "type": "_.runInContext~isKey~type"
        }
      },
      "description": "Checks if `value` is a property name and not a property path.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The object to query keys on.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a property name, else `false`."
        }
      ],
      "name": "isKey",
      "longname": "_.runInContext~isKey",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001630",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */",
      "meta": {
        "range": [
          206888,
          207107
        ],
        "filename": "lodash.js",
        "lineno": 6281,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014885",
          "name": "isKeyable",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "type": "_.runInContext~isKeyable~type"
        }
      },
      "description": "Checks if `value` is suitable for use as unique object key.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is suitable, else `false`."
        }
      ],
      "name": "isKeyable",
      "longname": "_.runInContext~isKeyable",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001632",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */",
      "meta": {
        "range": [
          207350,
          207701
        ],
        "filename": "lodash.js",
        "lineno": 6296,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014917",
          "name": "isLaziable",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "funcName": "_.runInContext~isLaziable~funcName",
          "other": "_.runInContext~isLaziable~other",
          "data": "_.runInContext~isLaziable~data"
        }
      },
      "description": "Checks if `func` has a lazy counterpart.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to check.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `func` has a lazy counterpart,\n else `false`."
        }
      ],
      "name": "isLaziable",
      "longname": "_.runInContext~isLaziable",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001634",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */",
      "meta": {
        "range": [
          207922,
          208004
        ],
        "filename": "lodash.js",
        "lineno": 6317,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014970",
          "name": "isMasked",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        }
      },
      "description": "Checks if `func` has its source masked.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to check.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `func` is masked, else `false`."
        }
      ],
      "name": "isMasked",
      "longname": "_.runInContext~isMasked",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001638",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */",
      "meta": {
        "range": [
          208227,
          208275
        ],
        "filename": "lodash.js",
        "lineno": 6328,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014983",
          "name": "isMaskable",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `func` is capable of being masked.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `func` is maskable, else `false`."
        }
      ],
      "name": "isMaskable",
      "longname": "_.runInContext~isMaskable",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001639",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */",
      "meta": {
        "range": [
          208502,
          208693
        ],
        "filename": "lodash.js",
        "lineno": 6337,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100014989",
          "name": "isPrototype",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "Ctor": "_.runInContext~isPrototype~Ctor",
          "proto": "_.runInContext~isPrototype~proto"
        }
      },
      "description": "Checks if `value` is likely a prototype object.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a prototype, else `false`."
        }
      ],
      "name": "isPrototype",
      "longname": "_.runInContext~isPrototype",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001640",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */",
      "meta": {
        "range": [
          208983,
          209075
        ],
        "filename": "lodash.js",
        "lineno": 6352,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015017",
          "name": "isStrictComparable",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is suitable for strict equality comparisons, i.e. `===`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` if suitable for strict\n equality comparisons, else `false`."
        }
      ],
      "name": "isStrictComparable",
      "longname": "_.runInContext~isStrictComparable",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001643",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */",
      "meta": {
        "range": [
          209413,
          209679
        ],
        "filename": "lodash.js",
        "lineno": 6365,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015030",
          "name": "matchesStrictComparable",
          "type": "FunctionDeclaration",
          "paramnames": [
            "key",
            "srcValue"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "A specialized version of `matchesProperty` for source values suitable\nfor strict equality comparisons, i.e. `===`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to get.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to match.",
          "name": "srcValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new spec function."
        }
      ],
      "name": "matchesStrictComparable",
      "longname": "_.runInContext~matchesStrictComparable",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001644",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */",
      "meta": {
        "range": [
          209988,
          210239
        ],
        "filename": "lodash.js",
        "lineno": 6383,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015062",
          "name": "memoizeCapped",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "result": "_.runInContext~memoizeCapped~result",
          "": null,
          "cache": "_.runInContext~memoizeCapped~cache"
        }
      },
      "description": "A specialized version of `_.memoize` which clears the memoized function's\ncache when it exceeds `MAX_MEMOIZE_SIZE`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to have its output memoized.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new memoized function."
        }
      ],
      "name": "memoizeCapped",
      "longname": "_.runInContext~memoizeCapped",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001645",
      "___s": true
    },
    {
      "comment": "/**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */",
      "meta": {
        "range": [
          211011,
          212965
        ],
        "filename": "lodash.js",
        "lineno": 6411,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015097",
          "name": "mergeData",
          "type": "FunctionDeclaration",
          "paramnames": [
            "data",
            "source"
          ]
        },
        "vars": {
          "bitmask": "_.runInContext~mergeData~bitmask",
          "srcBitmask": "_.runInContext~mergeData~srcBitmask",
          "newBitmask": "_.runInContext~mergeData~newBitmask",
          "isCommon": "_.runInContext~mergeData~isCommon",
          "isCombo": "_.runInContext~mergeData~isCombo",
          "data[2]": null,
          "value": "_.runInContext~mergeData~value",
          "partials": "_.runInContext~mergeData~partials",
          "data[3]": null,
          "data[4]": null,
          "data[5]": null,
          "data[6]": null,
          "data[7]": null,
          "data[8]": null,
          "data[9]": null,
          "data[0]": null,
          "data[1]": null
        }
      },
      "description": "Merges the function metadata of `source` into `data`.\n\nMerging metadata reduces the number of wrappers used to invoke a function.\nThis is possible because methods like `_.bind`, `_.curry`, and `_.partial`\nmay be applied regardless of execution order. Methods like `_.ary` and\n`_.rearg` modify function arguments, making the order in which they are\nexecuted important, preventing the merging of metadata. However, we make\nan exception for a safe combined case where curried functions have `_.ary`\nand or `_.rearg` applied.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The destination metadata.",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The source metadata.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `data`."
        }
      ],
      "name": "mergeData",
      "longname": "_.runInContext~mergeData",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001648",
      "___s": true
    },
    {
      "comment": "/**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */",
      "meta": {
        "range": [
          213506,
          213899
        ],
        "filename": "lodash.js",
        "lineno": 6479,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015370",
          "name": "mergeDefaults",
          "type": "FunctionDeclaration",
          "paramnames": [
            "objValue",
            "srcValue",
            "key",
            "object",
            "source",
            "stack"
          ]
        }
      },
      "description": "Used by `_.defaultsDeep` to customize its `_.merge` use.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The destination value.",
          "name": "objValue"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The source value.",
          "name": "srcValue"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the property to merge.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The parent object of `objValue`.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The parent object of `srcValue`.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Tracks traversed source values and their merged\n counterparts.",
          "name": "stack"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the value to assign."
        }
      ],
      "name": "mergeDefaults",
      "longname": "_.runInContext~mergeDefaults",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001670",
      "___s": true
    },
    {
      "comment": "/**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */",
      "meta": {
        "range": [
          214233,
          214430
        ],
        "filename": "lodash.js",
        "lineno": 6498,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015411",
          "name": "nativeKeysIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        },
        "vars": {
          "result": "_.runInContext~nativeKeysIn~result",
          "key": "_.runInContext~nativeKeysIn~key"
        }
      },
      "description": "This function is like\n[`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\nexcept that it includes inherited enumerable properties.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names."
        }
      ],
      "name": "nativeKeysIn",
      "longname": "_.runInContext~nativeKeysIn",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001671",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */",
      "meta": {
        "range": [
          214647,
          214732
        ],
        "filename": "lodash.js",
        "lineno": 6515,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015440",
          "name": "objectToString",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `value` to a string using `Object.prototype.toString`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the converted string."
        }
      ],
      "name": "objectToString",
      "longname": "_.runInContext~objectToString",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001674",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */",
      "meta": {
        "range": [
          215127,
          215763
        ],
        "filename": "lodash.js",
        "lineno": 6528,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015450",
          "name": "overRest",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "start",
            "transform"
          ]
        },
        "vars": {
          "start": "_.runInContext~overRest~start",
          "": null
        }
      },
      "description": "A specialized version of `baseRest` which transforms the rest array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to apply a rest parameter to.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "func.length-1",
          "description": "The start position of the rest parameter.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The rest array transform.",
          "name": "transform"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "name": "overRest",
      "longname": "_.runInContext~overRest",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001675",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */",
      "meta": {
        "range": [
          216021,
          216140
        ],
        "filename": "lodash.js",
        "lineno": 6557,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015555",
          "name": "parent",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path"
          ]
        }
      },
      "description": "Gets the parent value at `path` of `object`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The path to get the parent value of.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the parent value."
        }
      ],
      "name": "parent",
      "longname": "_.runInContext~parent",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001686",
      "___s": true
    },
    {
      "comment": "/**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */",
      "meta": {
        "range": [
          216555,
          216899
        ],
        "filename": "lodash.js",
        "lineno": 6571,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015577",
          "name": "reorder",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "indexes"
          ]
        },
        "vars": {
          "arrLength": "_.runInContext~reorder~arrLength",
          "length": "_.runInContext~reorder~length",
          "oldArray": "_.runInContext~reorder~oldArray",
          "index": "_.runInContext~reorder~index",
          "array[undefined]": null
        }
      },
      "description": "Reorder `array` according to the specified indexes where the element at\nthe first index is assigned as the first element, the element at\nthe second index is assigned as the second element, and so on.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to reorder.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The arranged array indexes.",
          "name": "indexes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "reorder",
      "longname": "_.runInContext~reorder",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001687",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */",
      "meta": {
        "range": [
          217461,
          217492
        ],
        "filename": "lodash.js",
        "lineno": 6597,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015628",
          "name": "setData",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Sets metadata for `func`.\n\n**Note:** If this function becomes hot, i.e. is invoked a lot in a short\nperiod of time, it will trip its breaker and transition to an identity\nfunction to avoid garbage collection pauses in V8. See\n[V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\nfor more details.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to associate metadata with.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The metadata.",
          "name": "data"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `func`."
        }
      ],
      "name": "setData",
      "longname": "_.runInContext~setData",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001693",
      "___s": true
    },
    {
      "comment": "/**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */",
      "meta": {
        "range": [
          217828,
          217928
        ],
        "filename": "lodash.js",
        "lineno": 6607,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015634",
          "name": "setTimeout",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to delay.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of milliseconds to delay invocation.",
          "name": "wait"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number",
              "Object"
            ]
          },
          "description": "Returns the timer id or timeout object."
        }
      ],
      "name": "setTimeout",
      "longname": "_.runInContext~setTimeout",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001694",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */",
      "meta": {
        "range": [
          218194,
          218233
        ],
        "filename": "lodash.js",
        "lineno": 6619,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015650",
          "name": "setToString",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Sets the `toString` method of `func` to return `string`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to modify.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The `toString` result.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `func`."
        }
      ],
      "name": "setToString",
      "longname": "_.runInContext~setToString",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001695",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */",
      "meta": {
        "range": [
          218680,
          218892
        ],
        "filename": "lodash.js",
        "lineno": 6631,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015655",
          "name": "setWrapToString",
          "type": "FunctionDeclaration",
          "paramnames": [
            "wrapper",
            "reference",
            "bitmask"
          ]
        },
        "vars": {
          "source": "_.runInContext~setWrapToString~source"
        }
      },
      "description": "Sets the `toString` method of `wrapper` to mimic the source of `reference`\nwith wrapper details in a comment at the top of the source body.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to modify.",
          "name": "wrapper"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The reference function.",
          "name": "reference"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags. See `createWrap` for more details.",
          "name": "bitmask"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns `wrapper`."
        }
      ],
      "name": "setWrapToString",
      "longname": "_.runInContext~setWrapToString",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001696",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */",
      "meta": {
        "range": [
          219225,
          219667
        ],
        "filename": "lodash.js",
        "lineno": 6645,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015680",
          "name": "shortOut",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        },
        "vars": {
          "count": "_.runInContext~shortOut~count",
          "lastCalled": "_.runInContext~shortOut~lastCalled",
          "": null
        }
      },
      "description": "Creates a function that'll short out and invoke `identity` instead\nof `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\nmilliseconds.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to restrict.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new shortable function."
        }
      ],
      "name": "shortOut",
      "longname": "_.runInContext~shortOut",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001698",
      "___s": true
    },
    {
      "comment": "/**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */",
      "meta": {
        "range": [
          219955,
          220370
        ],
        "filename": "lodash.js",
        "lineno": 6673,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015737",
          "name": "shuffleSelf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "size"
          ]
        },
        "vars": {
          "index": "_.runInContext~shuffleSelf~index",
          "length": "_.runInContext~shuffleSelf~length",
          "lastIndex": "_.runInContext~shuffleSelf~lastIndex",
          "size": "_.runInContext~shuffleSelf~size",
          "rand": "_.runInContext~shuffleSelf~rand",
          "value": "_.runInContext~shuffleSelf~value",
          "array[undefined]": null,
          "array.length": "array.length"
        }
      },
      "description": "A specialized version of `_.shuffle` which mutates and sets the size of `array`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to shuffle.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length",
          "description": "The size of `array`.",
          "name": "size"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "name": "shuffleSelf",
      "longname": "_.runInContext~shuffleSelf",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001705",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */",
      "meta": {
        "range": [
          220580,
          220953
        ],
        "filename": "lodash.js",
        "lineno": 6697,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015807",
          "name": "stringToPath",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts `string` to a property path array.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the property path array."
        }
      ],
      "name": "stringToPath",
      "longname": "_.runInContext~stringToPath",
      "kind": "member",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001715",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */",
      "meta": {
        "range": [
          221166,
          221389
        ],
        "filename": "lodash.js",
        "lineno": 6717,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015867",
          "name": "toKey",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "result": "_.runInContext~toKey~result"
        }
      },
      "description": "Converts `value` to a string key if it's not a string or symbol.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to inspect.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "symbol"
            ]
          },
          "description": "Returns the key."
        }
      ],
      "name": "toKey",
      "longname": "_.runInContext~toKey",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001718",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */",
      "meta": {
        "range": [
          221582,
          221810
        ],
        "filename": "lodash.js",
        "lineno": 6732,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015903",
          "name": "toSource",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        }
      },
      "description": "Converts `func` to its source code.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to convert.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the source code."
        }
      ],
      "name": "toSource",
      "longname": "_.runInContext~toSource",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001720",
      "___s": true
    },
    {
      "comment": "/**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */",
      "meta": {
        "range": [
          222097,
          222378
        ],
        "filename": "lodash.js",
        "lineno": 6752,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015930",
          "name": "updateWrapDetails",
          "type": "FunctionDeclaration",
          "paramnames": [
            "details",
            "bitmask"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Updates wrapper `details` based on `bitmask` flags.",
      "access": "private",
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "details The details to modify."
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `details`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The bitmask flags. See `createWrap` for more details.",
          "name": "bitmask"
        }
      ],
      "name": "updateWrapDetails",
      "longname": "_.runInContext~updateWrapDetails",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001721",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */",
      "meta": {
        "range": [
          222566,
          222937
        ],
        "filename": "lodash.js",
        "lineno": 6769,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100015974",
          "name": "wrapperClone",
          "type": "FunctionDeclaration",
          "paramnames": [
            "wrapper"
          ]
        },
        "vars": {
          "result": "_.runInContext~wrapperClone~result",
          "result.__actions__": "_.runInContext~wrapperClone~result.__actions__",
          "result.__index__": "_.runInContext~wrapperClone~result.__index__",
          "result.__values__": "_.runInContext~wrapperClone~result.__values__"
        }
      },
      "description": "Creates a clone of `wrapper`.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The wrapper to clone.",
          "name": "wrapper"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the cloned wrapper."
        }
      ],
      "name": "wrapperClone",
      "longname": "_.runInContext~wrapperClone",
      "kind": "function",
      "memberof": "_.runInContext",
      "scope": "inner",
      "___id": "T000002R001723",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */",
      "meta": {
        "range": [
          223734,
          224277
        ],
        "filename": "lodash.js",
        "lineno": 6803,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016027",
          "name": "chunk",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "size",
            "guard"
          ]
        },
        "vars": {
          "size": "_.chunk~size",
          "length": "_.chunk~length",
          "index": "_.chunk~result.undefined].index",
          "resIndex": "_.chunk~resIndex",
          "result": "_.chunk~result",
          "result[undefined]": "_.chunk~result.undefined]"
        }
      },
      "description": "Creates an array of elements split into groups the length of `size`.\nIf `array` can't be split evenly, the final chunk will be the remaining\nelements.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to process.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The length of each chunk",
          "name": "size"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of chunks."
        }
      ],
      "examples": [
        "_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]"
      ],
      "name": "chunk",
      "longname": "_.chunk",
      "kind": "function",
      "___id": "T000002R001728",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */",
      "meta": {
        "range": [
          224725,
          225036
        ],
        "filename": "lodash.js",
        "lineno": 6838,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016114",
          "name": "compact",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "index": "_.compact~index",
          "length": "_.compact~length",
          "resIndex": "_.compact~resIndex",
          "result": "_.compact~result",
          "value": "_.compact~value",
          "result[undefined]": "_.compact~result.undefined]"
        }
      },
      "description": "Creates an array with all falsey values removed. The values `false`, `null`,\n`0`, `\"\"`, `undefined`, and `NaN` are falsey.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to compact.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "examples": [
        "_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]"
      ],
      "name": "compact",
      "longname": "_.compact",
      "kind": "function",
      "___id": "T000002R001737",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */",
      "meta": {
        "range": [
          225622,
          225994
        ],
        "filename": "lodash.js",
        "lineno": 6875,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016161",
          "name": "concat",
          "type": "FunctionDeclaration",
          "paramnames": []
        },
        "vars": {
          "length": "_.concat~length",
          "args": "_.concat~args",
          "array": "_.concat~array",
          "index": "_.concat~index",
          "args[undefined]": "_.concat~args.undefined]"
        }
      },
      "description": "Creates a new array concatenating `array` with any additional arrays\nand/or values.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to concatenate.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The values to concatenate.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new concatenated array."
        }
      ],
      "examples": [
        "var array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n\nconsole.log(other);\n// => [1, 2, 3, [4]]\n\nconsole.log(array);\n// => [1]"
      ],
      "name": "concat",
      "longname": "_.concat",
      "kind": "function",
      "___id": "T000002R001744",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */",
      "meta": {
        "range": [
          226752,
          226939
        ],
        "filename": "lodash.js",
        "lineno": 6911,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016223",
          "name": "difference",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of `array` values not included in the other given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.\n\n**Note:** Unlike `_.pullAll`, this method returns a new array.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The values to exclude.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "see": [
        "_.without, _.xor"
      ],
      "examples": [
        "_.difference([2, 1], [2, 3]);\n// => [1]"
      ],
      "name": "difference",
      "longname": "_.difference",
      "kind": "member",
      "___id": "T000002R001750",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */",
      "meta": {
        "range": [
          227976,
          228305
        ],
        "filename": "lodash.js",
        "lineno": 6943,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016247",
          "name": "differenceBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.difference` except that it accepts `iteratee` which\nis invoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).\n\n**Note:** Unlike `_.pullAllBy`, this method returns a new array.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The values to exclude.",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "examples": [
        "_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n\n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]"
      ],
      "name": "differenceBy",
      "longname": "_.differenceBy",
      "kind": "member",
      "___id": "T000002R001751",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */",
      "meta": {
        "range": [
          229239,
          229573
        ],
        "filename": "lodash.js",
        "lineno": 6976,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016290",
          "name": "differenceWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.difference` except that it accepts `comparator`\nwhich is invoked to compare elements of `array` to `values`. The order and\nreferences of result values are determined by the first array. The comparator\nis invoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.pullAllWith`, this method returns a new array.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The values to exclude.",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "examples": [
        "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n\n_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n// => [{ 'x': 2, 'y': 1 }]"
      ],
      "name": "differenceWith",
      "longname": "_.differenceWith",
      "kind": "member",
      "___id": "T000002R001754",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */",
      "meta": {
        "range": [
          230241,
          230483
        ],
        "filename": "lodash.js",
        "lineno": 7011,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016330",
          "name": "drop",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "n",
            "guard"
          ]
        },
        "vars": {
          "length": "_.drop~length",
          "n": "_.drop~n"
        }
      },
      "description": "Creates a slice of `array` with `n` elements dropped from the beginning.",
      "scope": "static",
      "memberof": "_",
      "since": "0.5.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The number of elements to drop.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "_.drop([1, 2, 3]);\n// => [2, 3]\n\n_.drop([1, 2, 3], 2);\n// => [3]\n\n_.drop([1, 2, 3], 5);\n// => []\n\n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]"
      ],
      "name": "drop",
      "longname": "_.drop",
      "kind": "function",
      "___id": "T000002R001757",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */",
      "meta": {
        "range": [
          231164,
          231428
        ],
        "filename": "lodash.js",
        "lineno": 7045,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016375",
          "name": "dropRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "n",
            "guard"
          ]
        },
        "vars": {
          "length": "_.dropRight~length",
          "n": "_.dropRight~n"
        }
      },
      "description": "Creates a slice of `array` with `n` elements dropped from the end.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The number of elements to drop.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "_.dropRight([1, 2, 3]);\n// => [1, 2]\n\n_.dropRight([1, 2, 3], 2);\n// => [1]\n\n_.dropRight([1, 2, 3], 5);\n// => []\n\n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]"
      ],
      "name": "dropRight",
      "longname": "_.dropRight",
      "kind": "function",
      "___id": "T000002R001760",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */",
      "meta": {
        "range": [
          232711,
          232877
        ],
        "filename": "lodash.js",
        "lineno": 7090,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016426",
          "name": "dropRightWhile",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        }
      },
      "description": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']"
      ],
      "name": "dropRightWhile",
      "longname": "_.dropRightWhile",
      "kind": "function",
      "___id": "T000002R001764",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */",
      "meta": {
        "range": [
          234156,
          234311
        ],
        "filename": "lodash.js",
        "lineno": 7132,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016448",
          "name": "dropWhile",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        }
      },
      "description": "Creates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.dropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.dropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n\n// The `_.property` iteratee shorthand.\n_.dropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']"
      ],
      "name": "dropWhile",
      "longname": "_.dropWhile",
      "kind": "function",
      "___id": "T000002R001765",
      "___s": true
    },
    {
      "comment": "/**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */",
      "meta": {
        "range": [
          235106,
          235430
        ],
        "filename": "lodash.js",
        "lineno": 7167,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016469",
          "name": "fill",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "start",
            "end"
          ]
        },
        "vars": {
          "length": "_.fill~length",
          "start": "_.fill~start",
          "end": "_.fill~end"
        }
      },
      "description": "Fills elements of `array` with `value` from `start` up to, but not\nincluding, `end`.\n\n**Note:** This method mutates `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.2.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to fill.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to fill `array` with.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start position.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length",
          "description": "The end position.",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "examples": [
        "var array = [1, 2, 3];\n\n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n\n_.fill(Array(3), 2);\n// => [2, 2, 2]\n\n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]"
      ],
      "name": "fill",
      "longname": "_.fill",
      "kind": "function",
      "___id": "T000002R001766",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */",
      "meta": {
        "range": [
          236628,
          236986
        ],
        "filename": "lodash.js",
        "lineno": 7215,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016520",
          "name": "findIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate",
            "fromIndex"
          ]
        },
        "vars": {
          "length": "_.findIndex~length",
          "index": "_.findIndex~index"
        }
      },
      "description": "This method is like `_.find` except that it returns the index of the first\nelement `predicate` returns truthy for instead of the element itself.",
      "scope": "static",
      "memberof": "_",
      "since": "1.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the found element, else `-1`."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n\n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2"
      ],
      "name": "findIndex",
      "longname": "_.findIndex",
      "kind": "function",
      "___id": "T000002R001770",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */",
      "meta": {
        "range": [
          238178,
          238631
        ],
        "filename": "lodash.js",
        "lineno": 7263,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016576",
          "name": "findLastIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate",
            "fromIndex"
          ]
        },
        "vars": {
          "length": "_.findLastIndex~length",
          "index": "_.findLastIndex~index"
        }
      },
      "description": "This method is like `_.findIndex` except that it iterates over elements\nof `collection` from right to left.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length-1",
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the found element, else `-1`."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n\n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n\n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0"
      ],
      "name": "findLastIndex",
      "longname": "_.findLastIndex",
      "kind": "function",
      "___id": "T000002R001774",
      "___s": true
    },
    {
      "comment": "/**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */",
      "meta": {
        "range": [
          238986,
          239112
        ],
        "filename": "lodash.js",
        "lineno": 7292,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016644",
          "name": "flatten",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.flatten~length"
        }
      },
      "description": "Flattens `array` a single level deep.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to flatten.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new flattened array."
        }
      ],
      "examples": [
        "_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]"
      ],
      "name": "flatten",
      "longname": "_.flatten",
      "kind": "function",
      "___id": "T000002R001779",
      "___s": true
    },
    {
      "comment": "/**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */",
      "meta": {
        "range": [
          239459,
          239596
        ],
        "filename": "lodash.js",
        "lineno": 7311,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016665",
          "name": "flattenDeep",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.flattenDeep~length"
        }
      },
      "description": "Recursively flattens `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to flatten.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new flattened array."
        }
      ],
      "examples": [
        "_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]"
      ],
      "name": "flattenDeep",
      "longname": "_.flattenDeep",
      "kind": "function",
      "___id": "T000002R001781",
      "___s": true
    },
    {
      "comment": "/**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */",
      "meta": {
        "range": [
          240136,
          240370
        ],
        "filename": "lodash.js",
        "lineno": 7336,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016686",
          "name": "flattenDepth",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "depth"
          ]
        },
        "vars": {
          "length": "_.flattenDepth~length",
          "depth": "_.flattenDepth~depth"
        }
      },
      "description": "Recursively flatten `array` up to `depth` times.",
      "scope": "static",
      "memberof": "_",
      "since": "4.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to flatten.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The maximum recursion depth.",
          "name": "depth"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new flattened array."
        }
      ],
      "examples": [
        "var array = [1, [2, [3, [4]], 5]];\n\n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n\n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]"
      ],
      "name": "flattenDepth",
      "longname": "_.flattenDepth",
      "kind": "function",
      "___id": "T000002R001783",
      "___s": true
    },
    {
      "comment": "/**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */",
      "meta": {
        "range": [
          240776,
          241030
        ],
        "filename": "lodash.js",
        "lineno": 7360,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016722",
          "name": "fromPairs",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pairs"
          ]
        },
        "vars": {
          "index": "_.fromPairs~index",
          "length": "_.fromPairs~length",
          "result": "_.fromPairs~result",
          "pair": "_.fromPairs~pair",
          "result[undefined]": "_.fromPairs~result.undefined]"
        }
      },
      "description": "The inverse of `_.toPairs`; this method returns an object composed\nfrom key-value `pairs`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The key-value pairs.",
          "name": "pairs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "_.fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }"
      ],
      "name": "fromPairs",
      "longname": "_.fromPairs",
      "kind": "function",
      "___id": "T000002R001786",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */",
      "meta": {
        "range": [
          241417,
          241506
        ],
        "filename": "lodash.js",
        "lineno": 7390,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016766",
          "name": "head",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "Gets the first element of `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "alias": "first",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the first element of `array`."
        }
      ],
      "examples": [
        "_.head([1, 2, 3]);\n// => 1\n\n_.head([]);\n// => undefined"
      ],
      "name": "first",
      "longname": "_.first",
      "kind": "function",
      "___id": "T000002R001792",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */",
      "meta": {
        "range": [
          242316,
          242646
        ],
        "filename": "lodash.js",
        "lineno": 7417,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016781",
          "name": "indexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "fromIndex"
          ]
        },
        "vars": {
          "length": "_.indexOf~length",
          "index": "_.indexOf~index"
        }
      },
      "description": "Gets the index at which the first occurrence of `value` is found in `array`\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. If `fromIndex` is negative, it's used as the\noffset from the end of `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "examples": [
        "_.indexOf([1, 2, 1, 2], 2);\n// => 1\n\n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3"
      ],
      "name": "indexOf",
      "longname": "_.indexOf",
      "kind": "function",
      "___id": "T000002R001793",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */",
      "meta": {
        "range": [
          242975,
          243103
        ],
        "filename": "lodash.js",
        "lineno": 7443,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016834",
          "name": "initial",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.initial~length"
        }
      },
      "description": "Gets all but the last element of `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "_.initial([1, 2, 3]);\n// => [1, 2]"
      ],
      "name": "initial",
      "longname": "_.initial",
      "kind": "function",
      "___id": "T000002R001797",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */",
      "meta": {
        "range": [
          243709,
          243921
        ],
        "filename": "lodash.js",
        "lineno": 7465,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016858",
          "name": "intersection",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of unique values that are included in all given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of intersecting values."
        }
      ],
      "examples": [
        "_.intersection([2, 1], [2, 3]);\n// => [2]"
      ],
      "name": "intersection",
      "longname": "_.intersection",
      "kind": "member",
      "___id": "T000002R001799",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */",
      "meta": {
        "range": [
          244832,
          245222
        ],
        "filename": "lodash.js",
        "lineno": 7495,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016890",
          "name": "intersectionBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of intersecting values."
        }
      ],
      "examples": [
        "_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n\n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]"
      ],
      "name": "intersectionBy",
      "longname": "_.intersectionBy",
      "kind": "member",
      "___id": "T000002R001801",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */",
      "meta": {
        "range": [
          246070,
          246465
        ],
        "filename": "lodash.js",
        "lineno": 7530,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100016948",
          "name": "intersectionWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.intersection` except that it accepts `comparator`\nwhich is invoked to compare elements of `arrays`. The order and references\nof result values are determined by the first array. The comparator is\ninvoked with two arguments: (arrVal, othVal).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of intersecting values."
        }
      ],
      "examples": [
        "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.intersectionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }]"
      ],
      "name": "intersectionWith",
      "longname": "_.intersectionWith",
      "kind": "member",
      "___id": "T000002R001805",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */",
      "meta": {
        "range": [
          246897,
          246997
        ],
        "filename": "lodash.js",
        "lineno": 7559,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017003",
          "name": "join",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "separator"
          ]
        }
      },
      "description": "Converts all elements in `array` into a string separated by `separator`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to convert.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "','",
          "description": "The element separator.",
          "name": "separator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the joined string."
        }
      ],
      "examples": [
        "_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'"
      ],
      "name": "join",
      "longname": "_.join",
      "kind": "function",
      "___id": "T000002R001809",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */",
      "meta": {
        "range": [
          247313,
          247439
        ],
        "filename": "lodash.js",
        "lineno": 7577,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017018",
          "name": "last",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.last~length"
        }
      },
      "description": "Gets the last element of `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the last element of `array`."
        }
      ],
      "examples": [
        "_.last([1, 2, 3]);\n// => 3"
      ],
      "name": "last",
      "longname": "_.last",
      "kind": "function",
      "___id": "T000002R001810",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */",
      "meta": {
        "range": [
          248091,
          248569
        ],
        "filename": "lodash.js",
        "lineno": 7603,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017040",
          "name": "lastIndexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "fromIndex"
          ]
        },
        "vars": {
          "length": "_.lastIndexOf~length",
          "index": "_.lastIndexOf~index"
        }
      },
      "description": "This method is like `_.indexOf` except that it iterates over elements of\n`array` from right to left.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length-1",
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "examples": [
        "_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n\n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1"
      ],
      "name": "lastIndexOf",
      "longname": "_.lastIndexOf",
      "kind": "function",
      "___id": "T000002R001812",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */",
      "meta": {
        "range": [
          249125,
          249236
        ],
        "filename": "lodash.js",
        "lineno": 7639,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017112",
          "name": "nth",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "n"
          ]
        }
      },
      "description": "Gets the element at index `n` of `array`. If `n` is negative, the nth\nelement from the end is returned.",
      "scope": "static",
      "memberof": "_",
      "since": "4.11.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The index of the element to return.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the nth element of `array`."
        }
      ],
      "examples": [
        "var array = ['a', 'b', 'c', 'd'];\n\n_.nth(array, 1);\n// => 'b'\n\n_.nth(array, -2);\n// => 'c';"
      ],
      "name": "nth",
      "longname": "_.nth",
      "kind": "function",
      "___id": "T000002R001817",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */",
      "meta": {
        "range": [
          249966,
          249990
        ],
        "filename": "lodash.js",
        "lineno": 7666,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017132",
          "name": "pull",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Removes all given values from `array` using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\nto remove elements from an array by predicate.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The values to remove.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "examples": [
        "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']"
      ],
      "name": "pull",
      "longname": "_.pull",
      "kind": "member",
      "___id": "T000002R001818",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */",
      "meta": {
        "range": [
          250572,
          250729
        ],
        "filename": "lodash.js",
        "lineno": 7688,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017137",
          "name": "pullAll",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "values"
          ]
        }
      },
      "description": "This method is like `_.pull` except that it accepts an array of values to remove.\n\n**Note:** Unlike `_.difference`, this method mutates `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The values to remove.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "examples": [
        "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']"
      ],
      "name": "pullAll",
      "longname": "_.pullAll",
      "kind": "function",
      "___id": "T000002R001819",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */",
      "meta": {
        "range": [
          251603,
          251798
        ],
        "filename": "lodash.js",
        "lineno": 7718,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017160",
          "name": "pullAllBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "values",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The iteratee is invoked with one argument: (value).\n\n**Note:** Unlike `_.differenceBy`, this method mutates `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The values to remove.",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "examples": [
        "var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]"
      ],
      "name": "pullAllBy",
      "longname": "_.pullAllBy",
      "kind": "function",
      "___id": "T000002R001820",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */",
      "meta": {
        "range": [
          252667,
          252863
        ],
        "filename": "lodash.js",
        "lineno": 7747,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017188",
          "name": "pullAllWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "values",
            "comparator"
          ]
        }
      },
      "description": "This method is like `_.pullAll` except that it accepts `comparator` which\nis invoked to compare elements of `array` to `values`. The comparator is\ninvoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.differenceWith`, this method mutates `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.6.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The values to remove.",
          "name": "values"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "examples": [
        "var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n\n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]"
      ],
      "name": "pullAllWith",
      "longname": "_.pullAllWith",
      "kind": "function",
      "___id": "T000002R001821",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */",
      "meta": {
        "range": [
          253578,
          253890
        ],
        "filename": "lodash.js",
        "lineno": 7777,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017215",
          "name": "pullAt",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Removes elements from `array` corresponding to `indexes` and returns an\narray of removed elements.\n\n**Note:** Unlike `_.at`, this method mutates `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number",
              "Array.<number>"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The indexes of elements to remove.",
          "name": "indexes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of removed elements."
        }
      ],
      "examples": [
        "var array = ['a', 'b', 'c', 'd'];\nvar pulled = _.pullAt(array, [1, 3]);\n\nconsole.log(array);\n// => ['a', 'c']\n\nconsole.log(pulled);\n// => ['b', 'd']"
      ],
      "name": "pullAt",
      "longname": "_.pullAt",
      "kind": "member",
      "___id": "T000002R001822",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */",
      "meta": {
        "range": [
          254797,
          255302
        ],
        "filename": "lodash.js",
        "lineno": 7817,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017263",
          "name": "remove",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        },
        "vars": {
          "result": "_.remove~result",
          "index": "_.remove~index",
          "indexes": "_.remove~indexes",
          "length": "_.remove~length",
          "predicate": "_.remove~predicate",
          "value": "_.remove~value"
        }
      },
      "description": "Removes all elements from `array` that `predicate` returns truthy for\nand returns an array of the removed elements. The predicate is invoked\nwith three arguments: (value, index, array).\n\n**Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\nto pull elements from an array by value.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of removed elements."
        }
      ],
      "examples": [
        "var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n\nconsole.log(array);\n// => [1, 3]\n\nconsole.log(evens);\n// => [2, 4]"
      ],
      "name": "remove",
      "longname": "_.remove",
      "kind": "function",
      "___id": "T000002R001825",
      "___s": true
    },
    {
      "comment": "/**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */",
      "meta": {
        "range": [
          255920,
          256007
        ],
        "filename": "lodash.js",
        "lineno": 7861,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017340",
          "name": "reverse",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "Reverses `array` so that the first element becomes the last, the second\nelement becomes the second to last, and so on.\n\n**Note:** This method mutates `array` and is based on\n[`Array#reverse`](https://mdn.io/Array/reverse).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to modify.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns `array`."
        }
      ],
      "examples": [
        "var array = [1, 2, 3];\n\n_.reverse(array);\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]"
      ],
      "name": "reverse",
      "longname": "_.reverse",
      "kind": "function",
      "___id": "T000002R001832",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */",
      "meta": {
        "range": [
          256558,
          256998
        ],
        "filename": "lodash.js",
        "lineno": 7881,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017353",
          "name": "slice",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "start",
            "end"
          ]
        },
        "vars": {
          "length": "_.slice~length",
          "start": "_.slice~start",
          "end": "_.slice~end"
        }
      },
      "description": "Creates a slice of `array` from `start` up to, but not including, `end`.\n\n**Note:** This method is used instead of\n[`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\nreturned.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to slice.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start position.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "array.length",
          "description": "The end position.",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "name": "slice",
      "longname": "_.slice",
      "kind": "function",
      "___id": "T000002R001833",
      "___s": true
    },
    {
      "comment": "/**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */",
      "meta": {
        "range": [
          257534,
          257620
        ],
        "filename": "lodash.js",
        "lineno": 7914,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017425",
          "name": "sortedIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value"
          ]
        }
      },
      "description": "Uses a binary search to determine the lowest index at which `value`\nshould be inserted into `array` in order to maintain its sort order.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The sorted array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to evaluate.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index at which `value` should be inserted\n into `array`."
        }
      ],
      "examples": [
        "_.sortedIndex([30, 50], 40);\n// => 1"
      ],
      "name": "sortedIndex",
      "longname": "_.sortedIndex",
      "kind": "function",
      "___id": "T000002R001839",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */",
      "meta": {
        "range": [
          258536,
          258662
        ],
        "filename": "lodash.js",
        "lineno": 7944,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017435",
          "name": "sortedIndexBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The sorted array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to evaluate.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index at which `value` should be inserted\n into `array`."
        }
      ],
      "examples": [
        "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0"
      ],
      "name": "sortedIndexBy",
      "longname": "_.sortedIndexBy",
      "kind": "function",
      "___id": "T000002R001840",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */",
      "meta": {
        "range": [
          259132,
          259408
        ],
        "filename": "lodash.js",
        "lineno": 7964,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017450",
          "name": "sortedIndexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value"
          ]
        },
        "vars": {
          "length": "_.sortedIndexOf~length",
          "index": "_.sortedIndexOf~index"
        }
      },
      "description": "This method is like `_.indexOf` except that it performs a binary\nsearch on a sorted `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "examples": [
        "_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1"
      ],
      "name": "sortedIndexOf",
      "longname": "_.sortedIndexOf",
      "kind": "function",
      "___id": "T000002R001841",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */",
      "meta": {
        "range": [
          259987,
          260083
        ],
        "filename": "lodash.js",
        "lineno": 7993,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017491",
          "name": "sortedLastIndex",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value"
          ]
        }
      },
      "description": "This method is like `_.sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The sorted array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to evaluate.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index at which `value` should be inserted\n into `array`."
        }
      ],
      "examples": [
        "_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4"
      ],
      "name": "sortedLastIndex",
      "longname": "_.sortedLastIndex",
      "kind": "function",
      "___id": "T000002R001844",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */",
      "meta": {
        "range": [
          261011,
          261147
        ],
        "filename": "lodash.js",
        "lineno": 8023,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017502",
          "name": "sortedLastIndexBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The sorted array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to evaluate.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index at which `value` should be inserted\n into `array`."
        }
      ],
      "examples": [
        "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n\n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1"
      ],
      "name": "sortedLastIndexBy",
      "longname": "_.sortedLastIndexBy",
      "kind": "function",
      "___id": "T000002R001845",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */",
      "meta": {
        "range": [
          261625,
          261897
        ],
        "filename": "lodash.js",
        "lineno": 8043,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017518",
          "name": "sortedLastIndexOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "value"
          ]
        },
        "vars": {
          "length": "_.sortedLastIndexOf~length",
          "index": "_.sortedLastIndexOf~index"
        }
      },
      "description": "This method is like `_.lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the index of the matched value, else `-1`."
        }
      ],
      "examples": [
        "_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3"
      ],
      "name": "sortedLastIndexOf",
      "longname": "_.sortedLastIndexOf",
      "kind": "function",
      "___id": "T000002R001846",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */",
      "meta": {
        "range": [
          262292,
          262409
        ],
        "filename": "lodash.js",
        "lineno": 8069,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017558",
          "name": "sortedUniq",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "This method is like `_.uniq` except that it's designed and optimized\nfor sorted arrays.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new duplicate free array."
        }
      ],
      "examples": [
        "_.sortedUniq([1, 1, 2]);\n// => [1, 2]"
      ],
      "name": "sortedUniq",
      "longname": "_.sortedUniq",
      "kind": "function",
      "___id": "T000002R001849",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */",
      "meta": {
        "range": [
          262905,
          263060
        ],
        "filename": "lodash.js",
        "lineno": 8091,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017573",
          "name": "sortedUniqBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.uniqBy` except that it's designed and optimized\nfor sorted arrays.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new duplicate free array."
        }
      ],
      "examples": [
        "_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]"
      ],
      "name": "sortedUniqBy",
      "longname": "_.sortedUniqBy",
      "kind": "function",
      "___id": "T000002R001850",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */",
      "meta": {
        "range": [
          263387,
          263516
        ],
        "filename": "lodash.js",
        "lineno": 8111,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017593",
          "name": "tail",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.tail~length"
        }
      },
      "description": "Gets all but the first element of `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "_.tail([1, 2, 3]);\n// => [2, 3]"
      ],
      "name": "tail",
      "longname": "_.tail",
      "kind": "function",
      "___id": "T000002R001851",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */",
      "meta": {
        "range": [
          264181,
          264390
        ],
        "filename": "lodash.js",
        "lineno": 8141,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017615",
          "name": "take",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "n",
            "guard"
          ]
        },
        "vars": {
          "n": "_.take~n"
        }
      },
      "description": "Creates a slice of `array` with `n` elements taken from the beginning.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The number of elements to take.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "_.take([1, 2, 3]);\n// => [1]\n\n_.take([1, 2, 3], 2);\n// => [1, 2]\n\n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.take([1, 2, 3], 0);\n// => []"
      ],
      "name": "take",
      "longname": "_.take",
      "kind": "function",
      "___id": "T000002R001853",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */",
      "meta": {
        "range": [
          265069,
          265338
        ],
        "filename": "lodash.js",
        "lineno": 8174,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017655",
          "name": "takeRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "n",
            "guard"
          ]
        },
        "vars": {
          "length": "_.takeRight~length",
          "n": "_.takeRight~n"
        }
      },
      "description": "Creates a slice of `array` with `n` elements taken from the end.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The number of elements to take.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "_.takeRight([1, 2, 3]);\n// => [3]\n\n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n\n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.takeRight([1, 2, 3], 0);\n// => []"
      ],
      "name": "takeRight",
      "longname": "_.takeRight",
      "kind": "function",
      "___id": "T000002R001855",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */",
      "meta": {
        "range": [
          266592,
          266759
        ],
        "filename": "lodash.js",
        "lineno": 8220,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017706",
          "name": "takeRightWhile",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        }
      },
      "description": "Creates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n\n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []"
      ],
      "name": "takeRightWhile",
      "longname": "_.takeRightWhile",
      "kind": "function",
      "___id": "T000002R001859",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false},\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */",
      "meta": {
        "range": [
          267994,
          268143
        ],
        "filename": "lodash.js",
        "lineno": 8262,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017728",
          "name": "takeWhile",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "predicate"
          ]
        }
      },
      "description": "Creates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to query.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the slice of `array`."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false},\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n\n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n\n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []"
      ],
      "name": "takeWhile",
      "longname": "_.takeWhile",
      "kind": "function",
      "___id": "T000002R001860",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */",
      "meta": {
        "range": [
          268649,
          268763
        ],
        "filename": "lodash.js",
        "lineno": 8284,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017749",
          "name": "union",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of unique values, in order, from all given arrays using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of combined values."
        }
      ],
      "examples": [
        "_.union([2], [1, 2]);\n// => [2, 1]"
      ],
      "name": "union",
      "longname": "_.union",
      "kind": "member",
      "___id": "T000002R001861",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */",
      "meta": {
        "range": [
          269671,
          269927
        ],
        "filename": "lodash.js",
        "lineno": 8312,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017766",
          "name": "unionBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich uniqueness is computed. Result values are chosen from the first\narray in which the value occurs. The iteratee is invoked with one argument:\n(value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of combined values."
        }
      ],
      "examples": [
        "_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]"
      ],
      "name": "unionBy",
      "longname": "_.unionBy",
      "kind": "member",
      "___id": "T000002R001862",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */",
      "meta": {
        "range": [
          270793,
          271054
        ],
        "filename": "lodash.js",
        "lineno": 8341,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017802",
          "name": "unionWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. Result values are chosen from\nthe first array in which the value occurs. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of combined values."
        }
      ],
      "examples": [
        "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]"
      ],
      "name": "unionWith",
      "longname": "_.unionWith",
      "kind": "member",
      "___id": "T000002R001865",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */",
      "meta": {
        "range": [
          271675,
          271780
        ],
        "filename": "lodash.js",
        "lineno": 8367,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017835",
          "name": "uniq",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "Creates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each element\nis kept. The order of result values is determined by the order they occur\nin the array.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new duplicate free array."
        }
      ],
      "examples": [
        "_.uniq([2, 1, 2]);\n// => [2, 1]"
      ],
      "name": "uniq",
      "longname": "_.uniq",
      "kind": "function",
      "___id": "T000002R001868",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */",
      "meta": {
        "range": [
          272665,
          272808
        ],
        "filename": "lodash.js",
        "lineno": 8397,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017850",
          "name": "uniqBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The order of result values is determined by the\norder they occur in the array. The iteratee is invoked with one argument:\n(value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new duplicate free array."
        }
      ],
      "examples": [
        "_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]"
      ],
      "name": "uniqBy",
      "longname": "_.uniqBy",
      "kind": "function",
      "___id": "T000002R001869",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */",
      "meta": {
        "range": [
          273590,
          273734
        ],
        "filename": "lodash.js",
        "lineno": 8423,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017870",
          "name": "uniqWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "comparator"
          ]
        }
      },
      "description": "This method is like `_.uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The order of result values is\ndetermined by the order they occur in the array.The comparator is invoked\nwith two arguments: (arrVal, othVal).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new duplicate free array."
        }
      ],
      "examples": [
        "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]"
      ],
      "name": "uniqWith",
      "longname": "_.uniqWith",
      "kind": "function",
      "___id": "T000002R001870",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */",
      "meta": {
        "range": [
          274369,
          274783
        ],
        "filename": "lodash.js",
        "lineno": 8448,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017888",
          "name": "unzip",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "length": "_.unzip~length",
          "array": "_.unzip~array",
          "": null
        }
      },
      "description": "This method is like `_.zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip\nconfiguration.",
      "scope": "static",
      "memberof": "_",
      "since": "1.2.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array of grouped elements to process.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of regrouped elements."
        }
      ],
      "examples": [
        "var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\n_.unzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]"
      ],
      "name": "unzip",
      "longname": "_.unzip",
      "kind": "function",
      "___id": "T000002R001871",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */",
      "meta": {
        "range": [
          275521,
          275831
        ],
        "filename": "lodash.js",
        "lineno": 8485,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017945",
          "name": "unzipWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        },
        "vars": {
          "result": "_.unzipWith~result",
          "": null
        }
      },
      "description": "This method is like `_.unzip` except that it accepts `iteratee` to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
      "scope": "static",
      "memberof": "_",
      "since": "3.8.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array of grouped elements to process.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function to combine\n regrouped values.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of regrouped elements."
        }
      ],
      "examples": [
        "var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n\n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]"
      ],
      "name": "unzipWith",
      "longname": "_.unzipWith",
      "kind": "function",
      "___id": "T000002R001875",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */",
      "meta": {
        "range": [
          276472,
          276615
        ],
        "filename": "lodash.js",
        "lineno": 8518,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100017987",
          "name": "without",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array excluding all given values using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `_.pull`, this method returns a new array.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to inspect.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The values to exclude.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "see": [
        "_.difference, _.xor"
      ],
      "examples": [
        "_.without([2, 1, 2, 3], 1, 2);\n// => [3]"
      ],
      "name": "without",
      "longname": "_.without",
      "kind": "member",
      "___id": "T000002R001877",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */",
      "meta": {
        "range": [
          277208,
          277310
        ],
        "filename": "lodash.js",
        "lineno": 8542,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018006",
          "name": "xor",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of unique values that is the\n[symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\nof the given arrays. The order of result values is determined by the order\nthey occur in the arrays.",
      "scope": "static",
      "memberof": "_",
      "since": "2.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "see": [
        "_.difference, _.without"
      ],
      "examples": [
        "_.xor([2, 1], [2, 3]);\n// => [1, 3]"
      ],
      "name": "xor",
      "longname": "_.xor",
      "kind": "member",
      "___id": "T000002R001878",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */",
      "meta": {
        "range": [
          278215,
          278459
        ],
        "filename": "lodash.js",
        "lineno": 8570,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018021",
          "name": "xorBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich by which they're compared. The order of result values is determined\nby the order they occur in the arrays. The iteratee is invoked with one\nargument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "examples": [
        "_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n\n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]"
      ],
      "name": "xorBy",
      "longname": "_.xorBy",
      "kind": "member",
      "___id": "T000002R001879",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */",
      "meta": {
        "range": [
          279308,
          279557
        ],
        "filename": "lodash.js",
        "lineno": 8599,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018055",
          "name": "xorWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The order of result values is\ndetermined by the order they occur in the arrays. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to inspect.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The comparator invoked per element.",
          "name": "comparator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of filtered values."
        }
      ],
      "examples": [
        "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]"
      ],
      "name": "xorWith",
      "longname": "_.xorWith",
      "kind": "member",
      "___id": "T000002R001882",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */",
      "meta": {
        "range": [
          280119,
          280140
        ],
        "filename": "lodash.js",
        "lineno": 8623,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018087",
          "name": "zip",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of grouped elements, the first of which contains the\nfirst elements of the given arrays, the second of which contains the\nsecond elements of the given arrays, and so on.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to process.",
          "name": "arrays"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of grouped elements."
        }
      ],
      "examples": [
        "_.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]"
      ],
      "name": "zip",
      "longname": "_.zip",
      "kind": "member",
      "___id": "T000002R001885",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */",
      "meta": {
        "range": [
          280649,
          280758
        ],
        "filename": "lodash.js",
        "lineno": 8641,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018092",
          "name": "zipObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "props",
            "values"
          ]
        }
      },
      "description": "This method is like `_.fromPairs` except that it accepts two arrays,\none of property identifiers and one of corresponding values.",
      "scope": "static",
      "memberof": "_",
      "since": "0.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The property identifiers.",
          "name": "props"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The property values.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }"
      ],
      "name": "zipObject",
      "longname": "_.zipObject",
      "kind": "function",
      "___id": "T000002R001886",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */",
      "meta": {
        "range": [
          281245,
          281354
        ],
        "filename": "lodash.js",
        "lineno": 8660,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018107",
          "name": "zipObjectDeep",
          "type": "FunctionDeclaration",
          "paramnames": [
            "props",
            "values"
          ]
        }
      },
      "description": "This method is like `_.zipObject` except that it supports property paths.",
      "scope": "static",
      "memberof": "_",
      "since": "4.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The property identifiers.",
          "name": "props"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The property values.",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }"
      ],
      "name": "zipObjectDeep",
      "longname": "_.zipObjectDeep",
      "kind": "function",
      "___id": "T000002R001887",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */",
      "meta": {
        "range": [
          282029,
          282303
        ],
        "filename": "lodash.js",
        "lineno": 8683,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018123",
          "name": "zipWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.zip` except that it accepts `iteratee` to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
      "scope": "static",
      "memberof": "_",
      "since": "3.8.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Array",
          "value": "Array"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arrays to process.",
          "name": "arrays"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function to combine grouped values.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new array of grouped elements."
        }
      ],
      "examples": [
        "_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [111, 222]"
      ],
      "name": "zipWith",
      "longname": "_.zipWith",
      "kind": "member",
      "___id": "T000002R001888",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */",
      "meta": {
        "range": [
          283192,
          283307
        ],
        "filename": "lodash.js",
        "lineno": 8722,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018168",
          "name": "chain",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "result": "_.chain~result",
          "result.__chain__": "_.chain~result.__chain__"
        }
      },
      "description": "Creates a `lodash` wrapper instance that wraps `value` with explicit method\nchain sequences enabled. The result of such sequences must be unwrapped\nwith `_#value`.",
      "scope": "static",
      "memberof": "_",
      "since": "1.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to wrap.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new `lodash` wrapper instance."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'age': 36 },\n  { 'user': 'fred',    'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\n\nvar youngest = _\n  .chain(users)\n  .sortBy('age')\n  .map(function(o) {\n    return o.user + ' is ' + o.age;\n  })\n  .head()\n  .value();\n// => 'pebbles is 1'"
      ],
      "name": "chain",
      "longname": "_.chain",
      "kind": "function",
      "___id": "T000002R001892",
      "___s": true
    },
    {
      "comment": "/**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */",
      "meta": {
        "range": [
          284010,
          284096
        ],
        "filename": "lodash.js",
        "lineno": 8751,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018186",
          "name": "tap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "interceptor"
          ]
        }
      },
      "description": "This method invokes `interceptor` and returns `value`. The interceptor\nis invoked with one argument; (value). The purpose of this method is to\n\"tap into\" a method chain sequence in order to modify intermediate results.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to provide to `interceptor`.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to invoke.",
          "name": "interceptor"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns `value`."
        }
      ],
      "examples": [
        "_([1, 2, 3])\n .tap(function(array) {\n   // Mutate input array.\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]"
      ],
      "name": "tap",
      "longname": "_.tap",
      "kind": "function",
      "___id": "T000002R001895",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */",
      "meta": {
        "range": [
          284777,
          284851
        ],
        "filename": "lodash.js",
        "lineno": 8779,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018197",
          "name": "thru",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "interceptor"
          ]
        }
      },
      "description": "This method is like `_.tap` except that it returns the result of `interceptor`.\nThe purpose of this method is to \"pass thru\" values replacing intermediate\nresults in a method chain sequence.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to provide to `interceptor`.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to invoke.",
          "name": "interceptor"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the result of `interceptor`."
        }
      ],
      "examples": [
        "_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']"
      ],
      "name": "thru",
      "longname": "_.thru",
      "kind": "function",
      "___id": "T000002R001896",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */",
      "meta": {
        "range": [
          284857,
          285313
        ],
        "filename": "lodash.js",
        "lineno": 8783,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "This method is the wrapper version of `_.at`.",
      "name": "at",
      "memberof": "_",
      "since": "1.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Array.<string>"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The property paths of elements to pick.",
          "name": "paths"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new `lodash` wrapper instance."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n_(object).at(['a[0].b.c', 'a[1]']).value();\n// => [3, 4]"
      ],
      "scope": "static",
      "longname": "_.at",
      "kind": "member",
      "___id": "T000002R001897",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */",
      "meta": {
        "range": [
          286098,
          286792
        ],
        "filename": "lodash.js",
        "lineno": 8823,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Creates a `lodash` wrapper instance with explicit method chain sequences enabled.",
      "name": "chain",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new `lodash` wrapper instance."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// A sequence without explicit chaining.\n_(users).head();\n// => { 'user': 'barney', 'age': 36 }\n\n// A sequence with explicit chaining.\n_(users)\n  .chain()\n  .head()\n  .pick('user')\n  .value();\n// => { 'user': 'barney' }"
      ],
      "scope": "static",
      "longname": "_.chain",
      "kind": "member",
      "___id": "T000002R001907",
      "___s": true
    },
    {
      "comment": "/**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */",
      "meta": {
        "range": [
          286860,
          287430
        ],
        "filename": "lodash.js",
        "lineno": 8854,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Executes the chain sequence and returns the wrapped result.",
      "name": "commit",
      "memberof": "_",
      "since": "3.2.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new `lodash` wrapper instance."
        }
      ],
      "examples": [
        "var array = [1, 2];\nvar wrapped = _(array).push(3);\n\nconsole.log(array);\n// => [1, 2]\n\nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n\nwrapped.last();\n// => 3\n\nconsole.log(array);\n// => [1, 2, 3]"
      ],
      "scope": "static",
      "longname": "_.commit",
      "kind": "member",
      "___id": "T000002R001909",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */",
      "meta": {
        "range": [
          287535,
          288104
        ],
        "filename": "lodash.js",
        "lineno": 8884,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Gets the next value on a wrapped object following the\n[iterator protocol](https://mdn.io/iteration_protocols#iterator).",
      "name": "next",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the next iterator value."
        }
      ],
      "examples": [
        "var wrapped = _([1, 2]);\n\nwrapped.next();\n// => { 'done': false, 'value': 1 }\n\nwrapped.next();\n// => { 'done': false, 'value': 2 }\n\nwrapped.next();\n// => { 'done': true, 'value': undefined }"
      ],
      "scope": "static",
      "longname": "_.next",
      "kind": "member",
      "___id": "T000002R001911",
      "___s": true
    },
    {
      "comment": "/**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */",
      "meta": {
        "range": [
          288424,
          288809
        ],
        "filename": "lodash.js",
        "lineno": 8916,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Enables the wrapper to be iterable.",
      "name": "iterator",
      "memberof": "_.Symbol",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the wrapper object."
        }
      ],
      "examples": [
        "var wrapped = _([1, 2]);\n\nwrapped[Symbol.iterator]() === wrapped;\n// => true\n\nArray.from(wrapped);\n// => [1, 2]"
      ],
      "scope": "static",
      "longname": "_.Symbol.iterator",
      "kind": "member",
      "___id": "T000002R001918",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */",
      "meta": {
        "range": [
          288875,
          289445
        ],
        "filename": "lodash.js",
        "lineno": 8938,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Creates a clone of the chain sequence planting `value` as the wrapped value.",
      "name": "plant",
      "memberof": "_",
      "since": "3.2.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to plant.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new `lodash` wrapper instance."
        }
      ],
      "examples": [
        "function square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2]).map(square);\nvar other = wrapped.plant([3, 4]);\n\nother.value();\n// => [9, 16]\n\nwrapped.value();\n// => [1, 4]"
      ],
      "scope": "static",
      "longname": "_.plant",
      "kind": "member",
      "___id": "T000002R001920",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */",
      "meta": {
        "range": [
          289937,
          290399
        ],
        "filename": "lodash.js",
        "lineno": 8982,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "This method is the wrapper version of `_.reverse`.\n\n**Note:** This method mutates the wrapped array.",
      "name": "reverse",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new `lodash` wrapper instance."
        }
      ],
      "examples": [
        "var array = [1, 2, 3];\n\n_(array).reverse().value()\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]"
      ],
      "scope": "static",
      "longname": "_.reverse",
      "kind": "member",
      "___id": "T000002R001932",
      "___s": true
    },
    {
      "comment": "/**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */",
      "meta": {
        "range": [
          290910,
          291237
        ],
        "filename": "lodash.js",
        "lineno": 9020,
        "path": "/Users/clarkie/Downloads",
        "code": {}
      },
      "description": "Executes the chain sequence to resolve the unwrapped value.",
      "name": "value",
      "memberof": "_",
      "since": "0.1.0",
      "alias": "toJSON, valueOf",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Seq",
          "value": "Seq"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the resolved unwrapped value."
        }
      ],
      "examples": [
        "_([1, 2, 3]).value();\n// => [1, 2, 3]"
      ],
      "scope": "static",
      "longname": "_.value",
      "kind": "member",
      "___id": "T000002R001941",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */",
      "meta": {
        "range": [
          292295,
          292492
        ],
        "filename": "lodash.js",
        "lineno": 9063,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018550",
          "name": "countBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the number of times the key was returned by `iteratee`. The\niteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "0.5.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee to transform keys.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the composed aggregate object."
        }
      ],
      "examples": [
        "_.countBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': 1, '6': 2 }\n\n// The `_.property` iteratee shorthand.\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }"
      ],
      "name": "countBy",
      "longname": "_.countBy",
      "kind": "member",
      "___id": "T000002R001943",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */",
      "meta": {
        "range": [
          294039,
          294318
        ],
        "filename": "lodash.js",
        "lineno": 9113,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018579",
          "name": "every",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate",
            "guard"
          ]
        },
        "vars": {
          "func": "_.every~func",
          "predicate": "_.every~predicate"
        }
      },
      "description": "Checks if `predicate` returns truthy for **all** elements of `collection`.\nIteration is stopped once `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index|key, collection).\n\n**Note:** This method returns `true` for\n[empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n[everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\nelements of empty collections.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if all elements pass the predicate check,\n else `false`."
        }
      ],
      "examples": [
        "_.every([true, 1, null, 'yes'], Boolean);\n// => false\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false"
      ],
      "name": "every",
      "longname": "_.every",
      "kind": "function",
      "___id": "T000002R001944",
      "___s": true
    },
    {
      "comment": "/**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */",
      "meta": {
        "range": [
          295629,
          295798
        ],
        "filename": "lodash.js",
        "lineno": 9159,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018615",
          "name": "filter",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate"
          ]
        },
        "vars": {
          "func": "_.filter~func"
        }
      },
      "description": "Iterates over elements of `collection`, returning an array of all elements\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).\n\n**Note:** Unlike `_.remove`, this method returns a new array.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new filtered array."
        }
      ],
      "see": [
        "_.reject"
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']"
      ],
      "name": "filter",
      "longname": "_.filter",
      "kind": "function",
      "___id": "T000002R001947",
      "___s": true
    },
    {
      "comment": "/**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */",
      "meta": {
        "range": [
          297122,
          297150
        ],
        "filename": "lodash.js",
        "lineno": 9201,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018638",
          "name": "find",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Iterates over elements of `collection`, returning the first element\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to inspect.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the matched element, else `undefined`."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n\n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.find(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.find(users, ['active', false]);\n// => object for 'fred'\n\n// The `_.property` iteratee shorthand.\n_.find(users, 'active');\n// => object for 'barney'"
      ],
      "name": "find",
      "longname": "_.find",
      "kind": "member",
      "___id": "T000002R001949",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */",
      "meta": {
        "range": [
          297813,
          297849
        ],
        "filename": "lodash.js",
        "lineno": 9223,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018644",
          "name": "findLast",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.find` except that it iterates over elements of\n`collection` from right to left.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to inspect.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "collection.length-1",
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the matched element, else `undefined`."
        }
      ],
      "examples": [
        "_.findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3"
      ],
      "name": "findLast",
      "longname": "_.findLast",
      "kind": "member",
      "___id": "T000002R001950",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */",
      "meta": {
        "range": [
          298564,
          298666
        ],
        "filename": "lodash.js",
        "lineno": 9247,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018649",
          "name": "flatMap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee"
          ]
        }
      },
      "description": "Creates a flattened array of values by running each element in `collection`\nthru `iteratee` and flattening the mapped results. The iteratee is invoked\nwith three arguments: (value, index|key, collection).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new flattened array."
        }
      ],
      "examples": [
        "function duplicate(n) {\n  return [n, n];\n}\n\n_.flatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]"
      ],
      "name": "flatMap",
      "longname": "_.flatMap",
      "kind": "function",
      "___id": "T000002R001951",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */",
      "meta": {
        "range": [
          299264,
          299377
        ],
        "filename": "lodash.js",
        "lineno": 9272,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018662",
          "name": "flatMapDeep",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results.",
      "scope": "static",
      "memberof": "_",
      "since": "4.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new flattened array."
        }
      ],
      "examples": [
        "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]"
      ],
      "name": "flatMapDeep",
      "longname": "_.flatMapDeep",
      "kind": "function",
      "___id": "T000002R001952",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */",
      "meta": {
        "range": [
          300065,
          300241
        ],
        "filename": "lodash.js",
        "lineno": 9298,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018675",
          "name": "flatMapDepth",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee",
            "depth"
          ]
        },
        "vars": {
          "depth": "_.flatMapDepth~depth"
        }
      },
      "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
      "scope": "static",
      "memberof": "_",
      "since": "4.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The maximum recursion depth.",
          "name": "depth"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new flattened array."
        }
      ],
      "examples": [
        "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]"
      ],
      "name": "flatMapDepth",
      "longname": "_.flatMapDepth",
      "kind": "function",
      "___id": "T000002R001953",
      "___s": true
    },
    {
      "comment": "/**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */",
      "meta": {
        "range": [
          301380,
          301544
        ],
        "filename": "lodash.js",
        "lineno": 9333,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018700",
          "name": "forEach",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee"
          ]
        },
        "vars": {
          "func": "_.each~func"
        }
      },
      "description": "Iterates over elements of `collection` and invokes `iteratee` for each element.\nThe iteratee is invoked with three arguments: (value, index|key, collection).\nIteratee functions may exit iteration early by explicitly returning `false`.\n\n**Note:** As with other \"Collections\" methods, objects with a \"length\"\nproperty are iterated like arrays. To avoid this behavior use `_.forIn`\nor `_.forOwn` for object iteration.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "alias": "each",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "Returns `collection`."
        }
      ],
      "see": [
        "_.forEachRight"
      ],
      "examples": [
        "_.forEach([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n\n_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
      ],
      "name": "each",
      "longname": "_.each",
      "kind": "function",
      "___id": "T000002R001955",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */",
      "meta": {
        "range": [
          302172,
          302351
        ],
        "filename": "lodash.js",
        "lineno": 9358,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018722",
          "name": "forEachRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee"
          ]
        },
        "vars": {
          "func": "_.eachRight~func"
        }
      },
      "description": "This method is like `_.forEach` except that it iterates over elements of\n`collection` from right to left.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "alias": "eachRight",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "Returns `collection`."
        }
      ],
      "see": [
        "_.forEach"
      ],
      "examples": [
        "_.forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`."
      ],
      "name": "eachRight",
      "longname": "_.eachRight",
      "kind": "function",
      "___id": "T000002R001957",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */",
      "meta": {
        "range": [
          303349,
          303562
        ],
        "filename": "lodash.js",
        "lineno": 9387,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018745",
          "name": "groupBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The order of grouped values\nis determined by the order they occur in `collection`. The corresponding\nvalue of each key is an array of elements responsible for generating the\nkey. The iteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee to transform keys.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the composed aggregate object."
        }
      ],
      "examples": [
        "_.groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n\n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }"
      ],
      "name": "groupBy",
      "longname": "_.groupBy",
      "kind": "member",
      "___id": "T000002R001959",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */",
      "meta": {
        "range": [
          304635,
          305154
        ],
        "filename": "lodash.js",
        "lineno": 9425,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018778",
          "name": "includes",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "value",
            "fromIndex",
            "guard"
          ]
        },
        "vars": {
          "collection": "_.includes~collection",
          "fromIndex": "_.includes~fromIndex",
          "length": "_.includes~length"
        }
      },
      "description": "Checks if `value` is in `collection`. If `collection` is a string, it's\nchecked for a substring of `value`, otherwise\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nis used for equality comparisons. If `fromIndex` is negative, it's used as\nthe offset from the end of `collection`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.reduce`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.reduce`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object",
              "string"
            ]
          },
          "description": "The collection to inspect.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to search for.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The index to search from.",
          "name": "fromIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is found, else `false`."
        }
      ],
      "examples": [
        "_.includes([1, 2, 3], 1);\n// => true\n\n_.includes([1, 2, 3], 1, 2);\n// => false\n\n_.includes({ 'a': 1, 'b': 2 }, 1);\n// => true\n\n_.includes('abcd', 'bc');\n// => true"
      ],
      "name": "includes",
      "longname": "_.includes",
      "kind": "function",
      "___id": "T000002R001960",
      "___s": true
    },
    {
      "comment": "/**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */",
      "meta": {
        "range": [
          306118,
          306614
        ],
        "filename": "lodash.js",
        "lineno": 9461,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018859",
          "name": "invokeMap",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Invokes the method at `path` of each element in `collection`, returning\nan array of the results of each invoked method. Any additional arguments\nare provided to each invoked method. If `path` is a function, it's invoked\nfor, and `this` bound to, each element in `collection`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "Array",
              "function",
              "string"
            ]
          },
          "description": "The path of the method to invoke or\n the function invoked per iteration.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to invoke each method with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of results."
        }
      ],
      "examples": [
        "_.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\n_.invokeMap([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]"
      ],
      "name": "invokeMap",
      "longname": "_.invokeMap",
      "kind": "member",
      "___id": "T000002R001965",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity]\n     *  The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */",
      "meta": {
        "range": [
          307702,
          307807
        ],
        "filename": "lodash.js",
        "lineno": 9503,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018940",
          "name": "keyBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the last element responsible for generating the key. The\niteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee to transform keys.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the composed aggregate object."
        }
      ],
      "examples": [
        "var array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n\n_.keyBy(array, function(o) {\n  return String.fromCharCode(o.code);\n});\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\n_.keyBy(array, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }"
      ],
      "name": "keyBy",
      "longname": "_.keyBy",
      "kind": "member",
      "___id": "T000002R001972",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */",
      "meta": {
        "range": [
          309272,
          309430
        ],
        "filename": "lodash.js",
        "lineno": 9549,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018955",
          "name": "map",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee"
          ]
        },
        "vars": {
          "func": "_.map~func"
        }
      },
      "description": "Creates an array of values by running each element in `collection` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n\nThe guarded methods are:\n`ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n`fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n`sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n`template`, `trim`, `trimEnd`, `trimStart`, and `words`",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new mapped array."
        }
      ],
      "examples": [
        "function square(n) {\n  return n * n;\n}\n\n_.map([4, 8], square);\n// => [16, 64]\n\n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n\nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']"
      ],
      "name": "map",
      "longname": "_.map",
      "kind": "function",
      "___id": "T000002R001973",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */",
      "meta": {
        "range": [
          310703,
          311110
        ],
        "filename": "lodash.js",
        "lineno": 9583,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100018977",
          "name": "orderBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratees",
            "orders",
            "guard"
          ]
        },
        "vars": {
          "iteratees": "_.orderBy~iteratees",
          "orders": "_.orderBy~orders"
        }
      },
      "description": "This method is like `_.sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.reduce`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.reduce`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "Array.<Array>",
              "Array.<function()>",
              "Array.<Object>",
              "Array.<string>"
            ]
          },
          "optional": true,
          "defaultvalue": "[_.identity]",
          "description": "The iteratees to sort by.",
          "name": "iteratees"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "optional": true,
          "description": "The sort orders of `iteratees`.",
          "name": "orders"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new sorted array."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n\n// Sort by `user` in ascending order and by `age` in descending order.\n_.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]"
      ],
      "name": "orderBy",
      "longname": "_.orderBy",
      "kind": "function",
      "___id": "T000002R001975",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */",
      "meta": {
        "range": [
          312561,
          312699
        ],
        "filename": "lodash.js",
        "lineno": 9633,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019037",
          "name": "partition",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of elements split into two groups, the first of which\ncontains elements `predicate` returns truthy for, the second of which\ncontains elements `predicate` returns falsey for. The predicate is\ninvoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of grouped elements."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n_.partition(users, function(o) { return o.active; });\n// => objects for [['fred'], ['barney', 'pebbles']]\n\n// The `_.matches` iteratee shorthand.\n_.partition(users, { 'age': 1, 'active': false });\n// => objects for [['pebbles'], ['barney', 'fred']]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.partition(users, ['active', false]);\n// => objects for [['barney', 'pebbles'], ['fred']]\n\n// The `_.property` iteratee shorthand.\n_.partition(users, 'active');\n// => objects for [['fred'], ['barney', 'pebbles']]"
      ],
      "name": "partition",
      "longname": "_.partition",
      "kind": "member",
      "___id": "T000002R001979",
      "___s": true
    },
    {
      "comment": "/**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */",
      "meta": {
        "range": [
          314178,
          314437
        ],
        "filename": "lodash.js",
        "lineno": 9674,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019063",
          "name": "reduce",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee",
            "accumulator"
          ]
        },
        "vars": {
          "func": "_.reduce~func",
          "initAccum": "_.reduce~initAccum"
        }
      },
      "description": "Reduces `collection` to a value which is the accumulated result of running\neach element in `collection` thru `iteratee`, where each successive\ninvocation is supplied the return value of the previous. If `accumulator`\nis not given, the first element of `collection` is used as the initial\nvalue. The iteratee is invoked with four arguments:\n(accumulator, value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.reduce`, `_.reduceRight`, and `_.transform`.\n\nThe guarded methods are:\n`assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\nand `sortBy`",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The initial value.",
          "name": "accumulator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the accumulated value."
        }
      ],
      "see": [
        "_.reduceRight"
      ],
      "examples": [
        "_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n\n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)"
      ],
      "name": "reduce",
      "longname": "_.reduce",
      "kind": "function",
      "___id": "T000002R001980",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */",
      "meta": {
        "range": [
          315165,
          315439
        ],
        "filename": "lodash.js",
        "lineno": 9703,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019096",
          "name": "reduceRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "iteratee",
            "accumulator"
          ]
        },
        "vars": {
          "func": "_.reduceRight~func",
          "initAccum": "_.reduceRight~initAccum"
        }
      },
      "description": "This method is like `_.reduce` except that it iterates over elements of\n`collection` from right to left.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The initial value.",
          "name": "accumulator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the accumulated value."
        }
      ],
      "see": [
        "_.reduce"
      ],
      "examples": [
        "var array = [[0, 1], [2, 3], [4, 5]];\n\n_.reduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]"
      ],
      "name": "reduceRight",
      "longname": "_.reduceRight",
      "kind": "function",
      "___id": "T000002R001983",
      "___s": true
    },
    {
      "comment": "/**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */",
      "meta": {
        "range": [
          316599,
          316776
        ],
        "filename": "lodash.js",
        "lineno": 9744,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019129",
          "name": "reject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate"
          ]
        },
        "vars": {
          "func": "_.reject~func"
        }
      },
      "description": "The opposite of `_.filter`; this method returns the elements of `collection`\nthat `predicate` does **not** return truthy for.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new filtered array."
        }
      ],
      "see": [
        "_.filter"
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n_.reject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.reject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.reject(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.reject(users, 'active');\n// => objects for ['barney']"
      ],
      "name": "reject",
      "longname": "_.reject",
      "kind": "function",
      "___id": "T000002R001986",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */",
      "meta": {
        "range": [
          317118,
          317249
        ],
        "filename": "lodash.js",
        "lineno": 9763,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019153",
          "name": "sample",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection"
          ]
        },
        "vars": {
          "func": "_.sample~func"
        }
      },
      "description": "Gets a random element from `collection`.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to sample.",
          "name": "collection"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the random element."
        }
      ],
      "examples": [
        "_.sample([1, 2, 3, 4]);\n// => 2"
      ],
      "name": "sample",
      "longname": "_.sample",
      "kind": "function",
      "___id": "T000002R001988",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */",
      "meta": {
        "range": [
          317874,
          318172
        ],
        "filename": "lodash.js",
        "lineno": 9788,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019170",
          "name": "sampleSize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "n",
            "guard"
          ]
        },
        "vars": {
          "n": "_.sampleSize~n",
          "func": "_.sampleSize~func"
        }
      },
      "description": "Gets `n` random elements at unique keys from `collection` up to the\nsize of `collection`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to sample.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The number of elements to sample.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the random elements."
        }
      ],
      "examples": [
        "_.sampleSize([1, 2, 3], 2);\n// => [3, 1]\n\n_.sampleSize([1, 2, 3], 4);\n// => [2, 3, 1]"
      ],
      "name": "sampleSize",
      "longname": "_.sampleSize",
      "kind": "function",
      "___id": "T000002R001990",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */",
      "meta": {
        "range": [
          318637,
          318771
        ],
        "filename": "lodash.js",
        "lineno": 9813,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019213",
          "name": "shuffle",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection"
          ]
        },
        "vars": {
          "func": "_.shuffle~func"
        }
      },
      "description": "Creates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to shuffle.",
          "name": "collection"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new shuffled array."
        }
      ],
      "examples": [
        "_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]"
      ],
      "name": "shuffle",
      "longname": "_.shuffle",
      "kind": "function",
      "___id": "T000002R001994",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */",
      "meta": {
        "range": [
          319338,
          319718
        ],
        "filename": "lodash.js",
        "lineno": 9839,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019230",
          "name": "size",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection"
          ]
        },
        "vars": {
          "tag": "_.size~tag"
        }
      },
      "description": "Gets the size of `collection` by returning its length for array-like\nvalues or the number of own enumerable string keyed properties for objects.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object",
              "string"
            ]
          },
          "description": "The collection to inspect.",
          "name": "collection"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the collection size."
        }
      ],
      "examples": [
        "_.size([1, 2, 3]);\n// => 3\n\n_.size({ 'a': 1, 'b': 2 });\n// => 2\n\n_.size('pebbles');\n// => 7"
      ],
      "name": "size",
      "longname": "_.size",
      "kind": "function",
      "___id": "T000002R001996",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */",
      "meta": {
        "range": [
          320983,
          321259
        ],
        "filename": "lodash.js",
        "lineno": 9889,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019282",
          "name": "some",
          "type": "FunctionDeclaration",
          "paramnames": [
            "collection",
            "predicate",
            "guard"
          ]
        },
        "vars": {
          "func": "_.some~func",
          "predicate": "_.some~predicate"
        }
      },
      "description": "Checks if `predicate` returns truthy for **any** element of `collection`.\nIteration is stopped once `predicate` returns truthy. The predicate is\ninvoked with three arguments: (value, index|key, collection).",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if any element passes the predicate check,\n else `false`."
        }
      ],
      "examples": [
        "_.some([null, 0, 'yes', false], Boolean);\n// => true\n\nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.some(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.some(users, 'active');\n// => true"
      ],
      "name": "some",
      "longname": "_.some",
      "kind": "function",
      "___id": "T000002R001998",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */",
      "meta": {
        "range": [
          322420,
          322884
        ],
        "filename": "lodash.js",
        "lineno": 9926,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019319",
          "name": "sortBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection thru each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Collection",
          "value": "Collection"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "Object"
            ]
          },
          "description": "The collection to iterate over.",
          "name": "collection"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<function()>"
            ]
          },
          "optional": true,
          "variable": true,
          "defaultvalue": "[_.identity]",
          "description": "The iteratees to sort by.",
          "name": "iteratees"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new sorted array."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 34 }\n];\n\n_.sortBy(users, [function(o) { return o.user; }]);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n\n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]"
      ],
      "name": "sortBy",
      "longname": "_.sortBy",
      "kind": "member",
      "___id": "T000002R002001",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */",
      "meta": {
        "range": [
          323454,
          323518
        ],
        "filename": "lodash.js",
        "lineno": 9957,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019393",
          "name": "now",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Gets the timestamp of the number of milliseconds that have elapsed since\nthe Unix epoch (1 January 1970 00:00:00 UTC).",
      "scope": "static",
      "memberof": "_",
      "since": "2.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Date",
          "value": "Date"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the timestamp."
        }
      ],
      "examples": [
        "_.defer(function(stamp) {\n  console.log(_.now() - stamp);\n}, _.now());\n// => Logs the number of milliseconds it took for the deferred invocation."
      ],
      "name": "now",
      "longname": "_.now",
      "kind": "member",
      "___id": "T000002R002005",
      "___s": true
    },
    {
      "comment": "/**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */",
      "meta": {
        "range": [
          324396,
          324658
        ],
        "filename": "lodash.js",
        "lineno": 9987,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019406",
          "name": "after",
          "type": "FunctionDeclaration",
          "paramnames": [
            "n",
            "func"
          ]
        },
        "vars": {
          "n": "_.after~n",
          "": null
        }
      },
      "description": "The opposite of `_.before`; this method creates a function that invokes\n`func` once it's called `n` or more times.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of calls before `func` is invoked.",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to restrict.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new restricted function."
        }
      ],
      "examples": [
        "var saves = ['profile', 'settings'];\n\nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n\n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed."
      ],
      "name": "after",
      "longname": "_.after",
      "kind": "function",
      "___id": "T000002R002006",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */",
      "meta": {
        "range": [
          325245,
          325451
        ],
        "filename": "lodash.js",
        "lineno": 10016,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019443",
          "name": "ary",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "n",
            "guard"
          ]
        },
        "vars": {
          "n": "_.ary~n"
        }
      },
      "description": "Creates a function that invokes `func`, with up to `n` arguments,\nignoring any additional arguments.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to cap arguments for.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "func.length",
          "description": "The arity cap.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new capped function."
        }
      ],
      "examples": [
        "_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]"
      ],
      "name": "ary",
      "longname": "_.ary",
      "kind": "function",
      "___id": "T000002R002008",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */",
      "meta": {
        "range": [
          326163,
          326529
        ],
        "filename": "lodash.js",
        "lineno": 10039,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019479",
          "name": "before",
          "type": "FunctionDeclaration",
          "paramnames": [
            "n",
            "func"
          ]
        },
        "vars": {
          "result": "_.before~result",
          "n": "_.before~n",
          "": null
        }
      },
      "description": "Creates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of calls at which `func` is no longer invoked.",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to restrict.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new restricted function."
        }
      ],
      "examples": [
        "jQuery(element).on('click', _.before(5, addContactToList));\n// => Allows adding up to 4 contacts to the list."
      ],
      "name": "before",
      "longname": "_.before",
      "kind": "function",
      "___id": "T000002R002011",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */",
      "meta": {
        "range": [
          327730,
          328022
        ],
        "filename": "lodash.js",
        "lineno": 10091,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019533",
          "name": "bind",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that invokes `func` with the `this` binding of `thisArg`\nand `partials` prepended to the arguments it receives.\n\nThe `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for partially applied arguments.\n\n**Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\nproperty of bound functions.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to bind.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The `this` binding of `func`.",
          "name": "thisArg"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to be partially applied.",
          "name": "partials"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new bound function."
        }
      ],
      "examples": [
        "function greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nvar object = { 'user': 'fred' };\n\nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'"
      ],
      "name": "bind",
      "longname": "_.bind",
      "kind": "member",
      "___id": "T000002R002016",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */",
      "meta": {
        "range": [
          329584,
          329894
        ],
        "filename": "lodash.js",
        "lineno": 10145,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019573",
          "name": "bindKey",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that invokes the method at `object[key]` with `partials`\nprepended to the arguments it receives.\n\nThis method differs from `_.bind` by allowing bound functions to reference\nmethods that may be redefined or don't yet exist. See\n[Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\nfor more details.\n\nThe `_.bindKey.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.",
      "scope": "static",
      "memberof": "_",
      "since": "0.10.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to invoke the method on.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The key of the method.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to be partially applied.",
          "name": "partials"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new bound function."
        }
      ],
      "examples": [
        "var object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n\nvar bound = _.bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// Bound with placeholders.\nvar bound = _.bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'"
      ],
      "name": "bindKey",
      "longname": "_.bindKey",
      "kind": "member",
      "___id": "T000002R002020",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */",
      "meta": {
        "range": [
          331255,
          331516
        ],
        "filename": "lodash.js",
        "lineno": 10195,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019614",
          "name": "curry",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "arity",
            "guard"
          ]
        },
        "vars": {
          "arity": "_.curry~arity",
          "result": "_.curry~result",
          "result.placeholder": "_.curry~result.placeholder"
        }
      },
      "description": "Creates a function that accepts arguments of `func` and either invokes\n`func` returning its result, if at least `arity` number of arguments have\nbeen provided, or returns a function that accepts the remaining `func`\narguments, and so on. The arity of `func` may be specified if `func.length`\nis not sufficient.\n\nThe `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to curry.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "func.length",
          "description": "The arity of `func`.",
          "name": "arity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new curried function."
        }
      ],
      "examples": [
        "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]"
      ],
      "name": "curry",
      "longname": "_.curry",
      "kind": "function",
      "___id": "T000002R002024",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */",
      "meta": {
        "range": [
          332686,
          332963
        ],
        "filename": "lodash.js",
        "lineno": 10240,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019650",
          "name": "curryRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "arity",
            "guard"
          ]
        },
        "vars": {
          "arity": "_.curryRight~arity",
          "result": "_.curryRight~result",
          "result.placeholder": "_.curryRight~result.placeholder"
        }
      },
      "description": "This method is like `_.curry` except that arguments are applied to `func`\nin the manner of `_.partialRight` instead of `_.partial`.\n\nThe `_.curryRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to curry.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "func.length",
          "description": "The arity of `func`.",
          "name": "arity"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new curried function."
        }
      ],
      "examples": [
        "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]"
      ],
      "name": "curryRight",
      "longname": "_.curryRight",
      "kind": "function",
      "___id": "T000002R002028",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */",
      "meta": {
        "range": [
          335625,
          339289
        ],
        "filename": "lodash.js",
        "lineno": 10301,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100019686",
          "name": "debounce",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "wait",
            "options"
          ]
        },
        "vars": {
          "lastArgs": "_.debounce~lastArgs",
          "lastThis": "_.debounce~lastThis",
          "maxWait": "_.debounce~maxWait",
          "result": "_.debounce~result",
          "timerId": "_.debounce~timerId",
          "lastCallTime": "_.debounce~lastCallTime",
          "lastInvokeTime": "_.debounce~lastInvokeTime",
          "leading": "_.debounce~leading",
          "maxing": "_.debounce~maxing",
          "trailing": "_.debounce~trailing",
          "wait": "_.debounce~wait",
          "invokeFunc": "_.debounce~invokeFunc",
          "leadingEdge": "_.debounce~leadingEdge",
          "remainingWait": "_.debounce~remainingWait",
          "shouldInvoke": "_.debounce~shouldInvoke",
          "timerExpired": "_.debounce~timerExpired",
          "trailingEdge": "_.debounce~trailingEdge",
          "cancel": "_.debounce~cancel",
          "flush": "_.debounce~flush",
          "debounced": "_.debounce~debounced",
          "debounced.cancel": "_.debounce~debounced.cancel",
          "debounced.flush": "_.debounce~debounced.flush"
        }
      },
      "description": "Creates a debounced function that delays invoking `func` until after `wait`\nmilliseconds have elapsed since the last time the debounced function was\ninvoked. The debounced function comes with a `cancel` method to cancel\ndelayed `func` invocations and a `flush` method to immediately invoke them.\nProvide `options` to indicate whether `func` should be invoked on the\nleading and/or trailing edge of the `wait` timeout. The `func` is invoked\nwith the last arguments provided to the debounced function. Subsequent\ncalls to the debounced function return the result of the last `func`\ninvocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the debounced function\nis invoked more than once during the `wait` timeout.\n\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil to the next tick, similar to `setTimeout` with a timeout of `0`.\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `_.debounce` and `_.throttle`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to debounce.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The number of milliseconds to delay.",
          "name": "wait"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "The options object.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Specify invoking on the leading edge of the timeout.",
          "name": "options.leading"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The maximum time `func` is allowed to be delayed before it's invoked.",
          "name": "options.maxWait"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Specify invoking on the trailing edge of the timeout.",
          "name": "options.trailing"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new debounced function."
        }
      ],
      "examples": [
        "// Avoid costly calculations while the window size is in flux.\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\n// Invoke `sendMail` when clicked, debouncing subsequent calls.\njQuery(element).on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}));\n\n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\nvar debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\nvar source = new EventSource('/stream');\njQuery(source).on('message', debounced);\n\n// Cancel the trailing debounced invocation.\njQuery(window).on('popstate', debounced.cancel);"
      ],
      "name": "debounce",
      "longname": "_.debounce",
      "kind": "function",
      "___id": "T000002R002032",
      "___s": true
    },
    {
      "comment": "/**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */",
      "meta": {
        "range": [
          339875,
          339960
        ],
        "filename": "lodash.js",
        "lineno": 10441,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020070",
          "name": "defer",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Defers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it's invoked.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to defer.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to invoke `func` with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the timer id."
        }
      ],
      "examples": [
        "_.defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after one millisecond."
      ],
      "name": "defer",
      "longname": "_.defer",
      "kind": "member",
      "___id": "T000002R002089",
      "___s": true
    },
    {
      "comment": "/**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */",
      "meta": {
        "range": [
          340591,
          340700
        ],
        "filename": "lodash.js",
        "lineno": 10464,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020085",
          "name": "delay",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Invokes `func` after `wait` milliseconds. Any additional arguments are\nprovided to `func` when it's invoked.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to delay.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of milliseconds to delay invocation.",
          "name": "wait"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to invoke `func` with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the timer id."
        }
      ],
      "examples": [
        "_.delay(function(text) {\n  console.log(text);\n}, 1000, 'later');\n// => Logs 'later' after one second."
      ],
      "name": "delay",
      "longname": "_.delay",
      "kind": "member",
      "___id": "T000002R002090",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */",
      "meta": {
        "range": [
          341198,
          341267
        ],
        "filename": "lodash.js",
        "lineno": 10486,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020104",
          "name": "flip",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        }
      },
      "description": "Creates a function that invokes `func` with arguments reversed.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to flip arguments for.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new flipped function."
        }
      ],
      "examples": [
        "var flipped = _.flip(function() {\n  return _.toArray(arguments);\n});\n\nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']"
      ],
      "name": "flip",
      "longname": "_.flip",
      "kind": "function",
      "___id": "T000002R002091",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */",
      "meta": {
        "range": [
          342894,
          343529
        ],
        "filename": "lodash.js",
        "lineno": 10534,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020113",
          "name": "memoize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "resolver"
          ]
        },
        "vars": {
          "memoized": "_.memoize~memoized",
          "": null,
          "memoized.cache": "_.memoize~memoized.cache"
        }
      },
      "description": "Creates a function that memoizes the result of `func`. If `resolver` is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is used as the map cache key. The `func`\nis invoked with the `this` binding of the memoized function.\n\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `_.memoize.Cache`\nconstructor with one whose instances implement the\n[`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of `delete`, `get`, `has`, and `set`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to have its output memoized.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to resolve the cache key.",
          "name": "resolver"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new memoized function."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n\nvar values = _.memoize(_.values);\nvalues(object);\n// => [1, 2]\n\nvalues(other);\n// => [3, 4]\n\nobject.a = 2;\nvalues(object);\n// => [1, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n\n// Replace `_.memoize.Cache`.\n_.memoize.Cache = WeakMap;"
      ],
      "name": "memoize",
      "longname": "_.memoize",
      "kind": "function",
      "___id": "T000002R002092",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */",
      "meta": {
        "range": [
          344173,
          344702
        ],
        "filename": "lodash.js",
        "lineno": 10577,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020218",
          "name": "negate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "predicate"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function that negates the result of the predicate `func`. The\n`func` predicate is invoked with the `this` binding and arguments of the\ncreated function.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The predicate to negate.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new negated function."
        }
      ],
      "examples": [
        "function isEven(n) {\n  return n % 2 == 0;\n}\n\n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]"
      ],
      "name": "negate",
      "longname": "_.negate",
      "kind": "function",
      "___id": "T000002R002101",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */",
      "meta": {
        "range": [
          345336,
          345393
        ],
        "filename": "lodash.js",
        "lineno": 10611,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020305",
          "name": "once",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        }
      },
      "description": "Creates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first invocation. The `func` is\ninvoked with the `this` binding and arguments of the created function.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to restrict.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new restricted function."
        }
      ],
      "examples": [
        "var initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// => `createApplication` is invoked once"
      ],
      "name": "once",
      "longname": "_.once",
      "kind": "function",
      "___id": "T000002R002103",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */",
      "meta": {
        "range": [
          346144,
          346731
        ],
        "filename": "lodash.js",
        "lineno": 10646,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020315",
          "name": "overArgs",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that invokes `func` with its arguments transformed.",
      "scope": "static",
      "since": "4.0.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to wrap.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "function",
              "Array.<function()>"
            ]
          },
          "optional": true,
          "variable": true,
          "defaultvalue": "[_.identity]",
          "description": "The argument transforms.",
          "name": "transforms"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "function doubled(n) {\n  return n * 2;\n}\n\nfunction square(n) {\n  return n * n;\n}\n\nvar func = _.overArgs(function(x, y) {\n  return [x, y];\n}, [square, doubled]);\n\nfunc(9, 3);\n// => [81, 6]\n\nfunc(10, 5);\n// => [100, 10]"
      ],
      "name": "overArgs",
      "longname": "_.overArgs",
      "kind": "member",
      "___id": "T000002R002104",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */",
      "meta": {
        "range": [
          347903,
          348096
        ],
        "filename": "lodash.js",
        "lineno": 10696,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020410",
          "name": "partial",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that invokes `func` with `partials` prepended to the\narguments it receives. This method is like `_.bind` except it does **not**\nalter the `this` binding.\n\nThe `_.partial.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
      "scope": "static",
      "memberof": "_",
      "since": "0.2.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to partially apply arguments to.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to be partially applied.",
          "name": "partials"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new partially applied function."
        }
      ],
      "examples": [
        "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'"
      ],
      "name": "partial",
      "longname": "_.partial",
      "kind": "member",
      "___id": "T000002R002110",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */",
      "meta": {
        "range": [
          349218,
          349427
        ],
        "filename": "lodash.js",
        "lineno": 10733,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020436",
          "name": "partialRight",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.partial` except that partially applied arguments\nare appended to the arguments it receives.\n\nThe `_.partialRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
      "scope": "static",
      "memberof": "_",
      "since": "1.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to partially apply arguments to.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to be partially applied.",
          "name": "partials"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new partially applied function."
        }
      ],
      "examples": [
        "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'"
      ],
      "name": "partialRight",
      "longname": "_.partialRight",
      "kind": "member",
      "___id": "T000002R002112",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */",
      "meta": {
        "range": [
          350221,
          350355
        ],
        "filename": "lodash.js",
        "lineno": 10760,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020462",
          "name": "rearg",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that invokes `func` with arguments arranged according\nto the specified `indexes` where the argument value at the first index is\nprovided as the first argument, the argument value at the second index is\nprovided as the second argument, and so on.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to rearrange arguments for.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number",
              "Array.<number>"
            ]
          },
          "variable": true,
          "description": "The arranged argument indexes.",
          "name": "indexes"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "var rearged = _.rearg(function(a, b, c) {\n  return [a, b, c];\n}, [2, 0, 1]);\n\nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']"
      ],
      "name": "rearg",
      "longname": "_.rearg",
      "kind": "member",
      "___id": "T000002R002114",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */",
      "meta": {
        "range": [
          351260,
          351485
        ],
        "filename": "lodash.js",
        "lineno": 10789,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020479",
          "name": "rest",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "start"
          ]
        },
        "vars": {
          "start": "_.rest~start"
        }
      },
      "description": "Creates a function that invokes `func` with the `this` binding of the\ncreated function and arguments from `start` and beyond provided as\nan array.\n\n**Note:** This method is based on the\n[rest parameter](https://mdn.io/rest_parameters).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to apply a rest parameter to.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "func.length-1",
          "description": "The start position of the rest parameter.",
          "name": "start"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "var say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'"
      ],
      "name": "rest",
      "longname": "_.rest",
      "kind": "function",
      "___id": "T000002R002115",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */",
      "meta": {
        "range": [
          352553,
          353003
        ],
        "filename": "lodash.js",
        "lineno": 10831,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020510",
          "name": "spread",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "start"
          ]
        },
        "vars": {
          "start": "_.spread~start",
          "": null
        }
      },
      "description": "Creates a function that invokes `func` with the `this` binding of the\ncreate function and an array of arguments much like\n[`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n\n**Note:** This method is based on the\n[spread operator](https://mdn.io/spread_operator).",
      "scope": "static",
      "memberof": "_",
      "since": "3.2.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to spread arguments over.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start position of the spread.",
          "name": "start"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "var say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n\nsay(['fred', 'hello']);\n// => 'fred says hello'\n\nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n\nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76"
      ],
      "name": "spread",
      "longname": "_.spread",
      "kind": "function",
      "___id": "T000002R002117",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */",
      "meta": {
        "range": [
          355266,
          355770
        ],
        "filename": "lodash.js",
        "lineno": 10891,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020572",
          "name": "throttle",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func",
            "wait",
            "options"
          ]
        },
        "vars": {
          "leading": "_.throttle~leading",
          "trailing": "_.throttle~trailing"
        }
      },
      "description": "Creates a throttled function that only invokes `func` at most once per\nevery `wait` milliseconds. The throttled function comes with a `cancel`\nmethod to cancel delayed `func` invocations and a `flush` method to\nimmediately invoke them. Provide `options` to indicate whether `func`\nshould be invoked on the leading and/or trailing edge of the `wait`\ntimeout. The `func` is invoked with the last arguments provided to the\nthrottled function. Subsequent calls to the throttled function return the\nresult of the last `func` invocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the throttled function\nis invoked more than once during the `wait` timeout.\n\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil to the next tick, similar to `setTimeout` with a timeout of `0`.\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `_.throttle` and `_.debounce`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to throttle.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The number of milliseconds to throttle invocations to.",
          "name": "wait"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "The options object.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Specify invoking on the leading edge of the timeout.",
          "name": "options.leading"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Specify invoking on the trailing edge of the timeout.",
          "name": "options.trailing"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new throttled function."
        }
      ],
      "examples": [
        "// Avoid excessively updating the position while scrolling.\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n\n// Cancel the trailing throttled invocation.\njQuery(window).on('popstate', throttled.cancel);"
      ],
      "name": "throttle",
      "longname": "_.throttle",
      "kind": "function",
      "___id": "T000002R002121",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */",
      "meta": {
        "range": [
          356203,
          356258
        ],
        "filename": "lodash.js",
        "lineno": 10924,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020638",
          "name": "unary",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        }
      },
      "description": "Creates a function that accepts up to one argument, ignoring any\nadditional arguments.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to cap arguments for.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new capped function."
        }
      ],
      "examples": [
        "_.map(['6', '8', '10'], _.unary(parseInt));\n// => [6, 8, 10]"
      ],
      "name": "unary",
      "longname": "_.unary",
      "kind": "function",
      "___id": "T000002R002129",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */",
      "meta": {
        "range": [
          357033,
          357162
        ],
        "filename": "lodash.js",
        "lineno": 10950,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020647",
          "name": "wrap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "wrapper"
          ]
        },
        "vars": {
          "wrapper": "_.wrap~wrapper"
        }
      },
      "description": "Creates a function that provides `value` to `wrapper` as its first\nargument. Any additional arguments provided to the function are appended\nto those provided to the `wrapper`. The wrapper is invoked with the `this`\nbinding of the created function.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Function",
          "value": "Function"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to wrap.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "identity",
          "description": "The wrapper function.",
          "name": "wrapper"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'"
      ],
      "name": "wrap",
      "longname": "_.wrap",
      "kind": "function",
      "___id": "T000002R002130",
      "___s": true
    },
    {
      "comment": "/**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */",
      "meta": {
        "range": [
          357942,
          358107
        ],
        "filename": "lodash.js",
        "lineno": 10990,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020666",
          "name": "castArray",
          "type": "FunctionDeclaration",
          "paramnames": []
        },
        "vars": {
          "value": "_.castArray~value"
        }
      },
      "description": "Casts `value` as an array if it's not one.",
      "scope": "static",
      "memberof": "_",
      "since": "4.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to inspect.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the cast array."
        }
      ],
      "examples": [
        "_.castArray(1);\n// => [1]\n\n_.castArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n\n_.castArray('abc');\n// => ['abc']\n\n_.castArray(null);\n// => [null]\n\n_.castArray(undefined);\n// => [undefined]\n\n_.castArray();\n// => []\n\nvar array = [1, 2, 3];\nconsole.log(_.castArray(array) === array);\n// => true"
      ],
      "name": "castArray",
      "longname": "_.castArray",
      "kind": "function",
      "___id": "T000002R002132",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */",
      "meta": {
        "range": [
          359068,
          359141
        ],
        "filename": "lodash.js",
        "lineno": 11024,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020691",
          "name": "clone",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Creates a shallow clone of `value`.\n\n**Note:** This method is loosely based on the\n[structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\nand supports cloning arrays, array buffers, booleans, date objects, maps,\nnumbers, `Object` objects, regexes, sets, strings, symbols, and typed\narrays. The own enumerable properties of `arguments` objects are cloned\nas plain objects. An empty object is returned for uncloneable values such\nas error objects, functions, DOM nodes, and WeakMaps.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to clone.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the cloned value."
        }
      ],
      "see": [
        "_.cloneDeep"
      ],
      "examples": [
        "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true"
      ],
      "name": "clone",
      "longname": "_.clone",
      "kind": "function",
      "___id": "T000002R002134",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */",
      "meta": {
        "range": [
          360146,
          360247
        ],
        "filename": "lodash.js",
        "lineno": 11059,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020701",
          "name": "cloneWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "customizer"
          ]
        }
      },
      "description": "This method is like `_.clone` except that it accepts `customizer` which\nis invoked to produce the cloned value. If `customizer` returns `undefined`,\ncloning is handled by the method instead. The `customizer` is invoked with\nup to four arguments; (value [, index|key, object, stack]).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to clone.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize cloning.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the cloned value."
        }
      ],
      "see": [
        "_.cloneDeepWith"
      ],
      "examples": [
        "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n\nvar el = _.cloneWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0"
      ],
      "name": "cloneWith",
      "longname": "_.cloneWith",
      "kind": "function",
      "___id": "T000002R002135",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */",
      "meta": {
        "range": [
          360739,
          360815
        ],
        "filename": "lodash.js",
        "lineno": 11081,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020713",
          "name": "cloneDeep",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "This method is like `_.clone` except that it recursively clones `value`.",
      "scope": "static",
      "memberof": "_",
      "since": "1.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to recursively clone.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the deep cloned value."
        }
      ],
      "see": [
        "_.clone"
      ],
      "examples": [
        "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false"
      ],
      "name": "cloneDeep",
      "longname": "_.cloneDeep",
      "kind": "function",
      "___id": "T000002R002136",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */",
      "meta": {
        "range": [
          361609,
          361713
        ],
        "filename": "lodash.js",
        "lineno": 11113,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020723",
          "name": "cloneDeepWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "customizer"
          ]
        }
      },
      "description": "This method is like `_.cloneWith` except that it recursively clones `value`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to recursively clone.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize cloning.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the deep cloned value."
        }
      ],
      "see": [
        "_.cloneWith"
      ],
      "examples": [
        "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n\nvar el = _.cloneDeepWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20"
      ],
      "name": "cloneDeepWith",
      "longname": "_.cloneDeepWith",
      "kind": "function",
      "___id": "T000002R002137",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */",
      "meta": {
        "range": [
          362544,
          362664
        ],
        "filename": "lodash.js",
        "lineno": 11141,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020735",
          "name": "conformsTo",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source"
          ]
        }
      },
      "description": "Checks if `object` conforms to `source` by invoking the predicate\nproperties of `source` with the corresponding property values of `object`.\n\n**Note:** This method is equivalent to `_.conforms` when `source` is\npartially applied.",
      "scope": "static",
      "memberof": "_",
      "since": "4.14.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property predicates to conform to.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `object` conforms, else `false`."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': 2 };\n\n_.conformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n\n_.conformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false"
      ],
      "name": "conformsTo",
      "longname": "_.conformsTo",
      "kind": "function",
      "___id": "T000002R002138",
      "___s": true
    },
    {
      "comment": "/**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */",
      "meta": {
        "range": [
          363479,
          363582
        ],
        "filename": "lodash.js",
        "lineno": 11177,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020752",
          "name": "eq",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "other"
          ]
        }
      },
      "description": "Performs a\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the values are equivalent, else `false`."
        }
      ],
      "examples": [
        "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.eq(object, object);\n// => true\n\n_.eq(object, other);\n// => false\n\n_.eq('a', 'a');\n// => true\n\n_.eq('a', Object('a'));\n// => false\n\n_.eq(NaN, NaN);\n// => true"
      ],
      "name": "eq",
      "longname": "_.eq",
      "kind": "function",
      "___id": "T000002R002139",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */",
      "meta": {
        "range": [
          364105,
          364143
        ],
        "filename": "lodash.js",
        "lineno": 11204,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020770",
          "name": "gt",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is greater than `other`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.9.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is greater than `other`,\n else `false`."
        }
      ],
      "see": [
        "_.lt"
      ],
      "examples": [
        "_.gt(3, 1);\n// => true\n\n_.gt(3, 3);\n// => false\n\n_.gt(1, 3);\n// => false"
      ],
      "name": "gt",
      "longname": "_.gt",
      "kind": "member",
      "___id": "T000002R002140",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */",
      "meta": {
        "range": [
          364694,
          364786
        ],
        "filename": "lodash.js",
        "lineno": 11229,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020776",
          "name": "gte",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is greater than or equal to `other`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.9.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is greater than or equal to\n `other`, else `false`."
        }
      ],
      "see": [
        "_.lte"
      ],
      "examples": [
        "_.gte(3, 1);\n// => true\n\n_.gte(3, 3);\n// => true\n\n_.gte(1, 3);\n// => false"
      ],
      "name": "gte",
      "longname": "_.gte",
      "kind": "member",
      "___id": "T000002R002141",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */",
      "meta": {
        "range": [
          365256,
          365494
        ],
        "filename": "lodash.js",
        "lineno": 11251,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020789",
          "name": "isArguments",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is likely an `arguments` object.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an `arguments` object,\n else `false`."
        }
      ],
      "examples": [
        "_.isArguments(function() { return arguments; }());\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false"
      ],
      "name": "isArguments",
      "longname": "_.isArguments",
      "kind": "member",
      "___id": "T000002R002142",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */",
      "meta": {
        "range": [
          366029,
          366052
        ],
        "filename": "lodash.js",
        "lineno": 11279,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020823",
          "name": "isArray",
          "type": "MemberExpression",
          "value": "Array.isArray"
        }
      },
      "description": "Checks if `value` is classified as an `Array` object.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an array, else `false`."
        }
      ],
      "examples": [
        "_.isArray([1, 2, 3]);\n// => true\n\n_.isArray(document.body.children);\n// => false\n\n_.isArray('abc');\n// => false\n\n_.isArray(_.noop);\n// => false"
      ],
      "name": "isArray",
      "longname": "_.isArray",
      "kind": "member",
      "___id": "T000002R002143",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */",
      "meta": {
        "range": [
          366508,
          366592
        ],
        "filename": "lodash.js",
        "lineno": 11298,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020829",
          "name": "isArrayBuffer",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is classified as an `ArrayBuffer` object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an array buffer, else `false`."
        }
      ],
      "examples": [
        "_.isArrayBuffer(new ArrayBuffer(2));\n// => true\n\n_.isArrayBuffer(new Array(2));\n// => false"
      ],
      "name": "isArrayBuffer",
      "longname": "_.isArrayBuffer",
      "kind": "member",
      "___id": "T000002R002144",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */",
      "meta": {
        "range": [
          367313,
          367424
        ],
        "filename": "lodash.js",
        "lineno": 11325,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020837",
          "name": "isArrayLike",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is array-like, else `false`."
        }
      ],
      "examples": [
        "_.isArrayLike([1, 2, 3]);\n// => true\n\n_.isArrayLike(document.body.children);\n// => true\n\n_.isArrayLike('abc');\n// => true\n\n_.isArrayLike(_.noop);\n// => false"
      ],
      "name": "isArrayLike",
      "longname": "_.isArrayLike",
      "kind": "function",
      "___id": "T000002R002145",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */",
      "meta": {
        "range": [
          368054,
          368151
        ],
        "filename": "lodash.js",
        "lineno": 11354,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020856",
          "name": "isArrayLikeObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "This method is like `_.isArrayLike` except that it also checks if `value`\nis an object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an array-like object,\n else `false`."
        }
      ],
      "examples": [
        "_.isArrayLikeObject([1, 2, 3]);\n// => true\n\n_.isArrayLikeObject(document.body.children);\n// => true\n\n_.isArrayLikeObject('abc');\n// => false\n\n_.isArrayLikeObject(_.noop);\n// => false"
      ],
      "name": "isArrayLikeObject",
      "longname": "_.isArrayLikeObject",
      "kind": "function",
      "___id": "T000002R002146",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */",
      "meta": {
        "range": [
          368573,
          368719
        ],
        "filename": "lodash.js",
        "lineno": 11375,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020868",
          "name": "isBoolean",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is classified as a boolean primitive or object.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a boolean, else `false`."
        }
      ],
      "examples": [
        "_.isBoolean(false);\n// => true\n\n_.isBoolean(null);\n// => false"
      ],
      "name": "isBoolean",
      "longname": "_.isBoolean",
      "kind": "function",
      "___id": "T000002R002147",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */",
      "meta": {
        "range": [
          369128,
          369166
        ],
        "filename": "lodash.js",
        "lineno": 11397,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020891",
          "name": "isBuffer",
          "type": "LogicalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is a buffer.",
      "scope": "static",
      "memberof": "_",
      "since": "4.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a buffer, else `false`."
        }
      ],
      "examples": [
        "_.isBuffer(new Buffer(2));\n// => true\n\n_.isBuffer(new Uint8Array(2));\n// => false"
      ],
      "name": "isBuffer",
      "longname": "_.isBuffer",
      "kind": "member",
      "___id": "T000002R002148",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */",
      "meta": {
        "range": [
          369595,
          369651
        ],
        "filename": "lodash.js",
        "lineno": 11416,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020897",
          "name": "isDate",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is classified as a `Date` object.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a date object, else `false`."
        }
      ],
      "examples": [
        "_.isDate(new Date);\n// => true\n\n_.isDate('Mon April 23 2012');\n// => false"
      ],
      "name": "isDate",
      "longname": "_.isDate",
      "kind": "member",
      "___id": "T000002R002149",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */",
      "meta": {
        "range": [
          370067,
          370183
        ],
        "filename": "lodash.js",
        "lineno": 11435,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020905",
          "name": "isElement",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is likely a DOM element.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a DOM element, else `false`."
        }
      ],
      "examples": [
        "_.isElement(document.body);\n// => true\n\n_.isElement('<body>');\n// => false"
      ],
      "name": "isElement",
      "longname": "_.isElement",
      "kind": "function",
      "___id": "T000002R002150",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */",
      "meta": {
        "range": [
          371112,
          371770
        ],
        "filename": "lodash.js",
        "lineno": 11472,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100020924",
          "name": "isEmpty",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "tag": "_.isEmpty~tag",
          "key": "_.isEmpty~key"
        }
      },
      "description": "Checks if `value` is an empty object, collection, map, or set.\n\nObjects are considered empty if they have no own enumerable string keyed\nproperties.\n\nArray-like values such as `arguments` objects, arrays, buffers, strings, or\njQuery-like collections are considered empty if they have a `length` of `0`.\nSimilarly, maps and sets are considered empty if they have a `size` of `0`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is empty, else `false`."
        }
      ],
      "examples": [
        "_.isEmpty(null);\n// => true\n\n_.isEmpty(true);\n// => true\n\n_.isEmpty(1);\n// => true\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({ 'a': 1 });\n// => false"
      ],
      "name": "isEmpty",
      "longname": "_.isEmpty",
      "kind": "function",
      "___id": "T000002R002151",
      "___s": true
    },
    {
      "comment": "/**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are **not** supported.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */",
      "meta": {
        "range": [
          372708,
          372786
        ],
        "filename": "lodash.js",
        "lineno": 11524,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021023",
          "name": "isEqual",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "other"
          ]
        }
      },
      "description": "Performs a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are **not** supported.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the values are equivalent, else `false`."
        }
      ],
      "examples": [
        "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.isEqual(object, other);\n// => true\n\nobject === other;\n// => false"
      ],
      "name": "isEqual",
      "longname": "_.isEqual",
      "kind": "function",
      "___id": "T000002R002154",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */",
      "meta": {
        "range": [
          373912,
          374199
        ],
        "filename": "lodash.js",
        "lineno": 11560,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021033",
          "name": "isEqualWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "other",
            "customizer"
          ]
        },
        "vars": {
          "customizer": "_.isEqualWith~customizer",
          "result": "_.isEqualWith~result"
        }
      },
      "description": "This method is like `_.isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: (objValue, othValue [, index|key, object, other, stack]).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize comparisons.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the values are equivalent, else `false`."
        }
      ],
      "examples": [
        "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\n_.isEqualWith(array, other, customizer);\n// => true"
      ],
      "name": "isEqualWith",
      "longname": "_.isEqualWith",
      "kind": "function",
      "___id": "T000002R002155",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */",
      "meta": {
        "range": [
          374697,
          374981
        ],
        "filename": "lodash.js",
        "lineno": 11584,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021072",
          "name": "isError",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "tag": "_.isError~tag"
        }
      },
      "description": "Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n`SyntaxError`, `TypeError`, or `URIError` object.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an error object, else `false`."
        }
      ],
      "examples": [
        "_.isError(new Error);\n// => true\n\n_.isError(Error);\n// => false"
      ],
      "name": "isError",
      "longname": "_.isError",
      "kind": "function",
      "___id": "T000002R002158",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */",
      "meta": {
        "range": [
          375609,
          375705
        ],
        "filename": "lodash.js",
        "lineno": 11619,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021117",
          "name": "isFinite",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is a finite primitive number.\n\n**Note:** This method is based on\n[`Number.isFinite`](https://mdn.io/Number/isFinite).",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a finite number, else `false`."
        }
      ],
      "examples": [
        "_.isFinite(3);\n// => true\n\n_.isFinite(Number.MIN_VALUE);\n// => true\n\n_.isFinite(Infinity);\n// => false\n\n_.isFinite('3');\n// => false"
      ],
      "name": "isFinite",
      "longname": "_.isFinite",
      "kind": "function",
      "___id": "T000002R002160",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */",
      "meta": {
        "range": [
          376117,
          376475
        ],
        "filename": "lodash.js",
        "lineno": 11640,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021130",
          "name": "isFunction",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "tag": "_.isFunction~tag"
        }
      },
      "description": "Checks if `value` is classified as a `Function` object.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a function, else `false`."
        }
      ],
      "examples": [
        "_.isFunction(_);\n// => true\n\n_.isFunction(/abc/);\n// => false"
      ],
      "name": "isFunction",
      "longname": "_.isFunction",
      "kind": "function",
      "___id": "T000002R002161",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */",
      "meta": {
        "range": [
          377090,
          377191
        ],
        "filename": "lodash.js",
        "lineno": 11676,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021160",
          "name": "isInteger",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is an integer.\n\n**Note:** This method is based on\n[`Number.isInteger`](https://mdn.io/Number/isInteger).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an integer, else `false`."
        }
      ],
      "examples": [
        "_.isInteger(3);\n// => true\n\n_.isInteger(Number.MIN_VALUE);\n// => false\n\n_.isInteger(Infinity);\n// => false\n\n_.isInteger('3');\n// => false"
      ],
      "name": "isInteger",
      "longname": "_.isInteger",
      "kind": "function",
      "___id": "T000002R002163",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */",
      "meta": {
        "range": [
          377846,
          377986
        ],
        "filename": "lodash.js",
        "lineno": 11706,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021175",
          "name": "isLength",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is a valid array-like length.\n\n**Note:** This method is loosely based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a valid length, else `false`."
        }
      ],
      "examples": [
        "_.isLength(3);\n// => true\n\n_.isLength(Number.MIN_VALUE);\n// => false\n\n_.isLength(Infinity);\n// => false\n\n_.isLength('3');\n// => false"
      ],
      "name": "isLength",
      "longname": "_.isLength",
      "kind": "function",
      "___id": "T000002R002164",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */",
      "meta": {
        "range": [
          378673,
          378808
        ],
        "filename": "lodash.js",
        "lineno": 11736,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021199",
          "name": "isObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "type": "_.isObject~type"
        }
      },
      "description": "Checks if `value` is the\n[language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\nof `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is an object, else `false`."
        }
      ],
      "examples": [
        "_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(_.noop);\n// => true\n\n_.isObject(null);\n// => false"
      ],
      "name": "isObject",
      "longname": "_.isObject",
      "kind": "function",
      "___id": "T000002R002165",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */",
      "meta": {
        "range": [
          379407,
          379499
        ],
        "filename": "lodash.js",
        "lineno": 11765,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021220",
          "name": "isObjectLike",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is object-like, else `false`."
        }
      ],
      "examples": [
        "_.isObjectLike({});\n// => true\n\n_.isObjectLike([1, 2, 3]);\n// => true\n\n_.isObjectLike(_.noop);\n// => false\n\n_.isObjectLike(null);\n// => false"
      ],
      "name": "isObjectLike",
      "longname": "_.isObjectLike",
      "kind": "function",
      "___id": "T000002R002167",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */",
      "meta": {
        "range": [
          379907,
          379959
        ],
        "filename": "lodash.js",
        "lineno": 11786,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021234",
          "name": "isMap",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is classified as a `Map` object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a map, else `false`."
        }
      ],
      "examples": [
        "_.isMap(new Map);\n// => true\n\n_.isMap(new WeakMap);\n// => false"
      ],
      "name": "isMap",
      "longname": "_.isMap",
      "kind": "member",
      "___id": "T000002R002168",
      "___s": true
    },
    {
      "comment": "/**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */",
      "meta": {
        "range": [
          380918,
          381043
        ],
        "filename": "lodash.js",
        "lineno": 11816,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021242",
          "name": "isMatch",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source"
          ]
        }
      },
      "description": "Performs a partial deep comparison between `object` and `source` to\ndetermine if `object` contains equivalent property values.\n\n**Note:** This method is equivalent to `_.matches` when `source` is\npartially applied.\n\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `_.isEqual`\nfor a list of supported value comparisons.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property values to match.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `object` is a match, else `false`."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': 2 };\n\n_.isMatch(object, { 'b': 2 });\n// => true\n\n_.isMatch(object, { 'b': 1 });\n// => false"
      ],
      "name": "isMatch",
      "longname": "_.isMatch",
      "kind": "function",
      "___id": "T000002R002169",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */",
      "meta": {
        "range": [
          382184,
          382393
        ],
        "filename": "lodash.js",
        "lineno": 11852,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021259",
          "name": "isMatchWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source",
            "customizer"
          ]
        },
        "vars": {
          "customizer": "_.isMatchWith~customizer"
        }
      },
      "description": "This method is like `_.isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with five\narguments: (objValue, srcValue, index|key, object, source).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property values to match.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize comparisons.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `object` is a match, else `false`."
        }
      ],
      "examples": [
        "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n\nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n\n_.isMatchWith(object, source, customizer);\n// => true"
      ],
      "name": "isMatchWith",
      "longname": "_.isMatchWith",
      "kind": "function",
      "___id": "T000002R002170",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */",
      "meta": {
        "range": [
          383119,
          383377
        ],
        "filename": "lodash.js",
        "lineno": 11885,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021284",
          "name": "isNaN",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is `NaN`.\n\n**Note:** This method is based on\n[`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\nglobal [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n`undefined` and other non-number values.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is `NaN`, else `false`."
        }
      ],
      "examples": [
        "_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false"
      ],
      "name": "isNaN",
      "longname": "_.isNaN",
      "kind": "function",
      "___id": "T000002R002172",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */",
      "meta": {
        "range": [
          384339,
          384486
        ],
        "filename": "lodash.js",
        "lineno": 11918,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021297",
          "name": "isNative",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is a pristine native function.\n\n**Note:** This method can't reliably detect native functions in the presence\nof the core-js package because core-js circumvents this kind of detection.\nDespite multiple requests, the core-js maintainer has made it clear: any\nattempt to fix the detection will be obstructed. As a result, we're left\nwith little choice but to throw an error. Unfortunately, this also affects\npackages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\nwhich rely on core-js.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a native function,\n else `false`."
        }
      ],
      "examples": [
        "_.isNative(Array.prototype.push);\n// => true\n\n_.isNative(_);\n// => false"
      ],
      "name": "isNative",
      "longname": "_.isNative",
      "kind": "function",
      "___id": "T000002R002173",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */",
      "meta": {
        "range": [
          384863,
          384922
        ],
        "filename": "lodash.js",
        "lineno": 11942,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021314",
          "name": "isNull",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is `null`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is `null`, else `false`."
        }
      ],
      "examples": [
        "_.isNull(null);\n// => true\n\n_.isNull(void 0);\n// => false"
      ],
      "name": "isNull",
      "longname": "_.isNull",
      "kind": "function",
      "___id": "T000002R002174",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */",
      "meta": {
        "range": [
          385359,
          385416
        ],
        "filename": "lodash.js",
        "lineno": 11966,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021322",
          "name": "isNil",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is `null` or `undefined`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is nullish, else `false`."
        }
      ],
      "examples": [
        "_.isNil(null);\n// => true\n\n_.isNil(void 0);\n// => true\n\n_.isNil(NaN);\n// => false"
      ],
      "name": "isNil",
      "longname": "_.isNil",
      "kind": "function",
      "___id": "T000002R002175",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */",
      "meta": {
        "range": [
          386087,
          386225
        ],
        "filename": "lodash.js",
        "lineno": 11996,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021330",
          "name": "isNumber",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is classified as a `Number` primitive or object.\n\n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\nclassified as numbers, use the `_.isFinite` method.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a number, else `false`."
        }
      ],
      "examples": [
        "_.isNumber(3);\n// => true\n\n_.isNumber(Number.MIN_VALUE);\n// => true\n\n_.isNumber(Infinity);\n// => true\n\n_.isNumber('3');\n// => false"
      ],
      "name": "isNumber",
      "longname": "_.isNumber",
      "kind": "function",
      "___id": "T000002R002176",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */",
      "meta": {
        "range": [
          386942,
          387373
        ],
        "filename": "lodash.js",
        "lineno": 12029,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021349",
          "name": "isPlainObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "proto": "_.isPlainObject~proto",
          "Ctor": "_.isPlainObject~Ctor"
        }
      },
      "description": "Checks if `value` is a plain object, that is, an object created by the\n`Object` constructor or one with a `[[Prototype]]` of `null`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.8.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a plain object, else `false`."
        }
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n}\n\n_.isPlainObject(new Foo);\n// => false\n\n_.isPlainObject([1, 2, 3]);\n// => false\n\n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\n_.isPlainObject(Object.create(null));\n// => true"
      ],
      "name": "isPlainObject",
      "longname": "_.isPlainObject",
      "kind": "function",
      "___id": "T000002R002177",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */",
      "meta": {
        "range": [
          387787,
          387851
        ],
        "filename": "lodash.js",
        "lineno": 12059,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021411",
          "name": "isRegExp",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is classified as a `RegExp` object.",
      "scope": "static",
      "memberof": "_",
      "since": "0.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a regexp, else `false`."
        }
      ],
      "examples": [
        "_.isRegExp(/abc/);\n// => true\n\n_.isRegExp('/abc/');\n// => false"
      ],
      "name": "isRegExp",
      "longname": "_.isRegExp",
      "kind": "member",
      "___id": "T000002R002180",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */",
      "meta": {
        "range": [
          388621,
          388748
        ],
        "filename": "lodash.js",
        "lineno": 12088,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021419",
          "name": "isSafeInteger",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\ndouble precision number which isn't the result of a rounded unsafe integer.\n\n**Note:** This method is based on\n[`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a safe integer, else `false`."
        }
      ],
      "examples": [
        "_.isSafeInteger(3);\n// => true\n\n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n\n_.isSafeInteger(Infinity);\n// => false\n\n_.isSafeInteger('3');\n// => false"
      ],
      "name": "isSafeInteger",
      "longname": "_.isSafeInteger",
      "kind": "function",
      "___id": "T000002R002181",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */",
      "meta": {
        "range": [
          389156,
          389208
        ],
        "filename": "lodash.js",
        "lineno": 12109,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021437",
          "name": "isSet",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is classified as a `Set` object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a set, else `false`."
        }
      ],
      "examples": [
        "_.isSet(new Set);\n// => true\n\n_.isSet(new WeakSet);\n// => false"
      ],
      "name": "isSet",
      "longname": "_.isSet",
      "kind": "member",
      "___id": "T000002R002182",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */",
      "meta": {
        "range": [
          389626,
          389783
        ],
        "filename": "lodash.js",
        "lineno": 12128,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021445",
          "name": "isString",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is classified as a `String` primitive or object.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a string, else `false`."
        }
      ],
      "examples": [
        "_.isString('abc');\n// => true\n\n_.isString(1);\n// => false"
      ],
      "name": "isString",
      "longname": "_.isString",
      "kind": "function",
      "___id": "T000002R002183",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */",
      "meta": {
        "range": [
          390214,
          390352
        ],
        "filename": "lodash.js",
        "lineno": 12150,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021469",
          "name": "isSymbol",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is classified as a `Symbol` primitive or object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a symbol, else `false`."
        }
      ],
      "examples": [
        "_.isSymbol(Symbol.iterator);\n// => true\n\n_.isSymbol('abc');\n// => false"
      ],
      "name": "isSymbol",
      "longname": "_.isSymbol",
      "kind": "function",
      "___id": "T000002R002184",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */",
      "meta": {
        "range": [
          390779,
          390859
        ],
        "filename": "lodash.js",
        "lineno": 12172,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021489",
          "name": "isTypedArray",
          "type": "ConditionalExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is classified as a typed array.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a typed array, else `false`."
        }
      ],
      "examples": [
        "_.isTypedArray(new Uint8Array);\n// => true\n\n_.isTypedArray([]);\n// => false"
      ],
      "name": "isTypedArray",
      "longname": "_.isTypedArray",
      "kind": "member",
      "___id": "T000002R002185",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */",
      "meta": {
        "range": [
          391257,
          391326
        ],
        "filename": "lodash.js",
        "lineno": 12191,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021497",
          "name": "isUndefined",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is `undefined`.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is `undefined`, else `false`."
        }
      ],
      "examples": [
        "_.isUndefined(void 0);\n// => true\n\n_.isUndefined(null);\n// => false"
      ],
      "name": "isUndefined",
      "longname": "_.isUndefined",
      "kind": "function",
      "___id": "T000002R002186",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */",
      "meta": {
        "range": [
          391747,
          391845
        ],
        "filename": "lodash.js",
        "lineno": 12212,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021505",
          "name": "isWeakMap",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is classified as a `WeakMap` object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a weak map, else `false`."
        }
      ],
      "examples": [
        "_.isWeakMap(new WeakMap);\n// => true\n\n_.isWeakMap(new Map);\n// => false"
      ],
      "name": "isWeakMap",
      "longname": "_.isWeakMap",
      "kind": "function",
      "___id": "T000002R002187",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */",
      "meta": {
        "range": [
          392266,
          392368
        ],
        "filename": "lodash.js",
        "lineno": 12233,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021519",
          "name": "isWeakSet",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Checks if `value` is classified as a `WeakSet` object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is a weak set, else `false`."
        }
      ],
      "examples": [
        "_.isWeakSet(new WeakSet);\n// => true\n\n_.isWeakSet(new Set);\n// => false"
      ],
      "name": "isWeakSet",
      "longname": "_.isWeakSet",
      "kind": "function",
      "___id": "T000002R002188",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */",
      "meta": {
        "range": [
          392885,
          392923
        ],
        "filename": "lodash.js",
        "lineno": 12260,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021534",
          "name": "lt",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is less than `other`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.9.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is less than `other`,\n else `false`."
        }
      ],
      "see": [
        "_.gt"
      ],
      "examples": [
        "_.lt(1, 3);\n// => true\n\n_.lt(3, 3);\n// => false\n\n_.lt(3, 1);\n// => false"
      ],
      "name": "lt",
      "longname": "_.lt",
      "kind": "member",
      "___id": "T000002R002189",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */",
      "meta": {
        "range": [
          393468,
          393560
        ],
        "filename": "lodash.js",
        "lineno": 12285,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021540",
          "name": "lte",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Checks if `value` is less than or equal to `other`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.9.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to compare.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The other value to compare.",
          "name": "other"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `value` is less than or equal to\n `other`, else `false`."
        }
      ],
      "see": [
        "_.gte"
      ],
      "examples": [
        "_.lte(1, 3);\n// => true\n\n_.lte(3, 3);\n// => true\n\n_.lte(3, 1);\n// => false"
      ],
      "name": "lte",
      "longname": "_.lte",
      "kind": "member",
      "___id": "T000002R002190",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */",
      "meta": {
        "range": [
          394035,
          394479
        ],
        "filename": "lodash.js",
        "lineno": 12312,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021552",
          "name": "toArray",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "tag": "_.toArray~tag",
          "func": "_.toArray~func"
        }
      },
      "description": "Converts `value` to an array.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the converted array."
        }
      ],
      "examples": [
        "_.toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n\n_.toArray('abc');\n// => ['a', 'b', 'c']\n\n_.toArray(1);\n// => []\n\n_.toArray(null);\n// => []"
      ],
      "name": "toArray",
      "longname": "_.toArray",
      "kind": "function",
      "___id": "T000002R002191",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */",
      "meta": {
        "range": [
          394981,
          395293
        ],
        "filename": "lodash.js",
        "lineno": 12351,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021615",
          "name": "toFinite",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "value": "_.toFinite~value",
          "sign": "_.toFinite~sign"
        }
      },
      "description": "Converts `value` to a finite number.",
      "scope": "static",
      "memberof": "_",
      "since": "4.12.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the converted number."
        }
      ],
      "examples": [
        "_.toFinite(3.2);\n// => 3.2\n\n_.toFinite(Number.MIN_VALUE);\n// => 5e-324\n\n_.toFinite(Infinity);\n// => 1.7976931348623157e+308\n\n_.toFinite('3.2');\n// => 3.2"
      ],
      "name": "toFinite",
      "longname": "_.toFinite",
      "kind": "function",
      "___id": "T000002R002194",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */",
      "meta": {
        "range": [
          395926,
          396110
        ],
        "filename": "lodash.js",
        "lineno": 12389,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021667",
          "name": "toInteger",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "result": "_.toInteger~result",
          "remainder": "_.toInteger~remainder"
        }
      },
      "description": "Converts `value` to an integer.\n\n**Note:** This method is loosely based on\n[`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the converted integer."
        }
      ],
      "examples": [
        "_.toInteger(3.2);\n// => 3\n\n_.toInteger(Number.MIN_VALUE);\n// => 0\n\n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n\n_.toInteger('3.2');\n// => 3"
      ],
      "name": "toInteger",
      "longname": "_.toInteger",
      "kind": "function",
      "___id": "T000002R002197",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */",
      "meta": {
        "range": [
          396774,
          396881
        ],
        "filename": "lodash.js",
        "lineno": 12423,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021694",
          "name": "toLength",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `value` to an integer suitable for use as the length of an\narray-like object.\n\n**Note:** This method is based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the converted integer."
        }
      ],
      "examples": [
        "_.toLength(3.2);\n// => 3\n\n_.toLength(Number.MIN_VALUE);\n// => 0\n\n_.toLength(Infinity);\n// => 4294967295\n\n_.toLength('3.2');\n// => 3"
      ],
      "name": "toLength",
      "longname": "_.toLength",
      "kind": "function",
      "___id": "T000002R002200",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */",
      "meta": {
        "range": [
          397350,
          398016
        ],
        "filename": "lodash.js",
        "lineno": 12450,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021709",
          "name": "toNumber",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "other": "_.toNumber~other",
          "value": "_.toNumber~value",
          "isBinary": "_.toNumber~isBinary"
        }
      },
      "description": "Converts `value` to a number.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to process.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the number."
        }
      ],
      "examples": [
        "_.toNumber(3.2);\n// => 3.2\n\n_.toNumber(Number.MIN_VALUE);\n// => 5e-324\n\n_.toNumber(Infinity);\n// => Infinity\n\n_.toNumber('3.2');\n// => 3.2"
      ],
      "name": "toNumber",
      "longname": "_.toNumber",
      "kind": "function",
      "___id": "T000002R002201",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */",
      "meta": {
        "range": [
          398674,
          398758
        ],
        "filename": "lodash.js",
        "lineno": 12495,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021819",
          "name": "toPlainObject",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `value` to a plain object flattening inherited enumerable string\nkeyed properties of `value` to own properties of the plain object.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the converted plain object."
        }
      ],
      "examples": [
        "function Foo() {\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.assign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n\n_.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }"
      ],
      "name": "toPlainObject",
      "longname": "_.toPlainObject",
      "kind": "function",
      "___id": "T000002R002206",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */",
      "meta": {
        "range": [
          399328,
          399444
        ],
        "filename": "lodash.js",
        "lineno": 12523,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021830",
          "name": "toSafeInteger",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `value` to a safe integer. A safe integer can be compared and\nrepresented correctly.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the converted integer."
        }
      ],
      "examples": [
        "_.toSafeInteger(3.2);\n// => 3\n\n_.toSafeInteger(Number.MIN_VALUE);\n// => 0\n\n_.toSafeInteger(Infinity);\n// => 9007199254740991\n\n_.toSafeInteger('3.2');\n// => 3"
      ],
      "name": "toSafeInteger",
      "longname": "_.toSafeInteger",
      "kind": "function",
      "___id": "T000002R002207",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */",
      "meta": {
        "range": [
          399958,
          400045
        ],
        "filename": "lodash.js",
        "lineno": 12548,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021843",
          "name": "toString",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `value` to a string. An empty string is returned for `null`\nand `undefined` values. The sign of `-0` is preserved.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Lang",
          "value": "Lang"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the converted string."
        }
      ],
      "examples": [
        "_.toString(null);\n// => ''\n\n_.toString(-0);\n// => '-0'\n\n_.toString([1, 2, 3]);\n// => '1,2,3'"
      ],
      "name": "toString",
      "longname": "_.toString",
      "kind": "function",
      "___id": "T000002R002208",
      "___s": true
    },
    {
      "comment": "/**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */",
      "meta": {
        "range": [
          401066,
          401400
        ],
        "filename": "lodash.js",
        "lineno": 12586,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021857",
          "name": "assign",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Assigns own enumerable string keyed properties of source objects to the\ndestination object. Source objects are applied from left to right.\nSubsequent sources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object` and is loosely based on\n[`Object.assign`](https://mdn.io/Object/assign).",
      "scope": "static",
      "memberof": "_",
      "since": "0.10.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.assignIn"
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }"
      ],
      "name": "assign",
      "longname": "_.assign",
      "kind": "member",
      "___id": "T000002R002209",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */",
      "meta": {
        "range": [
          402177,
          402286
        ],
        "filename": "lodash.js",
        "lineno": 12629,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021906",
          "name": "assignIn",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.assign` except that it iterates over own and\ninherited source properties.\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "alias": "extend",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.assign"
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assignIn({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }"
      ],
      "name": "extend",
      "longname": "_.extend",
      "kind": "member",
      "___id": "T000002R002211",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */",
      "meta": {
        "range": [
          403363,
          403510
        ],
        "filename": "lodash.js",
        "lineno": 12662,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021923",
          "name": "assignInWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.assignIn` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "alias": "extendWith",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize assigned values.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.assignWith"
      ],
      "examples": [
        "function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignInWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }"
      ],
      "name": "extendWith",
      "longname": "_.extendWith",
      "kind": "member",
      "___id": "T000002R002212",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */",
      "meta": {
        "range": [
          404560,
          404703
        ],
        "filename": "lodash.js",
        "lineno": 12694,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021943",
          "name": "assignWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.assign` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize assigned values.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.assignInWith"
      ],
      "examples": [
        "function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }"
      ],
      "name": "assignWith",
      "longname": "_.assignWith",
      "kind": "member",
      "___id": "T000002R002213",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */",
      "meta": {
        "range": [
          405229,
          405250
        ],
        "filename": "lodash.js",
        "lineno": 12715,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021963",
          "name": "at",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of values corresponding to `paths` of `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "1.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string",
              "Array.<string>"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The property paths of elements to pick.",
          "name": "paths"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the picked values."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n_.at(object, ['a[0].b.c', 'a[1]']);\n// => [3, 4]"
      ],
      "name": "at",
      "longname": "_.at",
      "kind": "member",
      "___id": "T000002R002214",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */",
      "meta": {
        "range": [
          406160,
          406315
        ],
        "filename": "lodash.js",
        "lineno": 12751,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021968",
          "name": "create",
          "type": "FunctionDeclaration",
          "paramnames": [
            "prototype",
            "properties"
          ]
        },
        "vars": {
          "result": "_.create~result"
        }
      },
      "description": "Creates an object that inherits from the `prototype` object. If a\n`properties` object is given, its own enumerable string keyed properties\nare assigned to the created object.",
      "scope": "static",
      "memberof": "_",
      "since": "2.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inherit from.",
          "name": "prototype"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "The properties to assign to the object.",
          "name": "properties"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nfunction Circle() {\n  Shape.call(this);\n}\n\nCircle.prototype = _.create(Shape.prototype, {\n  'constructor': Circle\n});\n\nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n\ncircle instanceof Shape;\n// => true"
      ],
      "name": "create",
      "longname": "_.create",
      "kind": "function",
      "___id": "T000002R002215",
      "___s": true
    },
    {
      "comment": "/**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */",
      "meta": {
        "range": [
          407086,
          407226
        ],
        "filename": "lodash.js",
        "lineno": 12777,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100021988",
          "name": "defaults",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Assigns own and inherited enumerable string keyed properties of source\nobjects to the destination object for all destination properties that\nresolve to `undefined`. Source objects are applied from left to right.\nOnce a property is set, additional values of the same property are ignored.\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.defaultsDeep"
      ],
      "examples": [
        "_.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }"
      ],
      "name": "defaults",
      "longname": "_.defaults",
      "kind": "member",
      "___id": "T000002R002217",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */",
      "meta": {
        "range": [
          407808,
          407946
        ],
        "filename": "lodash.js",
        "lineno": 12801,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022009",
          "name": "defaultsDeep",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.defaults` except that it recursively assigns\ndefault properties.\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.10.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.defaults"
      ],
      "examples": [
        "_.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }"
      ],
      "name": "defaultsDeep",
      "longname": "_.defaultsDeep",
      "kind": "member",
      "___id": "T000002R002218",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */",
      "meta": {
        "range": [
          409149,
          409265
        ],
        "filename": "lodash.js",
        "lineno": 12841,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022029",
          "name": "findKey",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "predicate"
          ]
        }
      },
      "description": "This method is like `_.find` except that it returns the key of the first\nelement `predicate` returns truthy for instead of the element itself.",
      "scope": "static",
      "memberof": "_",
      "since": "1.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "undefined"
            ]
          },
          "description": "Returns the key of the matched element,\n else `undefined`."
        }
      ],
      "examples": [
        "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'"
      ],
      "name": "findKey",
      "longname": "_.findKey",
      "kind": "function",
      "___id": "T000002R002219",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */",
      "meta": {
        "range": [
          410461,
          410586
        ],
        "filename": "lodash.js",
        "lineno": 12880,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022043",
          "name": "findLastKey",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "predicate"
          ]
        }
      },
      "description": "This method is like `_.findKey` except that it iterates over elements of\na collection in the opposite order.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "undefined"
            ]
          },
          "description": "Returns the key of the matched element,\n else `undefined`."
        }
      ],
      "examples": [
        "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `_.findKey` returns 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.findLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findLastKey(users, 'active');\n// => 'pebbles'"
      ],
      "name": "findLastKey",
      "longname": "_.findLastKey",
      "kind": "function",
      "___id": "T000002R002220",
      "___s": true
    },
    {
      "comment": "/**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */",
      "meta": {
        "range": [
          411496,
          411642
        ],
        "filename": "lodash.js",
        "lineno": 12912,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022057",
          "name": "forIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        }
      },
      "description": "Iterates over own and inherited enumerable string keyed properties of an\nobject and invokes `iteratee` for each property. The iteratee is invoked\nwith three arguments: (value, key, object). Iteratee functions may exit\niteration early by explicitly returning `false`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.forInRight"
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (iteration order is not guaranteed)."
      ],
      "name": "forIn",
      "longname": "_.forIn",
      "kind": "function",
      "___id": "T000002R002221",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */",
      "meta": {
        "range": [
          412383,
          412539
        ],
        "filename": "lodash.js",
        "lineno": 12944,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022076",
          "name": "forInRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.forIn` except that it iterates over properties of\n`object` in the opposite order.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.forIn"
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'."
      ],
      "name": "forInRight",
      "longname": "_.forInRight",
      "kind": "function",
      "___id": "T000002R002222",
      "___s": true
    },
    {
      "comment": "/**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */",
      "meta": {
        "range": [
          413431,
          413541
        ],
        "filename": "lodash.js",
        "lineno": 12978,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022095",
          "name": "forOwn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        }
      },
      "description": "Iterates over own enumerable string keyed properties of an object and\ninvokes `iteratee` for each property. The iteratee is invoked with three\narguments: (value, key, object). Iteratee functions may exit iteration\nearly by explicitly returning `false`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.forOwnRight"
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
      ],
      "name": "forOwn",
      "longname": "_.forOwn",
      "kind": "function",
      "___id": "T000002R002223",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */",
      "meta": {
        "range": [
          414274,
          414394
        ],
        "filename": "lodash.js",
        "lineno": 13008,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022110",
          "name": "forOwnRight",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.forOwn` except that it iterates over properties of\n`object` in the opposite order.",
      "scope": "static",
      "memberof": "_",
      "since": "2.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "see": [
        "_.forOwn"
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'."
      ],
      "name": "forOwnRight",
      "longname": "_.forOwnRight",
      "kind": "function",
      "___id": "T000002R002224",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */",
      "meta": {
        "range": [
          414969,
          415075
        ],
        "filename": "lodash.js",
        "lineno": 13035,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022125",
          "name": "functions",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of function property names from own enumerable properties\nof `object`.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the function names."
        }
      ],
      "see": [
        "_.functionsIn"
      ],
      "examples": [
        "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functions(new Foo);\n// => ['a', 'b']"
      ],
      "name": "functions",
      "longname": "_.functions",
      "kind": "function",
      "___id": "T000002R002225",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */",
      "meta": {
        "range": [
          415669,
          415779
        ],
        "filename": "lodash.js",
        "lineno": 13062,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022141",
          "name": "functionsIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of function property names from own and inherited\nenumerable properties of `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to inspect.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the function names."
        }
      ],
      "see": [
        "_.functions"
      ],
      "examples": [
        "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functionsIn(new Foo);\n// => ['a', 'b', 'c']"
      ],
      "name": "functionsIn",
      "longname": "_.functionsIn",
      "kind": "function",
      "___id": "T000002R002226",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */",
      "meta": {
        "range": [
          416541,
          416719
        ],
        "filename": "lodash.js",
        "lineno": 13091,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022157",
          "name": "get",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "defaultValue"
          ]
        },
        "vars": {
          "result": "_.get~result"
        }
      },
      "description": "Gets the value at `path` of `object`. If the resolved value is\n`undefined`, the `defaultValue` is returned in its place.",
      "scope": "static",
      "memberof": "_",
      "since": "3.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to get.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The value returned for `undefined` resolved values.",
          "name": "defaultValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the resolved value."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.get(object, 'a[0].b.c');\n// => 3\n\n_.get(object, ['a', '0', 'b', 'c']);\n// => 3\n\n_.get(object, 'a.b.c', 'default');\n// => 'default'"
      ],
      "name": "get",
      "longname": "_.get",
      "kind": "function",
      "___id": "T000002R002227",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */",
      "meta": {
        "range": [
          417402,
          417499
        ],
        "filename": "lodash.js",
        "lineno": 13123,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022182",
          "name": "has",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path"
          ]
        }
      },
      "description": "Checks if `path` is a direct property of `object`.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path to check.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `path` exists, else `false`."
        }
      ],
      "examples": [
        "var object = { 'a': { 'b': 2 } };\nvar other = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.has(object, 'a');\n// => true\n\n_.has(object, 'a.b');\n// => true\n\n_.has(object, ['a', 'b']);\n// => true\n\n_.has(other, 'a');\n// => false"
      ],
      "name": "has",
      "longname": "_.has",
      "kind": "function",
      "___id": "T000002R002229",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */",
      "meta": {
        "range": [
          418164,
          418265
        ],
        "filename": "lodash.js",
        "lineno": 13153,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022197",
          "name": "hasIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path"
          ]
        }
      },
      "description": "Checks if `path` is a direct or inherited property of `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path to check.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `path` exists, else `false`."
        }
      ],
      "examples": [
        "var object = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.hasIn(object, 'a');\n// => true\n\n_.hasIn(object, 'a.b');\n// => true\n\n_.hasIn(object, ['a', 'b']);\n// => true\n\n_.hasIn(object, 'b');\n// => false"
      ],
      "name": "hasIn",
      "longname": "_.hasIn",
      "kind": "function",
      "___id": "T000002R002230",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */",
      "meta": {
        "range": [
          418826,
          418934
        ],
        "filename": "lodash.js",
        "lineno": 13175,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022213",
          "name": "invert",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an object composed of the inverted keys and values of `object`.\nIf `object` contains duplicate values, subsequent values overwrite\nproperty assignments of previous values.",
      "scope": "static",
      "memberof": "_",
      "since": "0.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to invert.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new inverted object."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invert(object);\n// => { '1': 'c', '2': 'b' }"
      ],
      "name": "invert",
      "longname": "_.invert",
      "kind": "member",
      "___id": "T000002R002231",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */",
      "meta": {
        "range": [
          419891,
          420102
        ],
        "filename": "lodash.js",
        "lineno": 13205,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022232",
          "name": "invertBy",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.invert` except that the inverted object is generated\nfrom the results of running each element of `object` thru `iteratee`. The\ncorresponding inverted value of each inverted key is an array of keys\nresponsible for generating the inverted value. The iteratee is invoked\nwith one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to invert.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new inverted object."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invertBy(object);\n// => { '1': ['a', 'c'], '2': ['b'] }\n\n_.invertBy(object, function(value) {\n  return 'group' + value;\n});\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }"
      ],
      "name": "invertBy",
      "longname": "_.invertBy",
      "kind": "member",
      "___id": "T000002R002233",
      "___s": true
    },
    {
      "comment": "/**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */",
      "meta": {
        "range": [
          420675,
          420704
        ],
        "filename": "lodash.js",
        "lineno": 13231,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022267",
          "name": "invoke",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Invokes the method at `path` of `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the method to invoke.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to invoke the method with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the result of the invoked method."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n\n_.invoke(object, 'a[0].b.c.slice', 1, 3);\n// => [2, 3]"
      ],
      "name": "invoke",
      "longname": "_.invoke",
      "kind": "member",
      "___id": "T000002R002235",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */",
      "meta": {
        "range": [
          421451,
          421557
        ],
        "filename": "lodash.js",
        "lineno": 13261,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022272",
          "name": "keys",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of the own enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects. See the\n[ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\nfor more details.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names."
        }
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n\n_.keys('hi');\n// => ['0', '1']"
      ],
      "name": "keys",
      "longname": "_.keys",
      "kind": "function",
      "___id": "T000002R002236",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */",
      "meta": {
        "range": [
          422161,
          422277
        ],
        "filename": "lodash.js",
        "lineno": 13288,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022287",
          "name": "keysIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of the own and inherited enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property names."
        }
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)"
      ],
      "name": "keysIn",
      "longname": "_.keysIn",
      "kind": "function",
      "___id": "T000002R002237",
      "___s": true
    },
    {
      "comment": "/**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */",
      "meta": {
        "range": [
          423053,
          423319
        ],
        "filename": "lodash.js",
        "lineno": 13313,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022303",
          "name": "mapKeys",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        },
        "vars": {
          "result": "_.mapKeys~result",
          "iteratee": "_.mapKeys~iteratee",
          "": null
        }
      },
      "description": "The opposite of `_.mapValues`; this method creates an object with the\nsame values as `object` and keys generated by running each own enumerable\nstring keyed property of `object` thru `iteratee`. The iteratee is invoked\nwith three arguments: (value, key, object).",
      "scope": "static",
      "memberof": "_",
      "since": "3.8.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new mapped object."
        }
      ],
      "see": [
        "_.mapValues"
      ],
      "examples": [
        "_.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }"
      ],
      "name": "mapKeys",
      "longname": "_.mapKeys",
      "kind": "function",
      "___id": "T000002R002238",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */",
      "meta": {
        "range": [
          424362,
          424628
        ],
        "filename": "lodash.js",
        "lineno": 13351,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022340",
          "name": "mapValues",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee"
          ]
        },
        "vars": {
          "result": "_.mapValues~result",
          "iteratee": "_.mapValues~iteratee",
          "": null
        }
      },
      "description": "Creates an object with the same keys as `object` and values generated\nby running each own enumerable string keyed property of `object` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, key, object).",
      "scope": "static",
      "memberof": "_",
      "since": "2.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new mapped object."
        }
      ],
      "see": [
        "_.mapKeys"
      ],
      "examples": [
        "var users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n\n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)"
      ],
      "name": "mapValues",
      "longname": "_.mapValues",
      "kind": "function",
      "___id": "T000002R002241",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */",
      "meta": {
        "range": [
          425757,
          425866
        ],
        "filename": "lodash.js",
        "lineno": 13392,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022378",
          "name": "merge",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.assign` except that it recursively merges own and\ninherited enumerable string keyed properties of source objects into the\ndestination object. Source properties that resolve to `undefined` are\nskipped if a destination value exists. Array and plain object properties\nare merged recursively. Other objects and value types are overridden by\nassignment. Source objects are applied from left to right. Subsequent\nsources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "0.5.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "var object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n\nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n\n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }"
      ],
      "name": "merge",
      "longname": "_.merge",
      "kind": "member",
      "___id": "T000002R002244",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */",
      "meta": {
        "range": [
          426991,
          427128
        ],
        "filename": "lodash.js",
        "lineno": 13427,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022394",
          "name": "mergeWith",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined`, merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "variable": true,
          "description": "The source objects.",
          "name": "sources"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to customize assigned values.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "function customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n\n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }"
      ],
      "name": "mergeWith",
      "longname": "_.mergeWith",
      "kind": "member",
      "___id": "T000002R002245",
      "___s": true
    },
    {
      "comment": "/**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable string keyed properties of `object` that are\n     * not omitted.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */",
      "meta": {
        "range": [
          427738,
          427955
        ],
        "filename": "lodash.js",
        "lineno": 13450,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022412",
          "name": "omit",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The opposite of `_.pick`; this method creates an object composed of the\nown and inherited enumerable string keyed properties of `object` that are\nnot omitted.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string",
              "Array.<string>"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The property identifiers to omit.",
          "name": "props"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }"
      ],
      "name": "omit",
      "longname": "_.omit",
      "kind": "member",
      "___id": "T000002R002246",
      "___s": true
    },
    {
      "comment": "/**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */",
      "meta": {
        "range": [
          428657,
          428760
        ],
        "filename": "lodash.js",
        "lineno": 13478,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022444",
          "name": "omitBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "predicate"
          ]
        }
      },
      "description": "The opposite of `_.pickBy`; this method creates an object composed of\nthe own and inherited enumerable string keyed properties of `object` that\n`predicate` doesn't return truthy for. The predicate is invoked with two\narguments: (value, key).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per property.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omitBy(object, _.isNumber);\n// => { 'b': '2' }"
      ],
      "name": "omitBy",
      "longname": "_.omitBy",
      "kind": "function",
      "___id": "T000002R002248",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */",
      "meta": {
        "range": [
          429264,
          429389
        ],
        "filename": "lodash.js",
        "lineno": 13499,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022459",
          "name": "pick",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an object composed of the picked `object` properties.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string",
              "Array.<string>"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The property identifiers to pick.",
          "name": "props"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }"
      ],
      "name": "pick",
      "longname": "_.pick",
      "kind": "member",
      "___id": "T000002R002249",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */",
      "meta": {
        "range": [
          429986,
          430129
        ],
        "filename": "lodash.js",
        "lineno": 13521,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022480",
          "name": "pickBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "predicate"
          ]
        }
      },
      "description": "Creates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: (value, key).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The source object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per property.",
          "name": "predicate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new object."
        }
      ],
      "examples": [
        "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pickBy(object, _.isNumber);\n// => { 'a': 1, 'c': 3 }"
      ],
      "name": "pickBy",
      "longname": "_.pickBy",
      "kind": "function",
      "___id": "T000002R002250",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */",
      "meta": {
        "range": [
          431061,
          431668
        ],
        "filename": "lodash.js",
        "lineno": 13554,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022500",
          "name": "result",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "defaultValue"
          ]
        },
        "vars": {
          "path": "_.result~path",
          "index": "_.result~index",
          "length": "_.result~length",
          "object": "_.result~object",
          "value": "_.result~value"
        }
      },
      "description": "This method is like `_.get` except that if the resolved value is a\nfunction it's invoked with the `this` binding of its parent object and\nits result is returned.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to resolve.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The value returned for `undefined` resolved values.",
          "name": "defaultValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the resolved value."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n\n_.result(object, 'a[0].b.c1');\n// => 3\n\n_.result(object, 'a[0].b.c2');\n// => 4\n\n_.result(object, 'a[0].b.c3', 'default');\n// => 'default'\n\n_.result(object, 'a[0].b.c3', _.constant('default'));\n// => 'default'"
      ],
      "name": "result",
      "longname": "_.result",
      "kind": "function",
      "___id": "T000002R002251",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */",
      "meta": {
        "range": [
          432582,
          432692
        ],
        "filename": "lodash.js",
        "lineno": 13604,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022590",
          "name": "set",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "value"
          ]
        }
      },
      "description": "Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\nit's created. Arrays are created for missing index properties while objects\nare created for all other missing properties. Use `_.setWith` to customize\n`path` creation.\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to set.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to set.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n\n_.set(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5"
      ],
      "name": "set",
      "longname": "_.set",
      "kind": "function",
      "___id": "T000002R002261",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */",
      "meta": {
        "range": [
          433580,
          433795
        ],
        "filename": "lodash.js",
        "lineno": 13632,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022607",
          "name": "setWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "value",
            "customizer"
          ]
        },
        "vars": {
          "customizer": "_.setWith~customizer"
        }
      },
      "description": "This method is like `_.set` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to set.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to set.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize assigned values.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "var object = {};\n\n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }"
      ],
      "name": "setWith",
      "longname": "_.setWith",
      "kind": "function",
      "___id": "T000002R002262",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */",
      "meta": {
        "range": [
          434458,
          434487
        ],
        "filename": "lodash.js",
        "lineno": 13661,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022637",
          "name": "toPairs",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of own enumerable string keyed-value pairs for `object`\nwhich can be consumed by `_.fromPairs`. If `object` is a map or set, its\nentries are returned.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "alias": "entries",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the key-value pairs."
        }
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)"
      ],
      "name": "entries",
      "longname": "_.entries",
      "kind": "member",
      "___id": "T000002R002264",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */",
      "meta": {
        "range": [
          435179,
          435212
        ],
        "filename": "lodash.js",
        "lineno": 13687,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022643",
          "name": "toPairsIn",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of own and inherited enumerable string keyed-value pairs\nfor `object` which can be consumed by `_.fromPairs`. If `object` is a map\nor set, its entries are returned.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "alias": "entriesIn",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the key-value pairs."
        }
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairsIn(new Foo);\n// => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)"
      ],
      "name": "entriesIn",
      "longname": "_.entriesIn",
      "kind": "member",
      "___id": "T000002R002265",
      "___s": true
    },
    {
      "comment": "/**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */",
      "meta": {
        "range": [
          436503,
          437246
        ],
        "filename": "lodash.js",
        "lineno": 13719,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022648",
          "name": "transform",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "iteratee",
            "accumulator"
          ]
        },
        "vars": {
          "isArr": "_.transform~isArr",
          "isArrLike": "_.transform~isArrLike",
          "iteratee": "_.transform~iteratee",
          "Ctor": "_.transform~Ctor",
          "accumulator": "_.transform~accumulator",
          "": null
        }
      },
      "description": "An alternative to `_.reduce`; this method transforms `object` to a new\n`accumulator` object which is the result of running each of its own\nenumerable string keyed properties thru `iteratee`, with each invocation\npotentially mutating the `accumulator` object. If `accumulator` is not\nprovided, a new object with the same `[[Prototype]]` will be used. The\niteratee is invoked with four arguments: (accumulator, value, key, object).\nIteratee functions may exit iteration early by explicitly returning `false`.",
      "scope": "static",
      "memberof": "_",
      "since": "1.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to iterate over.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "description": "The custom accumulator value.",
          "name": "accumulator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the accumulated value."
        }
      ],
      "examples": [
        "_.transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n\n_.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }"
      ],
      "name": "transform",
      "longname": "_.transform",
      "kind": "function",
      "___id": "T000002R002266",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */",
      "meta": {
        "range": [
          438006,
          438104
        ],
        "filename": "lodash.js",
        "lineno": 13769,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022746",
          "name": "unset",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path"
          ]
        }
      },
      "description": "Removes the property at `path` of `object`.\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to unset.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if the property is deleted, else `false`."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };"
      ],
      "name": "unset",
      "longname": "_.unset",
      "kind": "function",
      "___id": "T000002R002274",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */",
      "meta": {
        "range": [
          439050,
          439184
        ],
        "filename": "lodash.js",
        "lineno": 13800,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022761",
          "name": "update",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "updater"
          ]
        }
      },
      "description": "This method is like `_.set` except that accepts `updater` to produce the\nvalue to set. Use `_.updateWith` to customize `path` creation. The `updater`\nis invoked with one argument: (value).\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.6.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to set.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to produce the updated value.",
          "name": "updater"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n\n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0"
      ],
      "name": "update",
      "longname": "_.update",
      "kind": "function",
      "___id": "T000002R002275",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */",
      "meta": {
        "range": [
          440124,
          440363
        ],
        "filename": "lodash.js",
        "lineno": 13828,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022780",
          "name": "updateWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "path",
            "updater",
            "customizer"
          ]
        },
        "vars": {
          "customizer": "_.updateWith~customizer"
        }
      },
      "description": "This method is like `_.update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.6.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to modify.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to set.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to produce the updated value.",
          "name": "updater"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function to customize assigned values.",
          "name": "customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "var object = {};\n\n_.updateWith(object, '[0][1]', _.constant('a'), Object);\n// => { '0': { '1': 'a' } }"
      ],
      "name": "updateWith",
      "longname": "_.updateWith",
      "kind": "function",
      "___id": "T000002R002276",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */",
      "meta": {
        "range": [
          441013,
          441105
        ],
        "filename": "lodash.js",
        "lineno": 13859,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022811",
          "name": "values",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of the own enumerable string keyed property values of `object`.\n\n**Note:** Non-object values are coerced to objects.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property values."
        }
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n\n_.values('hi');\n// => ['h', 'i']"
      ],
      "name": "values",
      "longname": "_.values",
      "kind": "function",
      "___id": "T000002R002278",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */",
      "meta": {
        "range": [
          441727,
          441831
        ],
        "filename": "lodash.js",
        "lineno": 13887,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022825",
          "name": "valuesIn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        }
      },
      "description": "Creates an array of the own and inherited enumerable string keyed property\nvalues of `object`.\n\n**Note:** Non-object values are coerced to objects.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Object",
          "value": "Object"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of property values."
        }
      ],
      "examples": [
        "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.valuesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)"
      ],
      "name": "valuesIn",
      "longname": "_.valuesIn",
      "kind": "function",
      "___id": "T000002R002279",
      "___s": true
    },
    {
      "comment": "/**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */",
      "meta": {
        "range": [
          442406,
          442835
        ],
        "filename": "lodash.js",
        "lineno": 13912,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022841",
          "name": "clamp",
          "type": "FunctionDeclaration",
          "paramnames": [
            "number",
            "lower",
            "upper"
          ]
        },
        "vars": {
          "upper": "_.clamp~upper",
          "lower": "_.clamp~lower"
        }
      },
      "description": "Clamps `number` within the inclusive `lower` and `upper` bounds.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Number",
          "value": "Number"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number to clamp.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The lower bound.",
          "name": "lower"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The upper bound.",
          "name": "upper"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the clamped number."
        }
      ],
      "examples": [
        "_.clamp(-10, -5, 5);\n// => -5\n\n_.clamp(10, -5, 5);\n// => 5"
      ],
      "name": "clamp",
      "longname": "_.clamp",
      "kind": "function",
      "___id": "T000002R002280",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */",
      "meta": {
        "range": [
          443851,
          444128
        ],
        "filename": "lodash.js",
        "lineno": 13966,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022908",
          "name": "inRange",
          "type": "FunctionDeclaration",
          "paramnames": [
            "number",
            "start",
            "end"
          ]
        },
        "vars": {
          "start": "_.inRange~start",
          "end": "_.inRange~end",
          "number": "_.inRange~number"
        }
      },
      "description": "Checks if `n` is between `start` and up to, but not including, `end`. If\n`end` is not specified, it's set to `start` with `start` then set to `0`.\nIf `start` is greater than `end` the params are swapped to support\nnegative ranges.",
      "scope": "static",
      "memberof": "_",
      "since": "3.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Number",
          "value": "Number"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number to check.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start of the range.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The end of the range.",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `number` is in the range, else `false`."
        }
      ],
      "see": [
        "_.range, _.rangeRight"
      ],
      "examples": [
        "_.inRange(3, 2, 4);\n// => true\n\n_.inRange(4, 8);\n// => true\n\n_.inRange(4, 2);\n// => false\n\n_.inRange(2, 2);\n// => false\n\n_.inRange(1.2, 2);\n// => true\n\n_.inRange(5.2, 4);\n// => false\n\n_.inRange(-3, -2, -6);\n// => true"
      ],
      "name": "inRange",
      "longname": "_.inRange",
      "kind": "function",
      "___id": "T000002R002287",
      "___s": true
    },
    {
      "comment": "/**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */",
      "meta": {
        "range": [
          445262,
          446369
        ],
        "filename": "lodash.js",
        "lineno": 14009,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100022952",
          "name": "random",
          "type": "FunctionDeclaration",
          "paramnames": [
            "lower",
            "upper",
            "floating"
          ]
        },
        "vars": {
          "upper": "_.random~upper",
          "floating": "_.random~floating",
          "lower": "_.random~lower",
          "temp": "_.random~temp",
          "rand": "_.random~rand"
        }
      },
      "description": "Produces a random number between the inclusive `lower` and `upper` bounds.\nIf only one argument is provided a number between `0` and the given number\nis returned. If `floating` is `true`, or either `lower` or `upper` are\nfloats, a floating-point number is returned instead of an integer.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
      "scope": "static",
      "memberof": "_",
      "since": "0.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Number",
          "value": "Number"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The lower bound.",
          "name": "lower"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The upper bound.",
          "name": "upper"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "Specify returning a floating-point number.",
          "name": "floating"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the random number."
        }
      ],
      "examples": [
        "_.random(0, 5);\n// => an integer between 0 and 5\n\n_.random(5);\n// => also an integer between 0 and 5\n\n_.random(5, true);\n// => a floating-point number between 0 and 5\n\n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2"
      ],
      "name": "random",
      "longname": "_.random",
      "kind": "function",
      "___id": "T000002R002293",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */",
      "meta": {
        "range": [
          446964,
          447121
        ],
        "filename": "lodash.js",
        "lineno": 14070,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023117",
          "name": "camelCase",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the camel cased string."
        }
      ],
      "examples": [
        "_.camelCase('Foo Bar');\n// => 'fooBar'\n\n_.camelCase('--foo-bar--');\n// => 'fooBar'\n\n_.camelCase('__FOO_BAR__');\n// => 'fooBar'"
      ],
      "name": "camelCase",
      "longname": "_.camelCase",
      "kind": "member",
      "___id": "T000002R002310",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */",
      "meta": {
        "range": [
          447521,
          447613
        ],
        "filename": "lodash.js",
        "lineno": 14090,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023142",
          "name": "capitalize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        }
      },
      "description": "Converts the first character of `string` to upper case and the remaining\nto lower case.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to capitalize.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the capitalized string."
        }
      ],
      "examples": [
        "_.capitalize('FRED');\n// => 'Fred'"
      ],
      "name": "capitalize",
      "longname": "_.capitalize",
      "kind": "function",
      "___id": "T000002R002312",
      "___s": true
    },
    {
      "comment": "/**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */",
      "meta": {
        "range": [
          448279,
          448430
        ],
        "filename": "lodash.js",
        "lineno": 14112,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023155",
          "name": "deburr",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        },
        "vars": {
          "string": "_.deburr~string"
        }
      },
      "description": "Deburrs `string` by converting\n[Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\nand [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\nletters to basic Latin letters and removing\n[combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to deburr.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the deburred string."
        }
      ],
      "examples": [
        "_.deburr('déjà vu');\n// => 'deja vu'"
      ],
      "name": "deburr",
      "longname": "_.deburr",
      "kind": "function",
      "___id": "T000002R002313",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */",
      "meta": {
        "range": [
          449075,
          449470
        ],
        "filename": "lodash.js",
        "lineno": 14140,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023179",
          "name": "endsWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "target",
            "position"
          ]
        },
        "vars": {
          "string": "_.endsWith~string",
          "target": "_.endsWith~target",
          "length": "_.endsWith~length",
          "position": "_.endsWith~position",
          "end": "_.endsWith~end"
        }
      },
      "description": "Checks if `string` ends with the given target string.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to inspect.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "The string to search for.",
          "name": "target"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "string.length",
          "description": "The position to search up to.",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `string` ends with `target`,\n else `false`."
        }
      ],
      "examples": [
        "_.endsWith('abc', 'c');\n// => true\n\n_.endsWith('abc', 'b');\n// => false\n\n_.endsWith('abc', 'b', 2);\n// => true"
      ],
      "name": "endsWith",
      "longname": "_.endsWith",
      "kind": "function",
      "___id": "T000002R002315",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */",
      "meta": {
        "range": [
          450590,
          450787
        ],
        "filename": "lodash.js",
        "lineno": 14182,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023241",
          "name": "escape",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        },
        "vars": {
          "string": "_.escape~string"
        }
      },
      "description": "Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\ncorresponding HTML entities.\n\n**Note:** No other characters are escaped. To escape additional\ncharacters use a third-party library like [_he_](https://mths.be/he).\n\nThough the \">\" character is escaped for symmetry, characters like\n\">\" and \"/\" don't need escaping in HTML and have no special meaning\nunless they're part of a tag or unquoted attribute value. See\n[Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n(under \"semi-related fun fact\") for more details.\n\nWhen working with HTML you should always\n[quote attribute values](http://wonko.com/post/html-escaping) to reduce\nXSS vectors.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to escape.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the escaped string."
        }
      ],
      "examples": [
        "_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'"
      ],
      "name": "escape",
      "longname": "_.escape",
      "kind": "function",
      "___id": "T000002R002322",
      "___s": true
    },
    {
      "comment": "/**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */",
      "meta": {
        "range": [
          451273,
          451462
        ],
        "filename": "lodash.js",
        "lineno": 14204,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023267",
          "name": "escapeRegExp",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        },
        "vars": {
          "string": "_.escapeRegExp~string"
        }
      },
      "description": "Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n\"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to escape.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the escaped string."
        }
      ],
      "examples": [
        "_.escapeRegExp('[lodash](https://lodash.com/)');\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'"
      ],
      "name": "escapeRegExp",
      "longname": "_.escapeRegExp",
      "kind": "function",
      "___id": "T000002R002324",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */",
      "meta": {
        "range": [
          452002,
          452132
        ],
        "filename": "lodash.js",
        "lineno": 14232,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023294",
          "name": "kebabCase",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts `string` to\n[kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the kebab cased string."
        }
      ],
      "examples": [
        "_.kebabCase('Foo Bar');\n// => 'foo-bar'\n\n_.kebabCase('fooBar');\n// => 'foo-bar'\n\n_.kebabCase('__FOO_BAR__');\n// => 'foo-bar'"
      ],
      "name": "kebabCase",
      "longname": "_.kebabCase",
      "kind": "member",
      "___id": "T000002R002326",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */",
      "meta": {
        "range": [
          452632,
          452762
        ],
        "filename": "lodash.js",
        "lineno": 14256,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023316",
          "name": "lowerCase",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts `string`, as space separated words, to lower case.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the lower cased string."
        }
      ],
      "examples": [
        "_.lowerCase('--Foo-Bar--');\n// => 'foo bar'\n\n_.lowerCase('fooBar');\n// => 'foo bar'\n\n_.lowerCase('__FOO_BAR__');\n// => 'foo bar'"
      ],
      "name": "lowerCase",
      "longname": "_.lowerCase",
      "kind": "member",
      "___id": "T000002R002327",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */",
      "meta": {
        "range": [
          453178,
          453221
        ],
        "filename": "lodash.js",
        "lineno": 14277,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023338",
          "name": "lowerFirst",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts the first character of `string` to lower case.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the converted string."
        }
      ],
      "examples": [
        "_.lowerFirst('Fred');\n// => 'fred'\n\n_.lowerFirst('FRED');\n// => 'fRED'"
      ],
      "name": "lowerFirst",
      "longname": "_.lowerFirst",
      "kind": "member",
      "___id": "T000002R002328",
      "___s": true
    },
    {
      "comment": "/**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */",
      "meta": {
        "range": [
          453899,
          454318
        ],
        "filename": "lodash.js",
        "lineno": 14302,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023343",
          "name": "pad",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "length",
            "chars"
          ]
        },
        "vars": {
          "string": "_.pad~string",
          "length": "_.pad~length",
          "strLength": "_.pad~strLength",
          "mid": "_.pad~mid"
        }
      },
      "description": "Pads `string` on the left and right sides if it's shorter than `length`.\nPadding characters are truncated if they can't be evenly divided by `length`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to pad.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The padding length.",
          "name": "length"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "' '",
          "description": "The string used as padding.",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the padded string."
        }
      ],
      "examples": [
        "_.pad('abc', 8);\n// => '  abc   '\n\n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n\n_.pad('abc', 3);\n// => 'abc'"
      ],
      "name": "pad",
      "longname": "_.pad",
      "kind": "function",
      "___id": "T000002R002329",
      "___s": true
    },
    {
      "comment": "/**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */",
      "meta": {
        "range": [
          454970,
          455263
        ],
        "filename": "lodash.js",
        "lineno": 14341,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023404",
          "name": "padEnd",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "length",
            "chars"
          ]
        },
        "vars": {
          "string": "_.padEnd~string",
          "length": "_.padEnd~length",
          "strLength": "_.padEnd~strLength"
        }
      },
      "description": "Pads `string` on the right side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to pad.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The padding length.",
          "name": "length"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "' '",
          "description": "The string used as padding.",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the padded string."
        }
      ],
      "examples": [
        "_.padEnd('abc', 6);\n// => 'abc   '\n\n_.padEnd('abc', 6, '_-');\n// => 'abc_-_'\n\n_.padEnd('abc', 3);\n// => 'abc'"
      ],
      "name": "padEnd",
      "longname": "_.padEnd",
      "kind": "function",
      "___id": "T000002R002334",
      "___s": true
    },
    {
      "comment": "/**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */",
      "meta": {
        "range": [
          455920,
          456215
        ],
        "filename": "lodash.js",
        "lineno": 14374,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023447",
          "name": "padStart",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "length",
            "chars"
          ]
        },
        "vars": {
          "string": "_.padStart~string",
          "length": "_.padStart~length",
          "strLength": "_.padStart~strLength"
        }
      },
      "description": "Pads `string` on the left side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to pad.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The padding length.",
          "name": "length"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "' '",
          "description": "The string used as padding.",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the padded string."
        }
      ],
      "examples": [
        "_.padStart('abc', 6);\n// => '   abc'\n\n_.padStart('abc', 6, '_-');\n// => '_-_abc'\n\n_.padStart('abc', 3);\n// => 'abc'"
      ],
      "name": "padStart",
      "longname": "_.padStart",
      "kind": "function",
      "___id": "T000002R002338",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */",
      "meta": {
        "range": [
          457064,
          457308
        ],
        "filename": "lodash.js",
        "lineno": 14408,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023490",
          "name": "parseInt",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "radix",
            "guard"
          ]
        },
        "vars": {
          "radix": "_.parseInt~radix"
        }
      },
      "description": "Converts `string` to an integer of the specified radix. If `radix` is\n`undefined` or `0`, a `radix` of `10` is used unless `value` is a\nhexadecimal, in which case a `radix` of `16` is used.\n\n**Note:** This method aligns with the\n[ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.",
      "scope": "static",
      "memberof": "_",
      "since": "1.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to convert.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 10,
          "description": "The radix to interpret `value` by.",
          "name": "radix"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the converted integer."
        }
      ],
      "examples": [
        "_.parseInt('08');\n// => 8\n\n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]"
      ],
      "name": "parseInt",
      "longname": "_.parseInt",
      "kind": "function",
      "___id": "T000002R002342",
      "___s": true
    },
    {
      "comment": "/**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */",
      "meta": {
        "range": [
          457898,
          458123
        ],
        "filename": "lodash.js",
        "lineno": 14439,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023529",
          "name": "repeat",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "n",
            "guard"
          ]
        },
        "vars": {
          "n": "_.repeat~n"
        }
      },
      "description": "Repeats the given string `n` times.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to repeat.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The number of times to repeat the string.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the repeated string."
        }
      ],
      "examples": [
        "_.repeat('*', 3);\n// => '***'\n\n_.repeat('abc', 2);\n// => 'abcabc'\n\n_.repeat('abc', 0);\n// => ''"
      ],
      "name": "repeat",
      "longname": "_.repeat",
      "kind": "function",
      "___id": "T000002R002345",
      "___s": true
    },
    {
      "comment": "/**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */",
      "meta": {
        "range": [
          458741,
          458908
        ],
        "filename": "lodash.js",
        "lineno": 14467,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023565",
          "name": "replace",
          "type": "FunctionDeclaration",
          "paramnames": []
        },
        "vars": {
          "args": "_.replace~args",
          "string": "_.replace~string"
        }
      },
      "description": "Replaces matches for `pattern` in `string` with `replacement`.\n\n**Note:** This method is based on\n[`String#replace`](https://mdn.io/String/replace).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to modify.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "RegExp",
              "string"
            ]
          },
          "description": "The pattern to replace.",
          "name": "pattern"
        },
        {
          "type": {
            "names": [
              "function",
              "string"
            ]
          },
          "description": "The match replacement.",
          "name": "replacement"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the modified string."
        }
      ],
      "examples": [
        "_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'"
      ],
      "name": "replace",
      "longname": "_.replace",
      "kind": "function",
      "___id": "T000002R002348",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */",
      "meta": {
        "range": [
          459427,
          459557
        ],
        "filename": "lodash.js",
        "lineno": 14495,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023598",
          "name": "snakeCase",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts `string` to\n[snake case](https://en.wikipedia.org/wiki/Snake_case).",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the snake cased string."
        }
      ],
      "examples": [
        "_.snakeCase('Foo Bar');\n// => 'foo_bar'\n\n_.snakeCase('fooBar');\n// => 'foo_bar'\n\n_.snakeCase('--FOO-BAR--');\n// => 'foo_bar'"
      ],
      "name": "snakeCase",
      "longname": "_.snakeCase",
      "kind": "member",
      "___id": "T000002R002351",
      "___s": true
    },
    {
      "comment": "/**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */",
      "meta": {
        "range": [
          460136,
          460824
        ],
        "filename": "lodash.js",
        "lineno": 14518,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023619",
          "name": "split",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "separator",
            "limit"
          ]
        },
        "vars": {
          "separator": "_.split~separator",
          "limit": "_.split~limit",
          "string": "_.split~string"
        }
      },
      "description": "Splits `string` by `separator`.\n\n**Note:** This method is based on\n[`String#split`](https://mdn.io/String/split).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to split.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "RegExp",
              "string"
            ]
          },
          "description": "The separator pattern to split by.",
          "name": "separator"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The length to truncate results to.",
          "name": "limit"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the string segments."
        }
      ],
      "examples": [
        "_.split('a-b-c', '-', 2);\n// => ['a', 'b']"
      ],
      "name": "split",
      "longname": "_.split",
      "kind": "function",
      "___id": "T000002R002352",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */",
      "meta": {
        "range": [
          461379,
          461507
        ],
        "filename": "lodash.js",
        "lineno": 14560,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023715",
          "name": "startCase",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts `string` to\n[start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).",
      "scope": "static",
      "memberof": "_",
      "since": "3.1.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the start cased string."
        }
      ],
      "examples": [
        "_.startCase('--foo-bar--');\n// => 'Foo Bar'\n\n_.startCase('fooBar');\n// => 'Foo Bar'\n\n_.startCase('__FOO_BAR__');\n// => 'FOO BAR'"
      ],
      "name": "startCase",
      "longname": "_.startCase",
      "kind": "member",
      "___id": "T000002R002358",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */",
      "meta": {
        "range": [
          462150,
          462413
        ],
        "filename": "lodash.js",
        "lineno": 14587,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023735",
          "name": "startsWith",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "target",
            "position"
          ]
        },
        "vars": {
          "string": "_.startsWith~string",
          "position": "_.startsWith~position",
          "target": "_.startsWith~target"
        }
      },
      "description": "Checks if `string` starts with the given target string.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to inspect.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "The string to search for.",
          "name": "target"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The position to search from.",
          "name": "position"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true` if `string` starts with `target`,\n else `false`."
        }
      ],
      "examples": [
        "_.startsWith('abc', 'a');\n// => true\n\n_.startsWith('abc', 'b');\n// => false\n\n_.startsWith('abc', 'b', 1);\n// => true"
      ],
      "name": "startsWith",
      "longname": "_.startsWith",
      "kind": "function",
      "___id": "T000002R002359",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */",
      "meta": {
        "range": [
          467352,
          471199
        ],
        "filename": "lodash.js",
        "lineno": 14698,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100023778",
          "name": "template",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "options",
            "guard"
          ]
        },
        "vars": {
          "settings": "_.template~settings",
          "options": "_.template~options",
          "string": "_.template~string",
          "imports": "_.template~imports",
          "importsKeys": "_.template~importsKeys",
          "importsValues": "_.template~importsValues",
          "isEscaping": "_.template~isEscaping",
          "isEvaluating": "_.template~isEvaluating",
          "index": "_.template~index",
          "interpolate": "_.template~interpolate",
          "source": "_.template~source",
          "reDelimiters": "_.template~reDelimiters",
          "sourceURL": "_.template~sourceURL",
          "": null,
          "variable": "_.template~variable",
          "result": "_.template~result",
          "result.source": "_.template~result.source"
        }
      },
      "description": "Creates a compiled template function that can interpolate data properties\nin \"interpolate\" delimiters, HTML-escape interpolated data properties in\n\"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\nproperties may be accessed as free variables in the template. If a setting\nobject is given, it takes precedence over `_.templateSettings` values.\n\n**Note:** In the development build `_.template` utilizes\n[sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\nfor easier debugging.\n\nFor more information on precompiling templates see\n[lodash's custom builds documentation](https://lodash.com/custom-builds).\n\nFor more information on Chrome extension sandboxes see\n[Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The template string.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "The options object.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "RegExp"
            ]
          },
          "optional": true,
          "defaultvalue": "_.templateSettings.escape",
          "description": "The HTML \"escape\" delimiter.",
          "name": "options.escape"
        },
        {
          "type": {
            "names": [
              "RegExp"
            ]
          },
          "optional": true,
          "defaultvalue": "_.templateSettings.evaluate",
          "description": "The \"evaluate\" delimiter.",
          "name": "options.evaluate"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "_.templateSettings.imports",
          "description": "An object to import into the template as free variables.",
          "name": "options.imports"
        },
        {
          "type": {
            "names": [
              "RegExp"
            ]
          },
          "optional": true,
          "defaultvalue": "_.templateSettings.interpolate",
          "description": "The \"interpolate\" delimiter.",
          "name": "options.interpolate"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "'lodash.templateSources[n]'",
          "description": "The sourceURL of the compiled template.",
          "name": "options.sourceURL"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "'obj'",
          "description": "The data object variable name.",
          "name": "options.variable"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the compiled template function."
        }
      ],
      "examples": [
        "// Use the \"interpolate\" delimiter to create a compiled template.\nvar compiled = _.template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n\n// Use the HTML \"escape\" delimiter to escape data property values.\nvar compiled = _.template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n\n// Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the internal `print` function in \"evaluate\" delimiters.\nvar compiled = _.template('<% print(\"hello \" + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n\n// Use the ES template literal delimiter as an \"interpolate\" delimiter.\n// Disable support by replacing the \"interpolate\" delimiter.\nvar compiled = _.template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n\n// Use backslashes to treat delimiters as plain text.\nvar compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n\n// Use the `imports` option to import `jQuery` as `jq`.\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the `sourceURL` option to specify a custom sourceURL for the template.\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n\n// Use the `variable` option to ensure a with-statement isn't used in the compiled template.\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n\n// Use custom template delimiters.\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\nvar compiled = _.template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n\n// Use the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and stack traces.\nfs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');"
      ],
      "name": "template",
      "longname": "_.template",
      "kind": "function",
      "___id": "T000002R002363",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */",
      "meta": {
        "range": [
          471747,
          471822
        ],
        "filename": "lodash.js",
        "lineno": 14827,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024120",
          "name": "toLower",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `string`, as a whole, to lower case just like\n[String#toLowerCase](https://mdn.io/toLowerCase).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the lower cased string."
        }
      ],
      "examples": [
        "_.toLower('--Foo-Bar--');\n// => '--foo-bar--'\n\n_.toLower('fooBar');\n// => 'foobar'\n\n_.toLower('__FOO_BAR__');\n// => '__foo_bar__'"
      ],
      "name": "toLower",
      "longname": "_.toLower",
      "kind": "function",
      "___id": "T000002R002393",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */",
      "meta": {
        "range": [
          472370,
          472445
        ],
        "filename": "lodash.js",
        "lineno": 14852,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024131",
          "name": "toUpper",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `string`, as a whole, to upper case just like\n[String#toUpperCase](https://mdn.io/toUpperCase).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the upper cased string."
        }
      ],
      "examples": [
        "_.toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n\n_.toUpper('fooBar');\n// => 'FOOBAR'\n\n_.toUpper('__foo_bar__');\n// => '__FOO_BAR__'"
      ],
      "name": "toUpper",
      "longname": "_.toUpper",
      "kind": "function",
      "___id": "T000002R002394",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */",
      "meta": {
        "range": [
          473106,
          473640
        ],
        "filename": "lodash.js",
        "lineno": 14878,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024142",
          "name": "trim",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "chars",
            "guard"
          ]
        },
        "vars": {
          "string": "_.trim~string",
          "chars": "_.trim~chars",
          "strSymbols": "_.trim~strSymbols",
          "chrSymbols": "_.trim~chrSymbols",
          "start": "_.trim~start",
          "end": "_.trim~end"
        }
      },
      "description": "Removes leading and trailing whitespace or specified characters from `string`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to trim.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "whitespace",
          "description": "The characters to trim.",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the trimmed string."
        }
      ],
      "examples": [
        "_.trim('  abc  ');\n// => 'abc'\n\n_.trim('-_-abc-_-', '_-');\n// => 'abc'\n\n_.map(['  foo  ', '  bar  '], _.trim);\n// => ['foo', 'bar']"
      ],
      "name": "trim",
      "longname": "_.trim",
      "kind": "function",
      "___id": "T000002R002395",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */",
      "meta": {
        "range": [
          474219,
          474661
        ],
        "filename": "lodash.js",
        "lineno": 14913,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024218",
          "name": "trimEnd",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "chars",
            "guard"
          ]
        },
        "vars": {
          "string": "_.trimEnd~string",
          "chars": "_.trimEnd~chars",
          "strSymbols": "_.trimEnd~strSymbols",
          "end": "_.trimEnd~end"
        }
      },
      "description": "Removes trailing whitespace or specified characters from `string`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to trim.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "whitespace",
          "description": "The characters to trim.",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the trimmed string."
        }
      ],
      "examples": [
        "_.trimEnd('  abc  ');\n// => '  abc'\n\n_.trimEnd('-_-abc-_-', '_-');\n// => '-_-abc'"
      ],
      "name": "trimEnd",
      "longname": "_.trimEnd",
      "kind": "function",
      "___id": "T000002R002402",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */",
      "meta": {
        "range": [
          475243,
          475688
        ],
        "filename": "lodash.js",
        "lineno": 14946,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024285",
          "name": "trimStart",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "chars",
            "guard"
          ]
        },
        "vars": {
          "string": "_.trimStart~string",
          "chars": "_.trimStart~chars",
          "strSymbols": "_.trimStart~strSymbols",
          "start": "_.trimStart~start"
        }
      },
      "description": "Removes leading whitespace or specified characters from `string`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to trim.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "whitespace",
          "description": "The characters to trim.",
          "name": "chars"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the trimmed string."
        }
      ],
      "examples": [
        "_.trimStart('  abc  ');\n// => 'abc  '\n\n_.trimStart('-_-abc-_-', '_-');\n// => 'abc-_-'"
      ],
      "name": "trimStart",
      "longname": "_.trimStart",
      "kind": "function",
      "___id": "T000002R002407",
      "___s": true
    },
    {
      "comment": "/**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */",
      "meta": {
        "range": [
          477005,
          478782
        ],
        "filename": "lodash.js",
        "lineno": 14997,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024349",
          "name": "truncate",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "options"
          ]
        },
        "vars": {
          "length": "_.truncate~length",
          "omission": "_.truncate~omission",
          "separator": "_.truncate~separator",
          "string": "_.truncate~string",
          "strLength": "_.truncate~strLength",
          "strSymbols": "_.truncate~strSymbols",
          "end": "_.truncate~end",
          "result": "_.truncate~result",
          "match": "_.truncate~match",
          "substring": "_.truncate~substring",
          "separator.lastIndex": "_.truncate~separator.lastIndex",
          "newEnd": "_.truncate~newEnd",
          "index": "_.truncate~index"
        }
      },
      "description": "Truncates `string` if it's longer than the given maximum string length.\nThe last characters of the truncated string are replaced with the omission\nstring which defaults to \"...\".",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to truncate.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "The options object.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 30,
          "description": "The maximum string length.",
          "name": "options.length"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "'...'",
          "description": "The string to indicate text is omitted.",
          "name": "options.omission"
        },
        {
          "type": {
            "names": [
              "RegExp",
              "string"
            ]
          },
          "optional": true,
          "description": "The separator pattern to truncate to.",
          "name": "options.separator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the truncated string."
        }
      ],
      "examples": [
        "_.truncate('hi-diddly-ho there, neighborino');\n// => 'hi-diddly-ho there, neighbo...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': ' '\n});\n// => 'hi-diddly-ho there,...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': /,? +/\n});\n// => 'hi-diddly-ho there...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'omission': ' [...]'\n});\n// => 'hi-diddly-ho there, neig [...]'"
      ],
      "name": "truncate",
      "longname": "_.truncate",
      "kind": "function",
      "___id": "T000002R002412",
      "___s": true
    },
    {
      "comment": "/**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */",
      "meta": {
        "range": [
          479461,
          479658
        ],
        "filename": "lodash.js",
        "lineno": 15072,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024613",
          "name": "unescape",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string"
          ]
        },
        "vars": {
          "string": "_.unescape~string"
        }
      },
      "description": "The inverse of `_.escape`; this method converts the HTML entities\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\ntheir corresponding characters.\n\n**Note:** No other HTML entities are unescaped. To unescape additional\nHTML entities use a third-party library like [_he_](https://mths.be/he).",
      "scope": "static",
      "memberof": "_",
      "since": "0.6.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to unescape.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the unescaped string."
        }
      ],
      "examples": [
        "_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'"
      ],
      "name": "unescape",
      "longname": "_.unescape",
      "kind": "function",
      "___id": "T000002R002434",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */",
      "meta": {
        "range": [
          480155,
          480285
        ],
        "filename": "lodash.js",
        "lineno": 15099,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024640",
          "name": "upperCase",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts `string`, as space separated words, to upper case.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the upper cased string."
        }
      ],
      "examples": [
        "_.upperCase('--foo-bar');\n// => 'FOO BAR'\n\n_.upperCase('fooBar');\n// => 'FOO BAR'\n\n_.upperCase('__foo_bar__');\n// => 'FOO BAR'"
      ],
      "name": "upperCase",
      "longname": "_.upperCase",
      "kind": "member",
      "___id": "T000002R002436",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */",
      "meta": {
        "range": [
          480701,
          480744
        ],
        "filename": "lodash.js",
        "lineno": 15120,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024662",
          "name": "upperFirst",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Converts the first character of `string` to upper case.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to convert.",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the converted string."
        }
      ],
      "examples": [
        "_.upperFirst('fred');\n// => 'Fred'\n\n_.upperFirst('FRED');\n// => 'FRED'"
      ],
      "name": "upperFirst",
      "longname": "_.upperFirst",
      "kind": "member",
      "___id": "T000002R002437",
      "___s": true
    },
    {
      "comment": "/**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */",
      "meta": {
        "range": [
          481387,
          481680
        ],
        "filename": "lodash.js",
        "lineno": 15141,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024667",
          "name": "words",
          "type": "FunctionDeclaration",
          "paramnames": [
            "string",
            "pattern",
            "guard"
          ]
        },
        "vars": {
          "string": "_.words~string",
          "pattern": "_.words~pattern"
        }
      },
      "description": "Splits `string` into an array of its words.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        },
        {
          "originalTitle": "param-",
          "title": "param-",
          "text": "{Object} [guard] Enables use as an iteratee for methods like `_.map`.",
          "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The string to inspect.",
          "name": "string"
        },
        {
          "type": {
            "names": [
              "RegExp",
              "string"
            ]
          },
          "optional": true,
          "description": "The pattern to match words.",
          "name": "pattern"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the words of `string`."
        }
      ],
      "examples": [
        "_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n\n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']"
      ],
      "name": "words",
      "longname": "_.words",
      "kind": "function",
      "___id": "T000002R002438",
      "___s": true
    },
    {
      "comment": "/**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */",
      "meta": {
        "range": [
          482494,
          482673
        ],
        "filename": "lodash.js",
        "lineno": 15175,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024711",
          "name": "attempt",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Attempts to invoke `func`, returning either the result or the caught error\nobject. Any additional arguments are provided to `func` when it's invoked.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function to attempt.",
          "name": "func"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to invoke `func` with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the `func` result or error object."
        }
      ],
      "examples": [
        "// Avoid throwing errors for invalid selectors.\nvar elements = _.attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n\nif (_.isError(elements)) {\n  elements = [];\n}"
      ],
      "name": "attempt",
      "longname": "_.attempt",
      "kind": "member",
      "___id": "T000002R002441",
      "___s": true
    },
    {
      "comment": "/**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */",
      "meta": {
        "range": [
          483483,
          483707
        ],
        "filename": "lodash.js",
        "lineno": 15209,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024738",
          "name": "bindAll",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Binds methods of an object to the object itself, overwriting the existing\nmethod.\n\n**Note:** This method doesn't set the \"length\" property of bound functions.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to bind and assign the bound methods to.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "string",
              "Array.<string>"
            ]
          },
          "variable": true,
          "description": "The object method names to bind.",
          "name": "methodNames"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "var view = {\n  'label': 'docs',\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n\n_.bindAll(view, ['click']);\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked."
      ],
      "name": "bindAll",
      "longname": "_.bindAll",
      "kind": "member",
      "___id": "T000002R002442",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */",
      "meta": {
        "range": [
          484656,
          485246
        ],
        "filename": "lodash.js",
        "lineno": 15246,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024772",
          "name": "cond",
          "type": "FunctionDeclaration",
          "paramnames": [
            "pairs"
          ]
        },
        "vars": {
          "length": "_.cond~length",
          "toIteratee": "_.cond~toIteratee",
          "pairs": "_.cond~pairs",
          "": null
        }
      },
      "description": "Creates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The predicate-function pairs.",
          "name": "pairs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new composite function."
        }
      ],
      "examples": [
        "var func = _.cond([\n  [_.matches({ 'a': 1 }),           _.constant('matches A')],\n  [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n  [_.stubTrue,                      _.constant('no match')]\n]);\n\nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n\nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n\nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'"
      ],
      "name": "cond",
      "longname": "_.cond",
      "kind": "function",
      "___id": "T000002R002444",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */",
      "meta": {
        "range": [
          486049,
          486134
        ],
        "filename": "lodash.js",
        "lineno": 15292,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024864",
          "name": "conforms",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source"
          ]
        }
      },
      "description": "Creates a function that invokes the predicate properties of `source` with\nthe corresponding property values of a given object, returning `true` if\nall predicates return truthy, else `false`.\n\n**Note:** The created function is equivalent to `_.conformsTo` with\n`source` partially applied.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property predicates to conform to.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new spec function."
        }
      ],
      "examples": [
        "var objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n];\n\n_.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]"
      ],
      "name": "conforms",
      "longname": "_.conforms",
      "kind": "function",
      "___id": "T000002R002450",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */",
      "meta": {
        "range": [
          486642,
          486731
        ],
        "filename": "lodash.js",
        "lineno": 15315,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024875",
          "name": "constant",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a function that returns `value`.",
      "scope": "static",
      "memberof": "_",
      "since": "2.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to return from the new function.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new constant function."
        }
      ],
      "examples": [
        "var objects = _.times(2, _.constant({ 'a': 1 }));\n\nconsole.log(objects);\n// => [{ 'a': 1 }, { 'a': 1 }]\n\nconsole.log(objects[0] === objects[1]);\n// => true"
      ],
      "name": "constant",
      "longname": "_.constant",
      "kind": "function",
      "___id": "T000002R002451",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */",
      "meta": {
        "range": [
          487284,
          487403
        ],
        "filename": "lodash.js",
        "lineno": 15341,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024884",
          "name": "defaultTo",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value",
            "defaultValue"
          ]
        }
      },
      "description": "Checks `value` to determine whether a default value should be returned in\nits place. The `defaultValue` is returned if `value` is `NaN`, `null`,\nor `undefined`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.14.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to check.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The default value.",
          "name": "defaultValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the resolved value."
        }
      ],
      "examples": [
        "_.defaultTo(1, 10);\n// => 1\n\n_.defaultTo(undefined, 10);\n// => 10"
      ],
      "name": "defaultTo",
      "longname": "_.defaultTo",
      "kind": "function",
      "___id": "T000002R002452",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */",
      "meta": {
        "range": [
          488074,
          488093
        ],
        "filename": "lodash.js",
        "lineno": 15367,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024901",
          "name": "flow",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that returns the result of invoking the given functions\nwith the `this` binding of the created function, where each successive\ninvocation is supplied the return value of the previous.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function",
              "Array.<function()>"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The functions to invoke.",
          "name": "funcs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new composite function."
        }
      ],
      "see": [
        "_.flowRight"
      ],
      "examples": [
        "function square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flow([_.add, square]);\naddSquare(1, 2);\n// => 9"
      ],
      "name": "flow",
      "longname": "_.flow",
      "kind": "member",
      "___id": "T000002R002453",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */",
      "meta": {
        "range": [
          488671,
          488699
        ],
        "filename": "lodash.js",
        "lineno": 15390,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024906",
          "name": "flowRight",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.flow` except that it creates a function that\ninvokes the given functions from right to left.",
      "scope": "static",
      "since": "3.0.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function",
              "Array.<function()>"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The functions to invoke.",
          "name": "funcs"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new composite function."
        }
      ],
      "see": [
        "_.flow"
      ],
      "examples": [
        "function square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flowRight([square, _.add]);\naddSquare(1, 2);\n// => 9"
      ],
      "name": "flowRight",
      "longname": "_.flowRight",
      "kind": "member",
      "___id": "T000002R002454",
      "___s": true
    },
    {
      "comment": "/**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */",
      "meta": {
        "range": [
          489067,
          489119
        ],
        "filename": "lodash.js",
        "lineno": 15408,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024911",
          "name": "identity",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "This method returns the first argument it receives.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Any value.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns `value`."
        }
      ],
      "examples": [
        "var object = { 'a': 1 };\n\nconsole.log(_.identity(object) === object);\n// => true"
      ],
      "name": "identity",
      "longname": "_.identity",
      "kind": "function",
      "___id": "T000002R002455",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */",
      "meta": {
        "range": [
          490685,
          490801
        ],
        "filename": "lodash.js",
        "lineno": 15454,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024917",
          "name": "iteratee",
          "type": "FunctionDeclaration",
          "paramnames": [
            "func"
          ]
        }
      },
      "description": "Creates a function that invokes `func` with the arguments of the created\nfunction. If `func` is a property name, the created function returns the\nproperty value for a given element. If `func` is an array or object, the\ncreated function returns `true` for elements that contain the equivalent\nsource properties, otherwise it returns `false`.",
      "scope": "static",
      "since": "4.0.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The value to convert to a callback.",
          "name": "func"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the callback."
        }
      ],
      "examples": [
        "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, _.iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n\n// The `_.property` iteratee shorthand.\n_.map(users, _.iteratee('user'));\n// => ['barney', 'fred']\n\n// Create custom iteratee shorthands.\n_.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n  return !_.isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n\n_.filter(['abc', 'def'], /ef/);\n// => ['def']"
      ],
      "name": "iteratee",
      "longname": "_.iteratee",
      "kind": "function",
      "___id": "T000002R002456",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */",
      "meta": {
        "range": [
          491795,
          491878
        ],
        "filename": "lodash.js",
        "lineno": 15486,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024934",
          "name": "matches",
          "type": "FunctionDeclaration",
          "paramnames": [
            "source"
          ]
        }
      },
      "description": "Creates a function that performs a partial deep comparison between a given\nobject and `source`, returning `true` if the given object has equivalent\nproperty values, else `false`.\n\n**Note:** The created function is equivalent to `_.isMatch` with `source`\npartially applied.\n\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `_.isEqual`\nfor a list of supported value comparisons.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of property values to match.",
          "name": "source"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new spec function."
        }
      ],
      "examples": [
        "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]"
      ],
      "name": "matches",
      "longname": "_.matches",
      "kind": "function",
      "___id": "T000002R002457",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */",
      "meta": {
        "range": [
          492813,
          492928
        ],
        "filename": "lodash.js",
        "lineno": 15516,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024945",
          "name": "matchesProperty",
          "type": "FunctionDeclaration",
          "paramnames": [
            "path",
            "srcValue"
          ]
        }
      },
      "description": "Creates a function that performs a partial deep comparison between the\nvalue at `path` of a given object to `srcValue`, returning `true` if the\nobject value is equivalent, else `false`.\n\n**Note:** Partial comparisons will match empty array and empty object\n`srcValue` values against any array or object value, respectively. See\n`_.isEqual` for a list of supported value comparisons.",
      "scope": "static",
      "memberof": "_",
      "since": "3.2.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to get.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to match.",
          "name": "srcValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new spec function."
        }
      ],
      "examples": [
        "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.find(objects, _.matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }"
      ],
      "name": "matchesProperty",
      "longname": "_.matchesProperty",
      "kind": "function",
      "___id": "T000002R002458",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */",
      "meta": {
        "range": [
          493660,
          493795
        ],
        "filename": "lodash.js",
        "lineno": 15544,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024959",
          "name": "method",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that invokes the method at `path` of a given object.\nAny additional arguments are provided to the invoked method.",
      "scope": "static",
      "memberof": "_",
      "since": "3.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the method to invoke.",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to invoke the method with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new invoker function."
        }
      ],
      "examples": [
        "var objects = [\n  { 'a': { 'b': _.constant(2) } },\n  { 'a': { 'b': _.constant(1) } }\n];\n\n_.map(objects, _.method('a.b'));\n// => [2, 1]\n\n_.map(objects, _.method(['a', 'b']));\n// => [2, 1]"
      ],
      "name": "method",
      "longname": "_.method",
      "kind": "member",
      "___id": "T000002R002459",
      "___s": true
    },
    {
      "comment": "/**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */",
      "meta": {
        "range": [
          494572,
          494709
        ],
        "filename": "lodash.js",
        "lineno": 15573,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024978",
          "name": "methodOf",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The opposite of `_.method`; this method creates a function that invokes\nthe method at a given path of `object`. Any additional arguments are\nprovided to the invoked method.",
      "scope": "static",
      "memberof": "_",
      "since": "3.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "optional": true,
          "variable": true,
          "description": "The arguments to invoke the method with.",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new invoker function."
        }
      ],
      "examples": [
        "var array = _.times(3, _.constant),\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.methodOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.methodOf(object));\n// => [2, 0]"
      ],
      "name": "methodOf",
      "longname": "_.methodOf",
      "kind": "member",
      "___id": "T000002R002460",
      "___s": true
    },
    {
      "comment": "/**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */",
      "meta": {
        "range": [
          495908,
          497123
        ],
        "filename": "lodash.js",
        "lineno": 15615,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100024996",
          "name": "mixin",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object",
            "source",
            "options"
          ]
        },
        "vars": {
          "props": "_.mixin~props",
          "methodNames": "_.mixin~methodNames",
          "options": "_.mixin~options",
          "source": "_.mixin~source",
          "object": "_.mixin~object",
          "chain": "_.mixin~chain",
          "isFunc": "_.mixin~isFunc",
          "": null
        }
      },
      "description": "Adds all own enumerable string keyed function properties of a source\nobject to the destination object. If `object` is a function, then methods\nare added to its prototype as well.\n\n**Note:** Use `_.runInContext` to create a pristine `lodash` function to\navoid conflicts caused by modifying the original.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function",
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "lodash",
          "description": "The destination object.",
          "name": "object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object of functions to add.",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "defaultvalue": "{}",
          "description": "The options object.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Specify whether mixins are chainable.",
          "name": "options.chain"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function",
              "Object"
            ]
          },
          "description": "Returns `object`."
        }
      ],
      "examples": [
        "function vowels(string) {\n  return _.filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n\n_.mixin({ 'vowels': vowels });\n_.vowels('fred');\n// => ['e']\n\n_('fred').vowels().value();\n// => ['e']\n\n_.mixin({ 'vowels': vowels }, { 'chain': false });\n_('fred').vowels();\n// => ['e']"
      ],
      "name": "mixin",
      "longname": "_.mixin",
      "kind": "function",
      "___id": "T000002R002461",
      "___s": true
    },
    {
      "comment": "/**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */",
      "meta": {
        "range": [
          497456,
          497567
        ],
        "filename": "lodash.js",
        "lineno": 15664,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025173",
          "name": "noConflict",
          "type": "FunctionDeclaration",
          "paramnames": []
        },
        "vars": {
          "root._": "<anonymous>~root._"
        }
      },
      "description": "Reverts the `_` variable to its previous value and returns a reference to\nthe `lodash` function.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the `lodash` function."
        }
      ],
      "examples": [
        "var lodash = _.noConflict();"
      ],
      "name": "noConflict",
      "longname": "_.noConflict",
      "kind": "function",
      "params": [],
      "___id": "T000002R002481",
      "___s": true
    },
    {
      "comment": "/**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */",
      "meta": {
        "range": [
          497798,
          497854
        ],
        "filename": "lodash.js",
        "lineno": 15683,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025191",
          "name": "noop",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "This method returns `undefined`.",
      "scope": "static",
      "memberof": "_",
      "since": "2.3.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "examples": [
        "_.times(2, _.noop);\n// => [undefined, undefined]"
      ],
      "name": "noop",
      "longname": "_.noop",
      "kind": "function",
      "params": [],
      "___id": "T000002R002483",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */",
      "meta": {
        "range": [
          498414,
          498546
        ],
        "filename": "lodash.js",
        "lineno": 15707,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025194",
          "name": "nthArg",
          "type": "FunctionDeclaration",
          "paramnames": [
            "n"
          ]
        },
        "vars": {
          "n": "_.nthArg~n",
          "": null
        }
      },
      "description": "Creates a function that gets the argument at index `n`. If `n` is negative,\nthe nth argument from the end is returned.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The index of the argument to return.",
          "name": "n"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new pass-thru function."
        }
      ],
      "examples": [
        "var func = _.nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n\nvar func = _.nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'"
      ],
      "name": "nthArg",
      "longname": "_.nthArg",
      "kind": "function",
      "___id": "T000002R002484",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */",
      "meta": {
        "range": [
          499046,
          499073
        ],
        "filename": "lodash.js",
        "lineno": 15732,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025216",
          "name": "over",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that invokes `iteratees` with the arguments it receives\nand returns their results.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function",
              "Array.<function()>"
            ]
          },
          "optional": true,
          "variable": true,
          "defaultvalue": "[_.identity]",
          "description": "The iteratees to invoke.",
          "name": "iteratees"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "var func = _.over([Math.max, Math.min]);\n\nfunc(1, 2, 3, 4);\n// => [4, 1]"
      ],
      "name": "over",
      "longname": "_.over",
      "kind": "member",
      "___id": "T000002R002486",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */",
      "meta": {
        "range": [
          499678,
          499712
        ],
        "filename": "lodash.js",
        "lineno": 15758,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025222",
          "name": "overEvery",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that checks if **all** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function",
              "Array.<function()>"
            ]
          },
          "optional": true,
          "variable": true,
          "defaultvalue": "[_.identity]",
          "description": "The predicates to check.",
          "name": "predicates"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "var func = _.overEvery([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => false\n\nfunc(NaN);\n// => false"
      ],
      "name": "overEvery",
      "longname": "_.overEvery",
      "kind": "member",
      "___id": "T000002R002487",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */",
      "meta": {
        "range": [
          500315,
          500347
        ],
        "filename": "lodash.js",
        "lineno": 15784,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025228",
          "name": "overSome",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates a function that checks if **any** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "function",
              "Array.<function()>"
            ]
          },
          "optional": true,
          "variable": true,
          "defaultvalue": "[_.identity]",
          "description": "The predicates to check.",
          "name": "predicates"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new function."
        }
      ],
      "examples": [
        "var func = _.overSome([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => true\n\nfunc(NaN);\n// => false"
      ],
      "name": "overSome",
      "longname": "_.overSome",
      "kind": "member",
      "___id": "T000002R002488",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */",
      "meta": {
        "range": [
          500935,
          501045
        ],
        "filename": "lodash.js",
        "lineno": 15808,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025233",
          "name": "property",
          "type": "FunctionDeclaration",
          "paramnames": [
            "path"
          ]
        }
      },
      "description": "Creates a function that returns the value at `path` of a given object.",
      "scope": "static",
      "memberof": "_",
      "since": "2.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array",
              "string"
            ]
          },
          "description": "The path of the property to get.",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new accessor function."
        }
      ],
      "examples": [
        "var objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n\n_.map(objects, _.property('a.b'));\n// => [2, 1]\n\n_.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n// => [1, 2]"
      ],
      "name": "property",
      "longname": "_.property",
      "kind": "function",
      "___id": "T000002R002489",
      "___s": true
    },
    {
      "comment": "/**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */",
      "meta": {
        "range": [
          501673,
          501814
        ],
        "filename": "lodash.js",
        "lineno": 15833,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025250",
          "name": "propertyOf",
          "type": "FunctionDeclaration",
          "paramnames": [
            "object"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "The opposite of `_.property`; this method creates a function that returns\nthe value at a given path of `object`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to query.",
          "name": "object"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Returns the new accessor function."
        }
      ],
      "examples": [
        "var array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.propertyOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n// => [2, 0]"
      ],
      "name": "propertyOf",
      "longname": "_.propertyOf",
      "kind": "function",
      "___id": "T000002R002490",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */",
      "meta": {
        "range": [
          503041,
          503062
        ],
        "filename": "lodash.js",
        "lineno": 15880,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025269",
          "name": "range",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Creates an array of numbers (positive and/or negative) progressing from\n`start` up to, but not including, `end`. A step of `-1` is used if a negative\n`start` is specified without an `end` or `step`. If `end` is not specified,\nit's set to `start` with `start` then set to `0`.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start of the range.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The end of the range.",
          "name": "end"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The value to increment or decrement by.",
          "name": "step"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the range of numbers."
        }
      ],
      "see": [
        "_.inRange, _.rangeRight"
      ],
      "examples": [
        "_.range(4);\n// => [0, 1, 2, 3]\n\n_.range(-4);\n// => [0, -1, -2, -3]\n\n_.range(1, 5);\n// => [1, 2, 3, 4]\n\n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n\n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n\n_.range(1, 4, 0);\n// => [1, 1, 1]\n\n_.range(0);\n// => []"
      ],
      "name": "range",
      "longname": "_.range",
      "kind": "member",
      "___id": "T000002R002491",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */",
      "meta": {
        "range": [
          503967,
          503997
        ],
        "filename": "lodash.js",
        "lineno": 15918,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025274",
          "name": "rangeRight",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "This method is like `_.range` except that it populates values in\ndescending order.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The start of the range.",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The end of the range.",
          "name": "end"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The value to increment or decrement by.",
          "name": "step"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the range of numbers."
        }
      ],
      "see": [
        "_.inRange, _.range"
      ],
      "examples": [
        "_.rangeRight(4);\n// => [3, 2, 1, 0]\n\n_.rangeRight(-4);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 5);\n// => [4, 3, 2, 1]\n\n_.rangeRight(0, 20, 5);\n// => [15, 10, 5, 0]\n\n_.rangeRight(0, -4, -1);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 4, 0);\n// => [1, 1, 1]\n\n_.rangeRight(0);\n// => []"
      ],
      "name": "rangeRight",
      "longname": "_.rangeRight",
      "kind": "member",
      "___id": "T000002R002492",
      "___s": true
    },
    {
      "comment": "/**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */",
      "meta": {
        "range": [
          504399,
          504444
        ],
        "filename": "lodash.js",
        "lineno": 15938,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025279",
          "name": "stubArray",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "This method returns a new empty array.",
      "scope": "static",
      "memberof": "_",
      "since": "4.13.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new empty array."
        }
      ],
      "examples": [
        "var arrays = _.times(2, _.stubArray);\n\nconsole.log(arrays);\n// => [[], []]\n\nconsole.log(arrays[0] === arrays[1]);\n// => false"
      ],
      "name": "stubArray",
      "longname": "_.stubArray",
      "kind": "function",
      "params": [],
      "___id": "T000002R002493",
      "___s": true
    },
    {
      "comment": "/**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */",
      "meta": {
        "range": [
          504712,
          504760
        ],
        "filename": "lodash.js",
        "lineno": 15955,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025284",
          "name": "stubFalse",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "This method returns `false`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.13.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `false`."
        }
      ],
      "examples": [
        "_.times(2, _.stubFalse);\n// => [false, false]"
      ],
      "name": "stubFalse",
      "longname": "_.stubFalse",
      "kind": "function",
      "params": [],
      "___id": "T000002R002494",
      "___s": true
    },
    {
      "comment": "/**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */",
      "meta": {
        "range": [
          505169,
          505215
        ],
        "filename": "lodash.js",
        "lineno": 15977,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025289",
          "name": "stubObject",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "This method returns a new empty object.",
      "scope": "static",
      "memberof": "_",
      "since": "4.13.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Returns the new empty object."
        }
      ],
      "examples": [
        "var objects = _.times(2, _.stubObject);\n\nconsole.log(objects);\n// => [{}, {}]\n\nconsole.log(objects[0] === objects[1]);\n// => false"
      ],
      "name": "stubObject",
      "longname": "_.stubObject",
      "kind": "function",
      "params": [],
      "___id": "T000002R002495",
      "___s": true
    },
    {
      "comment": "/**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */",
      "meta": {
        "range": [
          505494,
          505540
        ],
        "filename": "lodash.js",
        "lineno": 15994,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025294",
          "name": "stubString",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "This method returns an empty string.",
      "scope": "static",
      "memberof": "_",
      "since": "4.13.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the empty string."
        }
      ],
      "examples": [
        "_.times(2, _.stubString);\n// => ['', '']"
      ],
      "name": "stubString",
      "longname": "_.stubString",
      "kind": "function",
      "params": [],
      "___id": "T000002R002496",
      "___s": true
    },
    {
      "comment": "/**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */",
      "meta": {
        "range": [
          505803,
          505849
        ],
        "filename": "lodash.js",
        "lineno": 16011,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025299",
          "name": "stubTrue",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "This method returns `true`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.13.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Returns `true`."
        }
      ],
      "examples": [
        "_.times(2, _.stubTrue);\n// => [true, true]"
      ],
      "name": "stubTrue",
      "longname": "_.stubTrue",
      "kind": "function",
      "params": [],
      "___id": "T000002R002497",
      "___s": true
    },
    {
      "comment": "/**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */",
      "meta": {
        "range": [
          506457,
          506874
        ],
        "filename": "lodash.js",
        "lineno": 16034,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025304",
          "name": "times",
          "type": "FunctionDeclaration",
          "paramnames": [
            "n",
            "iteratee"
          ]
        },
        "vars": {
          "n": "_.times~n",
          "index": "_.times~index",
          "length": "_.times~length",
          "iteratee": "_.times~iteratee",
          "result": "_.times~result"
        }
      },
      "description": "Invokes the iteratee `n` times, returning an array of the results of\neach invocation. The iteratee is invoked with one argument; (index).",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of times to invoke `iteratee`.",
          "name": "n"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The function invoked per iteration.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the array of results."
        }
      ],
      "examples": [
        "_.times(3, String);\n// => ['0', '1', '2']\n\n _.times(4, _.constant(0));\n// => [0, 0, 0, 0]"
      ],
      "name": "times",
      "longname": "_.times",
      "kind": "function",
      "___id": "T000002R002498",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */",
      "meta": {
        "range": [
          507284,
          507462
        ],
        "filename": "lodash.js",
        "lineno": 16069,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025365",
          "name": "toPath",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Converts `value` to a property path array.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value to convert.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Returns the new property path array."
        }
      ],
      "examples": [
        "_.toPath('a.b.c');\n// => ['a', 'b', 'c']\n\n_.toPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']"
      ],
      "name": "toPath",
      "longname": "_.toPath",
      "kind": "function",
      "___id": "T000002R002505",
      "___s": true
    },
    {
      "comment": "/**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */",
      "meta": {
        "range": [
          507889,
          507986
        ],
        "filename": "lodash.js",
        "lineno": 16093,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025391",
          "name": "uniqueId",
          "type": "FunctionDeclaration",
          "paramnames": [
            "prefix"
          ]
        },
        "vars": {
          "id": "_.uniqueId~id"
        }
      },
      "description": "Generates a unique ID. If `prefix` is given, the ID is appended to it.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Util",
          "value": "Util"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "The value to prefix the ID with.",
          "name": "prefix"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Returns the unique ID."
        }
      ],
      "examples": [
        "_.uniqueId('contact_');\n// => 'contact_104'\n\n_.uniqueId();\n// => '105'"
      ],
      "name": "uniqueId",
      "longname": "_.uniqueId",
      "kind": "function",
      "___id": "T000002R002506",
      "___s": true
    },
    {
      "comment": "/**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */",
      "meta": {
        "range": [
          508432,
          508524
        ],
        "filename": "lodash.js",
        "lineno": 16115,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025407",
          "name": "add",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Adds two numbers.",
      "scope": "static",
      "memberof": "_",
      "since": "3.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The first number in an addition.",
          "name": "augend"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The second number in an addition.",
          "name": "addend"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the total."
        }
      ],
      "examples": [
        "_.add(6, 4);\n// => 10"
      ],
      "name": "add",
      "longname": "_.add",
      "kind": "member",
      "___id": "T000002R002508",
      "___s": true
    },
    {
      "comment": "/**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */",
      "meta": {
        "range": [
          509024,
          509050
        ],
        "filename": "lodash.js",
        "lineno": 16140,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025421",
          "name": "ceil",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Computes `number` rounded up to `precision`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.10.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number to round up.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The precision to round up to.",
          "name": "precision"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the rounded up number."
        }
      ],
      "examples": [
        "_.ceil(4.006);\n// => 5\n\n_.ceil(6.004, 2);\n// => 6.01\n\n_.ceil(6040, -2);\n// => 6100"
      ],
      "name": "ceil",
      "longname": "_.ceil",
      "kind": "member",
      "___id": "T000002R002509",
      "___s": true
    },
    {
      "comment": "/**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */",
      "meta": {
        "range": [
          509425,
          509526
        ],
        "filename": "lodash.js",
        "lineno": 16157,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025427",
          "name": "divide",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Divide two numbers.",
      "scope": "static",
      "memberof": "_",
      "since": "4.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The first number in a division.",
          "name": "dividend"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The second number in a division.",
          "name": "divisor"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the quotient."
        }
      ],
      "examples": [
        "_.divide(6, 4);\n// => 1.5"
      ],
      "name": "divide",
      "longname": "_.divide",
      "kind": "member",
      "___id": "T000002R002510",
      "___s": true
    },
    {
      "comment": "/**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */",
      "meta": {
        "range": [
          510037,
          510065
        ],
        "filename": "lodash.js",
        "lineno": 16182,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025441",
          "name": "floor",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Computes `number` rounded down to `precision`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.10.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number to round down.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The precision to round down to.",
          "name": "precision"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the rounded down number."
        }
      ],
      "examples": [
        "_.floor(4.006);\n// => 4\n\n_.floor(0.046, 2);\n// => 0.04\n\n_.floor(4060, -2);\n// => 4000"
      ],
      "name": "floor",
      "longname": "_.floor",
      "kind": "member",
      "___id": "T000002R002511",
      "___s": true
    },
    {
      "comment": "/**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */",
      "meta": {
        "range": [
          510496,
          510629
        ],
        "filename": "lodash.js",
        "lineno": 16202,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025446",
          "name": "max",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "Computes the maximum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the maximum value."
        }
      ],
      "examples": [
        "_.max([4, 2, 8, 6]);\n// => 8\n\n_.max([]);\n// => undefined"
      ],
      "name": "max",
      "longname": "_.max",
      "kind": "function",
      "___id": "T000002R002512",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */",
      "meta": {
        "range": [
          511416,
          511577
        ],
        "filename": "lodash.js",
        "lineno": 16231,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025463",
          "name": "maxBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the maximum value."
        }
      ],
      "examples": [
        "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.maxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n\n// The `_.property` iteratee shorthand.\n_.maxBy(objects, 'n');\n// => { 'n': 2 }"
      ],
      "name": "maxBy",
      "longname": "_.maxBy",
      "kind": "function",
      "___id": "T000002R002513",
      "___s": true
    },
    {
      "comment": "/**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */",
      "meta": {
        "range": [
          511898,
          511966
        ],
        "filename": "lodash.js",
        "lineno": 16251,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025484",
          "name": "mean",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "Computes the mean of the values in `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the mean."
        }
      ],
      "examples": [
        "_.mean([4, 2, 8, 6]);\n// => 5"
      ],
      "name": "mean",
      "longname": "_.mean",
      "kind": "function",
      "___id": "T000002R002514",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */",
      "meta": {
        "range": [
          512740,
          512836
        ],
        "filename": "lodash.js",
        "lineno": 16278,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025493",
          "name": "meanBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.mean` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be averaged.\nThe iteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the mean."
        }
      ],
      "examples": [
        "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n\n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5"
      ],
      "name": "meanBy",
      "longname": "_.meanBy",
      "kind": "function",
      "___id": "T000002R002515",
      "___s": true
    },
    {
      "comment": "/**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */",
      "meta": {
        "range": [
          513266,
          513399
        ],
        "filename": "lodash.js",
        "lineno": 16300,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025506",
          "name": "min",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "Computes the minimum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
      "scope": "static",
      "since": "0.1.0",
      "memberof": "_",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the minimum value."
        }
      ],
      "examples": [
        "_.min([4, 2, 8, 6]);\n// => 2\n\n_.min([]);\n// => undefined"
      ],
      "name": "min",
      "longname": "_.min",
      "kind": "function",
      "___id": "T000002R002516",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */",
      "meta": {
        "range": [
          514186,
          514347
        ],
        "filename": "lodash.js",
        "lineno": 16329,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025523",
          "name": "minBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "Returns the minimum value."
        }
      ],
      "examples": [
        "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.minBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n\n// The `_.property` iteratee shorthand.\n_.minBy(objects, 'n');\n// => { 'n': 1 }"
      ],
      "name": "minBy",
      "longname": "_.minBy",
      "kind": "function",
      "___id": "T000002R002517",
      "___s": true
    },
    {
      "comment": "/**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */",
      "meta": {
        "range": [
          514742,
          514859
        ],
        "filename": "lodash.js",
        "lineno": 16350,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025545",
          "name": "multiply",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Multiply two numbers.",
      "scope": "static",
      "memberof": "_",
      "since": "4.7.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The first number in a multiplication.",
          "name": "multiplier"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The second number in a multiplication.",
          "name": "multiplicand"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the product."
        }
      ],
      "examples": [
        "_.multiply(6, 4);\n// => 24"
      ],
      "name": "multiply",
      "longname": "_.multiply",
      "kind": "member",
      "___id": "T000002R002518",
      "___s": true
    },
    {
      "comment": "/**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */",
      "meta": {
        "range": [
          515350,
          515378
        ],
        "filename": "lodash.js",
        "lineno": 16375,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025559",
          "name": "round",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Computes `number` rounded to `precision`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.10.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number to round.",
          "name": "number"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "The precision to round to.",
          "name": "precision"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the rounded number."
        }
      ],
      "examples": [
        "_.round(4.006);\n// => 4\n\n_.round(4.006, 2);\n// => 4.01\n\n_.round(4060, -2);\n// => 4100"
      ],
      "name": "round",
      "longname": "_.round",
      "kind": "member",
      "___id": "T000002R002519",
      "___s": true
    },
    {
      "comment": "/**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */",
      "meta": {
        "range": [
          515765,
          515872
        ],
        "filename": "lodash.js",
        "lineno": 16392,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025565",
          "name": "subtract",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Subtract two numbers.",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The first number in a subtraction.",
          "name": "minuend"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The second number in a subtraction.",
          "name": "subtrahend"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the difference."
        }
      ],
      "examples": [
        "_.subtract(6, 4);\n// => 2"
      ],
      "name": "subtract",
      "longname": "_.subtract",
      "kind": "member",
      "___id": "T000002R002520",
      "___s": true
    },
    {
      "comment": "/**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */",
      "meta": {
        "range": [
          516192,
          516304
        ],
        "filename": "lodash.js",
        "lineno": 16410,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025578",
          "name": "sum",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array"
          ]
        }
      },
      "description": "Computes the sum of the values in `array`.",
      "scope": "static",
      "memberof": "_",
      "since": "3.4.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the sum."
        }
      ],
      "examples": [
        "_.sum([4, 2, 8, 6]);\n// => 20"
      ],
      "name": "sum",
      "longname": "_.sum",
      "kind": "function",
      "___id": "T000002R002521",
      "___s": true
    },
    {
      "comment": "/**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */",
      "meta": {
        "range": [
          517074,
          517214
        ],
        "filename": "lodash.js",
        "lineno": 16439,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100025594",
          "name": "sumBy",
          "type": "FunctionDeclaration",
          "paramnames": [
            "array",
            "iteratee"
          ]
        }
      },
      "description": "This method is like `_.sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: (value).",
      "scope": "static",
      "memberof": "_",
      "since": "4.0.0",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Math",
          "value": "Math"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "The array to iterate over.",
          "name": "array"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "_.identity",
          "description": "The iteratee invoked per element.",
          "name": "iteratee"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns the sum."
        }
      ],
      "examples": [
        "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n\n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20"
      ],
      "name": "sumBy",
      "longname": "_.sumBy",
      "kind": "function",
      "___id": "T000002R002522",
      "___s": true
    },
    {
      "comment": "/**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */",
      "meta": {
        "range": [
          527593,
          527617
        ],
        "filename": "lodash.js",
        "lineno": 16784,
        "path": "/Users/clarkie/Downloads",
        "code": {
          "id": "astnode100027491",
          "name": "lodash.VERSION",
          "type": "Identifier",
          "funcscope": "_.runInContext",
          "value": "VERSION",
          "paramnames": []
        }
      },
      "description": "The semantic version number.",
      "scope": "static",
      "memberof": "_.lodash",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "VERSION",
      "longname": "_.lodash.VERSION",
      "kind": "member",
      "___id": "T000002R002831",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/Users/clarkie/Downloads/lodash.js"
      ],
      "___id": "T000002R002925",
      "___s": true
    }
  ]
}